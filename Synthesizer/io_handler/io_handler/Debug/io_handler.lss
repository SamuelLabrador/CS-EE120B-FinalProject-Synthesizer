
io_handler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000008d2  00000966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800136  00800136  0000099c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110d  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a35  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e2  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000675  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000660  00000000  00000000  00003659  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf 01       	movw	r24, r30
  8e:	d2 01       	movw	r26, r4
  90:	3d 02       	muls	r19, r29
  92:	ec 01       	movw	r28, r24
  94:	02 02       	muls	r16, r18
  96:	4f 02       	muls	r20, r31
  98:	0b 02       	muls	r16, r27
  9a:	1a 02       	muls	r17, r26
  9c:	cd 01       	movw	r24, r26
  9e:	22 02       	muls	r18, r18
  a0:	30 02       	muls	r19, r16

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e2 ed       	ldi	r30, 0xD2	; 210
  b6:	f8 e0       	ldi	r31, 0x08	; 8
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a6 33       	cpi	r26, 0x36	; 54
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a6 e3       	ldi	r26, 0x36	; 54
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a7 35       	cpi	r26, 0x57	; 87
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	01 d2       	rcall	.+1026   	; 0x4dc <main>
  da:	f9 c3       	rjmp	.+2034   	; 0x8ce <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <TimerOn>:
	_avr_timer_cntcurr = _avr_timer_M;
	sei();				//enable interrupts
}

void TimerOff(){
	TCCR1B = 0x00;
  de:	8b e0       	ldi	r24, 0x0B	; 11
  e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  e4:	8a ef       	ldi	r24, 0xFA	; 250
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 102:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 106:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 10a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 10e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 112:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 116:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <__data_end+0x2>
 11a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <__data_end+0x3>
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 134:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 138:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 13c:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <__data_end+0x2>
 140:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <__data_end+0x3>
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	a1 09       	sbc	r26, r1
 148:	b1 09       	sbc	r27, r1
 14a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 14e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 152:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <__data_end+0x2>
 156:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <__data_end+0x3>
	if(_avr_timer_cntcurr == 0){
 15a:	89 2b       	or	r24, r25
 15c:	8a 2b       	or	r24, r26
 15e:	8b 2b       	or	r24, r27
 160:	99 f4       	brne	.+38     	; 0x188 <__vector_13+0x66>
		TimerFlag = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <TimerFlag>
		_avr_timer_cntcurr = _avr_timer_M;
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 170:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 174:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 178:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 17c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 180:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <__data_end+0x2>
 184:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <__data_end+0x3>
	}
}
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <TimerSet>:

void TimerSet(unsigned long M){
	_avr_timer_M = M;
 19a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 19e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1aa:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__data_end>
 1ae:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <__data_end+0x1>
 1b2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0x2>
 1b6:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x3>
 1ba:	08 95       	ret

000001bc <ADC_init>:

#include <util/delay.h>
#define F_CPU 16000000UL

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 1bc:	ea e7       	ldi	r30, 0x7A	; 122
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 6e       	ori	r24, 0xE0	; 224
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <scaleTo100>:
}

unsigned char scaleTo100(){		
	return (ADC - 32.0)/9.77;	//THIS EQUATION IS UNIQUE TO THE POTENTIOMETERS I USED
 1c8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1cc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	e5 d2       	rcall	.+1482   	; 0x7a0 <__floatunsisf>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	52 e4       	ldi	r21, 0x42	; 66
 1de:	e7 d1       	rcall	.+974    	; 0x5ae <__subsf3>
 1e0:	2c ee       	ldi	r18, 0xEC	; 236
 1e2:	31 e5       	ldi	r19, 0x51	; 81
 1e4:	4c e1       	ldi	r20, 0x1C	; 28
 1e6:	51 e4       	ldi	r21, 0x41	; 65
 1e8:	47 d2       	rcall	.+1166   	; 0x678 <__divsf3>
 1ea:	ae d2       	rcall	.+1372   	; 0x748 <__fixunssfsi>
 1ec:	86 2f       	mov	r24, r22
}
 1ee:	08 95       	ret

000001f0 <captureSingleKnob>:

unsigned char captureSingleKnob(unsigned char pos){
	ADMUX = pos;
 1f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	86 ea       	ldi	r24, 0xA6	; 166
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <captureSingleKnob+0x6>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <captureSingleKnob+0xc>
	_delay_us(500);		//DONT USE asm("nop") -- causes read error
	return scaleTo100();
 1fc:	e5 cf       	rjmp	.-54     	; 0x1c8 <scaleTo100>
}
 1fe:	08 95       	ret

00000200 <getPotentiometerSnapshot>:

void getPotentiometerSnapshot(unsigned char * array){	//5 potentiometers
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	8c 01       	movw	r16, r24
	unsigned char i;
	for(i = 0; i < 4; i = i + 1){
 208:	c0 e0       	ldi	r28, 0x00	; 0
		array[i] = captureSingleKnob(i + 1);
 20a:	cf 5f       	subi	r28, 0xFF	; 255
 20c:	8c 2f       	mov	r24, r28
 20e:	f0 df       	rcall	.-32     	; 0x1f0 <captureSingleKnob>
 210:	f8 01       	movw	r30, r16
 212:	81 93       	st	Z+, r24
 214:	8f 01       	movw	r16, r30
	return scaleTo100();
}

void getPotentiometerSnapshot(unsigned char * array){	//5 potentiometers
	unsigned char i;
	for(i = 0; i < 4; i = i + 1){
 216:	c4 30       	cpi	r28, 0x04	; 4
 218:	c1 f7       	brne	.-16     	; 0x20a <getPotentiometerSnapshot+0xa>
		array[i] = captureSingleKnob(i + 1);
	}
}
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <isPressed>:

unsigned char isPressed(){
	return (~PINA & 0x20);
 222:	80 b1       	in	r24, 0x00	; 0
 224:	80 95       	com	r24
}
 226:	80 72       	andi	r24, 0x20	; 32
 228:	08 95       	ret

0000022a <calcMenu>:
typedef enum Menu {INIT, RELEASE, OSC1PREP, OSC1WAIT, OSC1MAIN, FILTPREP, FILTWAIT, FILTMAIN, AMPPREP, AMPWAIT, AMPMAIN} Menu;
#define MENU_ITEMS 3


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0)/MENU_ITEMS;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	e1 df       	rcall	.-62     	; 0x1f0 <captureSingleKnob>
 22e:	9b ea       	ldi	r25, 0xAB	; 171
 230:	89 9f       	mul	r24, r25
 232:	81 2d       	mov	r24, r1
 234:	11 24       	eor	r1, r1
 236:	86 95       	lsr	r24
	if(value < 33){
 238:	81 32       	cpi	r24, 0x21	; 33
 23a:	20 f0       	brcs	.+8      	; 0x244 <calcMenu+0x1a>
		return OSC1PREP;		//OSC_1 PREP state
	}
	else if(value < 66){
 23c:	82 34       	cpi	r24, 0x42	; 66
 23e:	20 f0       	brcs	.+8      	; 0x248 <calcMenu+0x1e>
		return FILTPREP;		//FILT PREP state
	}
	else{
		return AMPPREP;			//AMP PREP state
 240:	88 e0       	ldi	r24, 0x08	; 8
 242:	08 95       	ret


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0)/MENU_ITEMS;
	if(value < 33){
		return OSC1PREP;		//OSC_1 PREP state
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	08 95       	ret
	}
	else if(value < 66){
		return FILTPREP;		//FILT PREP state
 248:	85 e0       	ldi	r24, 0x05	; 5
	}
	else{
		return AMPPREP;			//AMP PREP state
	}
}
 24a:	08 95       	ret

0000024c <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 24c:	18 16       	cp	r1, r24
 24e:	19 06       	cpc	r1, r25
 250:	5c f0       	brlt	.+22     	; 0x268 <delay_ms+0x1c>
 252:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 254:	00 00       	nop
 256:	21 50       	subi	r18, 0x01	; 1
 258:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 25a:	e1 f7       	brne	.-8      	; 0x254 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	84 17       	cp	r24, r20
 262:	95 07       	cpc	r25, r21
 264:	19 f4       	brne	.+6      	; 0x26c <delay_ms+0x20>
 266:	08 95       	ret
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 26c:	27 e0       	ldi	r18, 0x07	; 7
 26e:	33 e0       	ldi	r19, 0x03	; 3
 270:	f1 cf       	rjmp	.-30     	; 0x254 <delay_ms+0x8>

00000272 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 272:	5f 98       	cbi	0x0b, 7	; 11
   DATA_BUS = Command;
 274:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 276:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 278:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 27a:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	e5 cf       	rjmp	.-54     	; 0x24c <delay_ms>
 282:	08 95       	ret

00000284 <LCD_ClearScreen>:
#define E 6			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	f5 cf       	rjmp	.-22     	; 0x272 <LCD_WriteCommand>
 288:	08 95       	ret

0000028a <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 28a:	81 31       	cpi	r24, 0x11	; 17
 28c:	18 f4       	brcc	.+6      	; 0x294 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 28e:	81 58       	subi	r24, 0x81	; 129
 290:	f0 cf       	rjmp	.-32     	; 0x272 <LCD_WriteCommand>
 292:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 294:	81 55       	subi	r24, 0x51	; 81
 296:	ed cf       	rjmp	.-38     	; 0x272 <LCD_WriteCommand>
 298:	08 95       	ret

0000029a <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 29a:	84 e6       	ldi	r24, 0x64	; 100
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	d6 df       	rcall	.-84     	; 0x24c <delay_ms>
	LCD_WriteCommand(0x38);
 2a0:	88 e3       	ldi	r24, 0x38	; 56
 2a2:	e7 df       	rcall	.-50     	; 0x272 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	e5 df       	rcall	.-54     	; 0x272 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	e3 df       	rcall	.-58     	; 0x272 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	e1 df       	rcall	.-62     	; 0x272 <LCD_WriteCommand>
	delay_ms(10);						 
 2b0:	8a e0       	ldi	r24, 0x0A	; 10
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	cb cf       	rjmp	.-106    	; 0x24c <delay_ms>
 2b6:	08 95       	ret

000002b8 <LCD_WriteData>:
 2b8:	5f 9a       	sbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 2ba:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 2bc:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 2be:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 2c0:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(1);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	c2 cf       	rjmp	.-124    	; 0x24c <delay_ms>
 2c8:	08 95       	ret

000002ca <updateParameterValue>:

void updateParameterValue(unsigned char * array){
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	7c 01       	movw	r14, r24
 2da:	01 e1       	ldi	r16, 0x11	; 17
 2dc:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0; i < 4; i++){
		str[0] = array[i] / 10 + 48;
		str[1] = array[i] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
 2de:	0f 2e       	mov	r0, r31
 2e0:	fd ec       	ldi	r31, 0xCD	; 205
 2e2:	df 2e       	mov	r13, r31
 2e4:	f0 2d       	mov	r31, r0

void updateParameterValue(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
		str[0] = array[i] / 10 + 48;
 2e6:	f7 01       	movw	r30, r14
 2e8:	d1 91       	ld	r29, Z+
 2ea:	7f 01       	movw	r14, r30
		str[1] = array[i] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
 2ec:	c8 01       	movw	r24, r16
 2ee:	cd df       	rcall	.-102    	; 0x28a <LCD_Cursor>
		LCD_WriteData(str[0]);
 2f0:	dd 9d       	mul	r29, r13
 2f2:	c1 2d       	mov	r28, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	c6 95       	lsr	r28
 2f8:	c6 95       	lsr	r28
 2fa:	c6 95       	lsr	r28
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	8c 0f       	add	r24, r28
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	da df       	rcall	.-76     	; 0x2b8 <LCD_WriteData>
		LCD_Cursor(18 + i * 4);	
 304:	c8 01       	movw	r24, r16
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	c0 df       	rcall	.-128    	; 0x28a <LCD_Cursor>
		LCD_WriteData(str[1]);
 30a:	cc 0f       	add	r28, r28
 30c:	8c 2f       	mov	r24, r28
 30e:	88 0f       	add	r24, r24
 310:	88 0f       	add	r24, r24
 312:	c8 0f       	add	r28, r24
 314:	dc 1b       	sub	r29, r28
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	8d 0f       	add	r24, r29
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	cd df       	rcall	.-102    	; 0x2b8 <LCD_WriteData>
 31e:	0c 5f       	subi	r16, 0xFC	; 252
 320:	1f 4f       	sbci	r17, 0xFF	; 255
}

void updateParameterValue(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
 322:	01 32       	cpi	r16, 0x21	; 33
 324:	11 05       	cpc	r17, r1
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
		LCD_Cursor(18 + i * 4);	
		LCD_WriteData(str[1]);
	}
	LCD_Cursor(0);
 326:	f9 f6       	brne	.-66     	; 0x2e6 <updateParameterValue+0x1c>
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	ae df       	rcall	.-164    	; 0x28a <LCD_Cursor>
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	08 95       	ret

0000033e <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	18 2f       	mov	r17, r24
 348:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 34a:	9c df       	rcall	.-200    	; 0x284 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 34c:	88 81       	ld	r24, Y
 34e:	88 23       	and	r24, r24
 350:	51 f0       	breq	.+20     	; 0x366 <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 352:	01 e0       	ldi	r16, 0x01	; 1
 354:	01 0f       	add	r16, r17
 356:	81 2f       	mov	r24, r17
 358:	98 df       	rcall	.-208    	; 0x28a <LCD_Cursor>
      LCD_WriteData(*string++);
 35a:	89 91       	ld	r24, Y+
 35c:	ad df       	rcall	.-166    	; 0x2b8 <LCD_WriteData>
 35e:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 360:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 362:	81 11       	cpse	r24, r1
 364:	f6 cf       	rjmp	.-20     	; 0x352 <LCD_DisplayString+0x14>
 366:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <menuTask>:
 370:	1f 93       	push	r17
	_avr_timer_cntcurr = 0;
	_avr_timer_M = 0;
}

//menuTask handles the main I/O
unsigned char menuTask(unsigned char currentState){
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	00 d0       	rcall	.+0      	; 0x378 <menuTask+0x8>
 378:	00 d0       	rcall	.+0      	; 0x37a <menuTask+0xa>
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	18 2f       	mov	r17, r24
	unsigned char parameters[4];
	getPotentiometerSnapshot(parameters);
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	3d df       	rcall	.-390    	; 0x200 <getPotentiometerSnapshot>
	
	switch(currentState){	//state transition calculations
 386:	81 2f       	mov	r24, r17
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	8b 30       	cpi	r24, 0x0B	; 11
 38c:	91 05       	cpc	r25, r1
 38e:	08 f0       	brcs	.+2      	; 0x392 <menuTask+0x22>
 390:	6f c0       	rjmp	.+222    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 392:	fc 01       	movw	r30, r24
 394:	ea 5b       	subi	r30, 0xBA	; 186
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	91 c2       	rjmp	.+1314   	; 0x8bc <__tablejump2__>
				currentState = RELEASE; //WAIT FOR RELEASE
			}
			break;
			
		case(AMPPREP):
			currentState = AMPWAIT;
 39a:	19 e0       	ldi	r17, 0x09	; 9
	unsigned char parameters[4];
	getPotentiometerSnapshot(parameters);
	
	switch(currentState){	//state transition calculations
		case(INIT):
			currentState = calcMenu();
 39c:	83 c0       	rjmp	.+262    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 39e:	45 df       	rcall	.-374    	; 0x22a <calcMenu>
			break;
 3a0:	18 2f       	mov	r17, r24
		
		case(RELEASE):						//wait for button release
			if(isPressed()){
 3a2:	6c c0       	rjmp	.+216    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 3a4:	3e df       	rcall	.-388    	; 0x222 <isPressed>
 3a6:	81 11       	cpse	r24, r1
 3a8:	7d c0       	rjmp	.+250    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
				return currentState; //NO ACTIONS PREFORMED IF BUTTON IS STILL PRESSED, can return immediately
			}
			else if(previousMenuState == OSC1WAIT){
 3aa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <previousMenuState>
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <menuTask+0x44>
				currentState = OSC1MAIN;	
			}
			else if(previousMenuState == OSC1MAIN){
 3b2:	70 c0       	rjmp	.+224    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 3b4:	84 30       	cpi	r24, 0x04	; 4
				currentState = calcMenu();
 3b6:	19 f4       	brne	.+6      	; 0x3be <menuTask+0x4e>
 3b8:	38 df       	rcall	.-400    	; 0x22a <calcMenu>
 3ba:	18 2f       	mov	r17, r24
 3bc:	5f c0       	rjmp	.+190    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			}
			else if(previousMenuState == FILTWAIT){
 3be:	86 30       	cpi	r24, 0x06	; 6
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <menuTask+0x54>
				currentState = FILTMAIN;
			}
			else if(previousMenuState == FILTMAIN){
 3c2:	6f c0       	rjmp	.+222    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3c4:	87 30       	cpi	r24, 0x07	; 7
				currentState = calcMenu();
 3c6:	19 f4       	brne	.+6      	; 0x3ce <menuTask+0x5e>
 3c8:	30 df       	rcall	.-416    	; 0x22a <calcMenu>
 3ca:	18 2f       	mov	r17, r24
			}
			else if(previousMenuState = AMPWAIT){
 3cc:	57 c0       	rjmp	.+174    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 3ce:	89 e0       	ldi	r24, 0x09	; 9
				currentState = AMPMAIN;
 3d0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <previousMenuState>
		case(OSC1PREP)://OSC_1 PREP
			currentState = OSC1WAIT;
			break;
		
		case(OSC1WAIT)://OSC_1 WAIT
			if(calcMenu() != OSC1PREP){			//data knob priority over button press
 3d4:	1a e0       	ldi	r17, 0x0A	; 10
 3d6:	66 c0       	rjmp	.+204    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 3d8:	28 df       	rcall	.-432    	; 0x22a <calcMenu>
				currentState = calcMenu();
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	19 f0       	breq	.+6      	; 0x3e4 <menuTask+0x74>
 3de:	25 df       	rcall	.-438    	; 0x22a <calcMenu>
 3e0:	18 2f       	mov	r17, r24
			}
			else if(isPressed()){
 3e2:	4c c0       	rjmp	.+152    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 3e4:	1e df       	rcall	.-452    	; 0x222 <isPressed>
 3e6:	88 23       	and	r24, r24
 3e8:	09 f4       	brne	.+2      	; 0x3ec <menuTask+0x7c>
				previousMenuState = OSC1WAIT;
 3ea:	5c c0       	rjmp	.+184    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 3ec:	83 e0       	ldi	r24, 0x03	; 3
				currentState = RELEASE;	//OSC_1 Release
				LCD_DisplayString(1, "A   D   S   R");
 3ee:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <previousMenuState>
 3f2:	64 e0       	ldi	r22, 0x04	; 4
 3f4:	71 e0       	ldi	r23, 0x01	; 1
				updateParameterValue(parameters);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	a2 df       	rcall	.-188    	; 0x33e <LCD_DisplayString>
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
			if(calcMenu() != OSC1PREP){			//data knob priority over button press
				currentState = calcMenu();
			}
			else if(isPressed()){
				previousMenuState = OSC1WAIT;
				currentState = RELEASE;	//OSC_1 Release
 3fe:	65 df       	rcall	.-310    	; 0x2ca <updateParameterValue>
				
			}
			break;
			
		case(OSC1MAIN):
			if(isPressed()){
 400:	11 e0       	ldi	r17, 0x01	; 1
 402:	50 c0       	rjmp	.+160    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 404:	0e df       	rcall	.-484    	; 0x222 <isPressed>
 406:	88 23       	and	r24, r24
				previousMenuState = OSC1MAIN;
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	44 c0       	rjmp	.+136    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 40c:	84 e0       	ldi	r24, 0x04	; 4
				currentState = RELEASE; //WAIT FOR RELEASE
 40e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <previousMenuState>
		case(FILTPREP):
			currentState = FILTWAIT;
			break;
			
		case(FILTWAIT):
			if(calcMenu() != FILTPREP){			//data knob priority over button press
 412:	11 e0       	ldi	r17, 0x01	; 1
 414:	47 c0       	rjmp	.+142    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 416:	09 df       	rcall	.-494    	; 0x22a <calcMenu>
				currentState = calcMenu();
 418:	85 30       	cpi	r24, 0x05	; 5
 41a:	19 f0       	breq	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	06 df       	rcall	.-500    	; 0x22a <calcMenu>
 41e:	18 2f       	mov	r17, r24
			}
			else if(isPressed()){
 420:	2d c0       	rjmp	.+90     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 422:	ff de       	rcall	.-514    	; 0x222 <isPressed>
 424:	88 23       	and	r24, r24
 426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				previousMenuState = FILTMAIN;
 428:	3d c0       	rjmp	.+122    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 42a:	87 e0       	ldi	r24, 0x07	; 7
				currentState = RELEASE;	//OSC_1 Release
 42c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <previousMenuState>
			}
			break;
			
		case(FILTMAIN):
			if(isPressed()){
 430:	11 e0       	ldi	r17, 0x01	; 1
 432:	38 c0       	rjmp	.+112    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 434:	f6 de       	rcall	.-532    	; 0x222 <isPressed>
				previousMenuState = FILTMAIN;
 436:	88 23       	and	r24, r24
 438:	a9 f1       	breq	.+106    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 43a:	87 e0       	ldi	r24, 0x07	; 7
				currentState = RELEASE; //WAIT FOR RELEASE
 43c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <previousMenuState>
		case(AMPPREP):
			currentState = AMPWAIT;
			break;
			
		case(AMPWAIT):
			if(calcMenu() != AMPPREP){			//data knob priority over button press
 440:	11 e0       	ldi	r17, 0x01	; 1
 442:	30 c0       	rjmp	.+96     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 444:	f2 de       	rcall	.-540    	; 0x22a <calcMenu>
				currentState = calcMenu();
 446:	88 30       	cpi	r24, 0x08	; 8
 448:	19 f0       	breq	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44a:	ef de       	rcall	.-546    	; 0x22a <calcMenu>
 44c:	18 2f       	mov	r17, r24
			}
			else if(isPressed()){
 44e:	16 c0       	rjmp	.+44     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 450:	e8 de       	rcall	.-560    	; 0x222 <isPressed>
 452:	88 23       	and	r24, r24
				previousMenuState = AMPWAIT;
 454:	39 f1       	breq	.+78     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 456:	89 e0       	ldi	r24, 0x09	; 9
 458:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
 45c:	11 e0       	ldi	r17, 0x01	; 1
			}
			break;
			
		case(AMPMAIN):
			if(isPressed()){
 45e:	22 c0       	rjmp	.+68     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 460:	e0 de       	rcall	.-576    	; 0x222 <isPressed>
 462:	88 23       	and	r24, r24
				previousMenuState = AMPMAIN;
 464:	f9 f0       	breq	.+62     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 466:	8a e0       	ldi	r24, 0x0A	; 10
				currentState = RELEASE; //WAIT FOR RELEASE
 468:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <previousMenuState>
			}
			break;
		default:
			LCD_DisplayString(1, "ERROR default state");
 46c:	11 e0       	ldi	r17, 0x01	; 1
 46e:	1a c0       	rjmp	.+52     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 470:	62 e1       	ldi	r22, 0x12	; 18
 472:	71 e0       	ldi	r23, 0x01	; 1
 474:	81 e0       	ldi	r24, 0x01	; 1
				currentState = calcMenu();
			}
			break;
		
		case(OSC1PREP)://OSC_1 PREP
			currentState = OSC1WAIT;
 476:	63 df       	rcall	.-314    	; 0x33e <LCD_DisplayString>
			break;
		default:
			LCD_DisplayString(1, "ERROR default state");
	}
	
	switch(currentState){
 478:	01 c0       	rjmp	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	13 e0       	ldi	r17, 0x03	; 3
 47c:	12 30       	cpi	r17, 0x02	; 2
 47e:	19 f0       	breq	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 480:	14 30       	cpi	r17, 0x04	; 4
		case(OSC1PREP):
			LCD_DisplayString(1, "  OSCILLATOR 1");
 482:	41 f0       	breq	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 484:	0f c0       	rjmp	.+30     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 486:	66 e2       	ldi	r22, 0x26	; 38
 488:	71 e0       	ldi	r23, 0x01	; 1
 48a:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Cursor(0);
 48c:	58 df       	rcall	.-336    	; 0x33e <LCD_DisplayString>
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	fc de       	rcall	.-520    	; 0x28a <LCD_Cursor>
			break;
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case(OSC1WAIT):
			break;
			
		case(OSC1MAIN):
			updateParameterValue(parameters);
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	18 df       	rcall	.-464    	; 0x2ca <updateParameterValue>
 49a:	14 e0       	ldi	r17, 0x04	; 4
			break;
			
	}
	return currentState;
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		case(OSC1WAIT):
			break;
			
		case(OSC1MAIN):
			updateParameterValue(parameters);
			break;
 49e:	16 e0       	ldi	r17, 0x06	; 6
				currentState = RELEASE; //WAIT FOR RELEASE
			}
			break;
			
		case(FILTPREP):
			currentState = FILTWAIT;
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	17 e0       	ldi	r17, 0x07	; 7
			}
			else if(previousMenuState == OSC1MAIN){
				currentState = calcMenu();
			}
			else if(previousMenuState == FILTWAIT){
				currentState = FILTMAIN;
 4a4:	81 2f       	mov	r24, r17
	return currentState;
	
	
	
	return 0x01;
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	08 95       	ret

000004b6 <initExtern>:
 4b6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <TimerFlag>
    }
}

void initExtern(){
	TimerFlag = 0;
	_avr_timer_cntcurr = 0;
 4ba:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
 4be:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 4c2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end+0x2>
 4c6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__data_end+0x3>
	_avr_timer_M = 0;
 4ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 4ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 4d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
 4d6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
 4da:	08 95       	ret

000004dc <main>:
//forward function declerations
void initExtern();	//used to initialize external variables
unsigned char menuTask(unsigned char);

int main(void)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	2b 97       	sbiw	r28, 0x0b	; 11
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0x00; PORTA = 0xFF;	//potentiometer inputs
 4f0:	11 b8       	out	0x01, r1	; 1
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;	//LCD data out
 4f6:	87 b9       	out	0x07, r24	; 7
 4f8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;	//bits 6 and 4 input Rx in || everything else is output. Tx and LCD control
 4fa:	8a b9       	out	0x0a, r24	; 10
 4fc:	1b b8       	out	0x0b, r1	; 11
	
	initExtern();
 4fe:	db df       	rcall	.-74     	; 0x4b6 <initExtern>
	
	unsigned char i = 0x00;
	unsigned char taskCount = 1;
	task menu;
	tasks[0] = menu;
 500:	8b e0       	ldi	r24, 0x0B	; 11
 502:	fe 01       	movw	r30, r28
 504:	31 96       	adiw	r30, 0x01	; 1
 506:	ab e3       	ldi	r26, 0x3B	; 59
 508:	b1 e0       	ldi	r27, 0x01	; 1
 50a:	01 90       	ld	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	8a 95       	dec	r24
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0x2e>
	
	tasks[0].period = 50;
 512:	eb e3       	ldi	r30, 0x3B	; 59
 514:	f1 e0       	ldi	r31, 0x01	; 1
 516:	82 e3       	ldi	r24, 0x32	; 50
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	a0 e0       	ldi	r26, 0x00	; 0
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	80 83       	st	Z, r24
 520:	91 83       	std	Z+1, r25	; 0x01
 522:	a2 83       	std	Z+2, r26	; 0x02
 524:	b3 83       	std	Z+3, r27	; 0x03
	tasks[0].elapsedTime = 0;
 526:	14 82       	std	Z+4, r1	; 0x04
 528:	15 82       	std	Z+5, r1	; 0x05
 52a:	16 82       	std	Z+6, r1	; 0x06
 52c:	17 82       	std	Z+7, r1	; 0x07
	tasks[0].TickFunction = &menuTask;
 52e:	88 eb       	ldi	r24, 0xB8	; 184
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	92 87       	std	Z+10, r25	; 0x0a
	
	ADC_init();		//init ADC
 534:	81 87       	std	Z+9, r24	; 0x09
	LCD_init();		//init LCD
 536:	42 de       	rcall	.-892    	; 0x1bc <ADC_init>
 538:	b0 de       	rcall	.-672    	; 0x29a <LCD_init>
	TimerSet(5);	//set timer interrupt cycle period
 53a:	65 e0       	ldi	r22, 0x05	; 5
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();		//enable timer
 542:	2b de       	rcall	.-938    	; 0x19a <TimerSet>
 544:	cc dd       	rcall	.-1128   	; 0xde <TimerOn>
	
    while (1) 
    {
		for(i = 0; i < taskCount; i++){
			if(tasks[i].elapsedTime >= tasks[i].period){
 546:	0b e3       	ldi	r16, 0x3B	; 59
 548:	11 e0       	ldi	r17, 0x01	; 1
 54a:	d8 01       	movw	r26, r16
 54c:	14 96       	adiw	r26, 0x04	; 4
 54e:	4d 91       	ld	r20, X+
 550:	5d 91       	ld	r21, X+
 552:	6d 91       	ld	r22, X+
 554:	7c 91       	ld	r23, X
 556:	17 97       	sbiw	r26, 0x07	; 7
 558:	8d 91       	ld	r24, X+
 55a:	9d 91       	ld	r25, X+
 55c:	0d 90       	ld	r0, X+
 55e:	bc 91       	ld	r27, X
 560:	a0 2d       	mov	r26, r0
 562:	48 17       	cp	r20, r24
 564:	59 07       	cpc	r21, r25
 566:	6a 07       	cpc	r22, r26
 568:	7b 07       	cpc	r23, r27
 56a:	70 f0       	brcs	.+28     	; 0x588 <main+0xac>
				tasks[i].state = tasks[i].TickFunction(tasks[i].state);
 56c:	d8 01       	movw	r26, r16
 56e:	19 96       	adiw	r26, 0x09	; 9
 570:	ed 91       	ld	r30, X+
 572:	fc 91       	ld	r31, X
 574:	1a 97       	sbiw	r26, 0x0a	; 10
 576:	18 96       	adiw	r26, 0x08	; 8
 578:	8c 91       	ld	r24, X
 57a:	09 95       	icall
 57c:	f8 01       	movw	r30, r16
 57e:	80 87       	std	Z+8, r24	; 0x08
				tasks[i].elapsedTime = 0;
 580:	14 82       	std	Z+4, r1	; 0x04
 582:	15 82       	std	Z+5, r1	; 0x05
 584:	16 82       	std	Z+6, r1	; 0x06
 586:	17 82       	std	Z+7, r1	; 0x07
			}
			tasks[i].elapsedTime += 5;
 588:	f8 01       	movw	r30, r16
 58a:	84 81       	ldd	r24, Z+4	; 0x04
 58c:	95 81       	ldd	r25, Z+5	; 0x05
 58e:	a6 81       	ldd	r26, Z+6	; 0x06
 590:	b7 81       	ldd	r27, Z+7	; 0x07
 592:	05 96       	adiw	r24, 0x05	; 5
 594:	a1 1d       	adc	r26, r1
 596:	b1 1d       	adc	r27, r1
 598:	84 83       	std	Z+4, r24	; 0x04
 59a:	95 83       	std	Z+5, r25	; 0x05
 59c:	a6 83       	std	Z+6, r26	; 0x06
 59e:	b7 83       	std	Z+7, r27	; 0x07
		}
		TimerFlag = 0;
 5a0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <TimerFlag>
		while(!TimerFlag);
 5a4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <TimerFlag>
 5a8:	88 23       	and	r24, r24
 5aa:	e1 f3       	breq	.-8      	; 0x5a4 <main+0xc8>
 5ac:	ce cf       	rjmp	.-100    	; 0x54a <main+0x6e>

000005ae <__subsf3>:
 5ae:	50 58       	subi	r21, 0x80	; 128

000005b0 <__addsf3>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	aa 27       	eor	r26, r26
 5b4:	0e d0       	rcall	.+28     	; 0x5d2 <__addsf3x>
 5b6:	48 c1       	rjmp	.+656    	; 0x848 <__fp_round>
 5b8:	39 d1       	rcall	.+626    	; 0x82c <__fp_pscA>
 5ba:	30 f0       	brcs	.+12     	; 0x5c8 <__addsf3+0x18>
 5bc:	3e d1       	rcall	.+636    	; 0x83a <__fp_pscB>
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <__addsf3+0x18>
 5c0:	31 f4       	brne	.+12     	; 0x5ce <__addsf3+0x1e>
 5c2:	9f 3f       	cpi	r25, 0xFF	; 255
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__addsf3+0x1a>
 5c6:	1e f4       	brtc	.+6      	; 0x5ce <__addsf3+0x1e>
 5c8:	2e c1       	rjmp	.+604    	; 0x826 <__fp_nan>
 5ca:	0e f4       	brtc	.+2      	; 0x5ce <__addsf3+0x1e>
 5cc:	e0 95       	com	r30
 5ce:	e7 fb       	bst	r30, 7
 5d0:	24 c1       	rjmp	.+584    	; 0x81a <__fp_inf>

000005d2 <__addsf3x>:
 5d2:	e9 2f       	mov	r30, r25
 5d4:	4a d1       	rcall	.+660    	; 0x86a <__fp_split3>
 5d6:	80 f3       	brcs	.-32     	; 0x5b8 <__addsf3+0x8>
 5d8:	ba 17       	cp	r27, r26
 5da:	62 07       	cpc	r22, r18
 5dc:	73 07       	cpc	r23, r19
 5de:	84 07       	cpc	r24, r20
 5e0:	95 07       	cpc	r25, r21
 5e2:	18 f0       	brcs	.+6      	; 0x5ea <__addsf3x+0x18>
 5e4:	71 f4       	brne	.+28     	; 0x602 <__addsf3x+0x30>
 5e6:	9e f5       	brtc	.+102    	; 0x64e <__addsf3x+0x7c>
 5e8:	62 c1       	rjmp	.+708    	; 0x8ae <__fp_zero>
 5ea:	0e f4       	brtc	.+2      	; 0x5ee <__addsf3x+0x1c>
 5ec:	e0 95       	com	r30
 5ee:	0b 2e       	mov	r0, r27
 5f0:	ba 2f       	mov	r27, r26
 5f2:	a0 2d       	mov	r26, r0
 5f4:	0b 01       	movw	r0, r22
 5f6:	b9 01       	movw	r22, r18
 5f8:	90 01       	movw	r18, r0
 5fa:	0c 01       	movw	r0, r24
 5fc:	ca 01       	movw	r24, r20
 5fe:	a0 01       	movw	r20, r0
 600:	11 24       	eor	r1, r1
 602:	ff 27       	eor	r31, r31
 604:	59 1b       	sub	r21, r25
 606:	99 f0       	breq	.+38     	; 0x62e <__addsf3x+0x5c>
 608:	59 3f       	cpi	r21, 0xF9	; 249
 60a:	50 f4       	brcc	.+20     	; 0x620 <__addsf3x+0x4e>
 60c:	50 3e       	cpi	r21, 0xE0	; 224
 60e:	68 f1       	brcs	.+90     	; 0x66a <__addsf3x+0x98>
 610:	1a 16       	cp	r1, r26
 612:	f0 40       	sbci	r31, 0x00	; 0
 614:	a2 2f       	mov	r26, r18
 616:	23 2f       	mov	r18, r19
 618:	34 2f       	mov	r19, r20
 61a:	44 27       	eor	r20, r20
 61c:	58 5f       	subi	r21, 0xF8	; 248
 61e:	f3 cf       	rjmp	.-26     	; 0x606 <__addsf3x+0x34>
 620:	46 95       	lsr	r20
 622:	37 95       	ror	r19
 624:	27 95       	ror	r18
 626:	a7 95       	ror	r26
 628:	f0 40       	sbci	r31, 0x00	; 0
 62a:	53 95       	inc	r21
 62c:	c9 f7       	brne	.-14     	; 0x620 <__addsf3x+0x4e>
 62e:	7e f4       	brtc	.+30     	; 0x64e <__addsf3x+0x7c>
 630:	1f 16       	cp	r1, r31
 632:	ba 0b       	sbc	r27, r26
 634:	62 0b       	sbc	r22, r18
 636:	73 0b       	sbc	r23, r19
 638:	84 0b       	sbc	r24, r20
 63a:	ba f0       	brmi	.+46     	; 0x66a <__addsf3x+0x98>
 63c:	91 50       	subi	r25, 0x01	; 1
 63e:	a1 f0       	breq	.+40     	; 0x668 <__addsf3x+0x96>
 640:	ff 0f       	add	r31, r31
 642:	bb 1f       	adc	r27, r27
 644:	66 1f       	adc	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	c2 f7       	brpl	.-16     	; 0x63c <__addsf3x+0x6a>
 64c:	0e c0       	rjmp	.+28     	; 0x66a <__addsf3x+0x98>
 64e:	ba 0f       	add	r27, r26
 650:	62 1f       	adc	r22, r18
 652:	73 1f       	adc	r23, r19
 654:	84 1f       	adc	r24, r20
 656:	48 f4       	brcc	.+18     	; 0x66a <__addsf3x+0x98>
 658:	87 95       	ror	r24
 65a:	77 95       	ror	r23
 65c:	67 95       	ror	r22
 65e:	b7 95       	ror	r27
 660:	f7 95       	ror	r31
 662:	9e 3f       	cpi	r25, 0xFE	; 254
 664:	08 f0       	brcs	.+2      	; 0x668 <__addsf3x+0x96>
 666:	b3 cf       	rjmp	.-154    	; 0x5ce <__addsf3+0x1e>
 668:	93 95       	inc	r25
 66a:	88 0f       	add	r24, r24
 66c:	08 f0       	brcs	.+2      	; 0x670 <__addsf3x+0x9e>
 66e:	99 27       	eor	r25, r25
 670:	ee 0f       	add	r30, r30
 672:	97 95       	ror	r25
 674:	87 95       	ror	r24
 676:	08 95       	ret

00000678 <__divsf3>:
 678:	0c d0       	rcall	.+24     	; 0x692 <__divsf3x>
 67a:	e6 c0       	rjmp	.+460    	; 0x848 <__fp_round>
 67c:	de d0       	rcall	.+444    	; 0x83a <__fp_pscB>
 67e:	40 f0       	brcs	.+16     	; 0x690 <__divsf3+0x18>
 680:	d5 d0       	rcall	.+426    	; 0x82c <__fp_pscA>
 682:	30 f0       	brcs	.+12     	; 0x690 <__divsf3+0x18>
 684:	21 f4       	brne	.+8      	; 0x68e <__divsf3+0x16>
 686:	5f 3f       	cpi	r21, 0xFF	; 255
 688:	19 f0       	breq	.+6      	; 0x690 <__divsf3+0x18>
 68a:	c7 c0       	rjmp	.+398    	; 0x81a <__fp_inf>
 68c:	51 11       	cpse	r21, r1
 68e:	10 c1       	rjmp	.+544    	; 0x8b0 <__fp_szero>
 690:	ca c0       	rjmp	.+404    	; 0x826 <__fp_nan>

00000692 <__divsf3x>:
 692:	eb d0       	rcall	.+470    	; 0x86a <__fp_split3>
 694:	98 f3       	brcs	.-26     	; 0x67c <__divsf3+0x4>

00000696 <__divsf3_pse>:
 696:	99 23       	and	r25, r25
 698:	c9 f3       	breq	.-14     	; 0x68c <__divsf3+0x14>
 69a:	55 23       	and	r21, r21
 69c:	b1 f3       	breq	.-20     	; 0x68a <__divsf3+0x12>
 69e:	95 1b       	sub	r25, r21
 6a0:	55 0b       	sbc	r21, r21
 6a2:	bb 27       	eor	r27, r27
 6a4:	aa 27       	eor	r26, r26
 6a6:	62 17       	cp	r22, r18
 6a8:	73 07       	cpc	r23, r19
 6aa:	84 07       	cpc	r24, r20
 6ac:	38 f0       	brcs	.+14     	; 0x6bc <__divsf3_pse+0x26>
 6ae:	9f 5f       	subi	r25, 0xFF	; 255
 6b0:	5f 4f       	sbci	r21, 0xFF	; 255
 6b2:	22 0f       	add	r18, r18
 6b4:	33 1f       	adc	r19, r19
 6b6:	44 1f       	adc	r20, r20
 6b8:	aa 1f       	adc	r26, r26
 6ba:	a9 f3       	breq	.-22     	; 0x6a6 <__divsf3_pse+0x10>
 6bc:	33 d0       	rcall	.+102    	; 0x724 <__divsf3_pse+0x8e>
 6be:	0e 2e       	mov	r0, r30
 6c0:	3a f0       	brmi	.+14     	; 0x6d0 <__divsf3_pse+0x3a>
 6c2:	e0 e8       	ldi	r30, 0x80	; 128
 6c4:	30 d0       	rcall	.+96     	; 0x726 <__divsf3_pse+0x90>
 6c6:	91 50       	subi	r25, 0x01	; 1
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	e6 95       	lsr	r30
 6cc:	00 1c       	adc	r0, r0
 6ce:	ca f7       	brpl	.-14     	; 0x6c2 <__divsf3_pse+0x2c>
 6d0:	29 d0       	rcall	.+82     	; 0x724 <__divsf3_pse+0x8e>
 6d2:	fe 2f       	mov	r31, r30
 6d4:	27 d0       	rcall	.+78     	; 0x724 <__divsf3_pse+0x8e>
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	bb 1f       	adc	r27, r27
 6de:	26 17       	cp	r18, r22
 6e0:	37 07       	cpc	r19, r23
 6e2:	48 07       	cpc	r20, r24
 6e4:	ab 07       	cpc	r26, r27
 6e6:	b0 e8       	ldi	r27, 0x80	; 128
 6e8:	09 f0       	breq	.+2      	; 0x6ec <__divsf3_pse+0x56>
 6ea:	bb 0b       	sbc	r27, r27
 6ec:	80 2d       	mov	r24, r0
 6ee:	bf 01       	movw	r22, r30
 6f0:	ff 27       	eor	r31, r31
 6f2:	93 58       	subi	r25, 0x83	; 131
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	2a f0       	brmi	.+10     	; 0x702 <__divsf3_pse+0x6c>
 6f8:	9e 3f       	cpi	r25, 0xFE	; 254
 6fa:	51 05       	cpc	r21, r1
 6fc:	68 f0       	brcs	.+26     	; 0x718 <__divsf3_pse+0x82>
 6fe:	8d c0       	rjmp	.+282    	; 0x81a <__fp_inf>
 700:	d7 c0       	rjmp	.+430    	; 0x8b0 <__fp_szero>
 702:	5f 3f       	cpi	r21, 0xFF	; 255
 704:	ec f3       	brlt	.-6      	; 0x700 <__divsf3_pse+0x6a>
 706:	98 3e       	cpi	r25, 0xE8	; 232
 708:	dc f3       	brlt	.-10     	; 0x700 <__divsf3_pse+0x6a>
 70a:	86 95       	lsr	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f7 95       	ror	r31
 714:	9f 5f       	subi	r25, 0xFF	; 255
 716:	c9 f7       	brne	.-14     	; 0x70a <__divsf3_pse+0x74>
 718:	88 0f       	add	r24, r24
 71a:	91 1d       	adc	r25, r1
 71c:	96 95       	lsr	r25
 71e:	87 95       	ror	r24
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret
 724:	e1 e0       	ldi	r30, 0x01	; 1
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	bb 1f       	adc	r27, r27
 72e:	62 17       	cp	r22, r18
 730:	73 07       	cpc	r23, r19
 732:	84 07       	cpc	r24, r20
 734:	ba 07       	cpc	r27, r26
 736:	20 f0       	brcs	.+8      	; 0x740 <__divsf3_pse+0xaa>
 738:	62 1b       	sub	r22, r18
 73a:	73 0b       	sbc	r23, r19
 73c:	84 0b       	sbc	r24, r20
 73e:	ba 0b       	sbc	r27, r26
 740:	ee 1f       	adc	r30, r30
 742:	88 f7       	brcc	.-30     	; 0x726 <__divsf3_pse+0x90>
 744:	e0 95       	com	r30
 746:	08 95       	ret

00000748 <__fixunssfsi>:
 748:	98 d0       	rcall	.+304    	; 0x87a <__fp_splitA>
 74a:	88 f0       	brcs	.+34     	; 0x76e <__fixunssfsi+0x26>
 74c:	9f 57       	subi	r25, 0x7F	; 127
 74e:	90 f0       	brcs	.+36     	; 0x774 <__fixunssfsi+0x2c>
 750:	b9 2f       	mov	r27, r25
 752:	99 27       	eor	r25, r25
 754:	b7 51       	subi	r27, 0x17	; 23
 756:	a0 f0       	brcs	.+40     	; 0x780 <__fixunssfsi+0x38>
 758:	d1 f0       	breq	.+52     	; 0x78e <__fixunssfsi+0x46>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	1a f0       	brmi	.+6      	; 0x76a <__fixunssfsi+0x22>
 764:	ba 95       	dec	r27
 766:	c9 f7       	brne	.-14     	; 0x75a <__fixunssfsi+0x12>
 768:	12 c0       	rjmp	.+36     	; 0x78e <__fixunssfsi+0x46>
 76a:	b1 30       	cpi	r27, 0x01	; 1
 76c:	81 f0       	breq	.+32     	; 0x78e <__fixunssfsi+0x46>
 76e:	9f d0       	rcall	.+318    	; 0x8ae <__fp_zero>
 770:	b1 e0       	ldi	r27, 0x01	; 1
 772:	08 95       	ret
 774:	9c c0       	rjmp	.+312    	; 0x8ae <__fp_zero>
 776:	67 2f       	mov	r22, r23
 778:	78 2f       	mov	r23, r24
 77a:	88 27       	eor	r24, r24
 77c:	b8 5f       	subi	r27, 0xF8	; 248
 77e:	39 f0       	breq	.+14     	; 0x78e <__fixunssfsi+0x46>
 780:	b9 3f       	cpi	r27, 0xF9	; 249
 782:	cc f3       	brlt	.-14     	; 0x776 <__fixunssfsi+0x2e>
 784:	86 95       	lsr	r24
 786:	77 95       	ror	r23
 788:	67 95       	ror	r22
 78a:	b3 95       	inc	r27
 78c:	d9 f7       	brne	.-10     	; 0x784 <__fixunssfsi+0x3c>
 78e:	3e f4       	brtc	.+14     	; 0x79e <__fixunssfsi+0x56>
 790:	90 95       	com	r25
 792:	80 95       	com	r24
 794:	70 95       	com	r23
 796:	61 95       	neg	r22
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	08 95       	ret

000007a0 <__floatunsisf>:
 7a0:	e8 94       	clt
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <__floatsisf+0x12>

000007a4 <__floatsisf>:
 7a4:	97 fb       	bst	r25, 7
 7a6:	3e f4       	brtc	.+14     	; 0x7b6 <__floatsisf+0x12>
 7a8:	90 95       	com	r25
 7aa:	80 95       	com	r24
 7ac:	70 95       	com	r23
 7ae:	61 95       	neg	r22
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	99 23       	and	r25, r25
 7b8:	a9 f0       	breq	.+42     	; 0x7e4 <__floatsisf+0x40>
 7ba:	f9 2f       	mov	r31, r25
 7bc:	96 e9       	ldi	r25, 0x96	; 150
 7be:	bb 27       	eor	r27, r27
 7c0:	93 95       	inc	r25
 7c2:	f6 95       	lsr	r31
 7c4:	87 95       	ror	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b7 95       	ror	r27
 7cc:	f1 11       	cpse	r31, r1
 7ce:	f8 cf       	rjmp	.-16     	; 0x7c0 <__floatsisf+0x1c>
 7d0:	fa f4       	brpl	.+62     	; 0x810 <__floatsisf+0x6c>
 7d2:	bb 0f       	add	r27, r27
 7d4:	11 f4       	brne	.+4      	; 0x7da <__floatsisf+0x36>
 7d6:	60 ff       	sbrs	r22, 0
 7d8:	1b c0       	rjmp	.+54     	; 0x810 <__floatsisf+0x6c>
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	16 c0       	rjmp	.+44     	; 0x810 <__floatsisf+0x6c>
 7e4:	88 23       	and	r24, r24
 7e6:	11 f0       	breq	.+4      	; 0x7ec <__floatsisf+0x48>
 7e8:	96 e9       	ldi	r25, 0x96	; 150
 7ea:	11 c0       	rjmp	.+34     	; 0x80e <__floatsisf+0x6a>
 7ec:	77 23       	and	r23, r23
 7ee:	21 f0       	breq	.+8      	; 0x7f8 <__floatsisf+0x54>
 7f0:	9e e8       	ldi	r25, 0x8E	; 142
 7f2:	87 2f       	mov	r24, r23
 7f4:	76 2f       	mov	r23, r22
 7f6:	05 c0       	rjmp	.+10     	; 0x802 <__floatsisf+0x5e>
 7f8:	66 23       	and	r22, r22
 7fa:	71 f0       	breq	.+28     	; 0x818 <__floatsisf+0x74>
 7fc:	96 e8       	ldi	r25, 0x86	; 134
 7fe:	86 2f       	mov	r24, r22
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	2a f0       	brmi	.+10     	; 0x810 <__floatsisf+0x6c>
 806:	9a 95       	dec	r25
 808:	66 0f       	add	r22, r22
 80a:	77 1f       	adc	r23, r23
 80c:	88 1f       	adc	r24, r24
 80e:	da f7       	brpl	.-10     	; 0x806 <__floatsisf+0x62>
 810:	88 0f       	add	r24, r24
 812:	96 95       	lsr	r25
 814:	87 95       	ror	r24
 816:	97 f9       	bld	r25, 7
 818:	08 95       	ret

0000081a <__fp_inf>:
 81a:	97 f9       	bld	r25, 7
 81c:	9f 67       	ori	r25, 0x7F	; 127
 81e:	80 e8       	ldi	r24, 0x80	; 128
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	08 95       	ret

00000826 <__fp_nan>:
 826:	9f ef       	ldi	r25, 0xFF	; 255
 828:	80 ec       	ldi	r24, 0xC0	; 192
 82a:	08 95       	ret

0000082c <__fp_pscA>:
 82c:	00 24       	eor	r0, r0
 82e:	0a 94       	dec	r0
 830:	16 16       	cp	r1, r22
 832:	17 06       	cpc	r1, r23
 834:	18 06       	cpc	r1, r24
 836:	09 06       	cpc	r0, r25
 838:	08 95       	ret

0000083a <__fp_pscB>:
 83a:	00 24       	eor	r0, r0
 83c:	0a 94       	dec	r0
 83e:	12 16       	cp	r1, r18
 840:	13 06       	cpc	r1, r19
 842:	14 06       	cpc	r1, r20
 844:	05 06       	cpc	r0, r21
 846:	08 95       	ret

00000848 <__fp_round>:
 848:	09 2e       	mov	r0, r25
 84a:	03 94       	inc	r0
 84c:	00 0c       	add	r0, r0
 84e:	11 f4       	brne	.+4      	; 0x854 <__fp_round+0xc>
 850:	88 23       	and	r24, r24
 852:	52 f0       	brmi	.+20     	; 0x868 <__fp_round+0x20>
 854:	bb 0f       	add	r27, r27
 856:	40 f4       	brcc	.+16     	; 0x868 <__fp_round+0x20>
 858:	bf 2b       	or	r27, r31
 85a:	11 f4       	brne	.+4      	; 0x860 <__fp_round+0x18>
 85c:	60 ff       	sbrs	r22, 0
 85e:	04 c0       	rjmp	.+8      	; 0x868 <__fp_round+0x20>
 860:	6f 5f       	subi	r22, 0xFF	; 255
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	8f 4f       	sbci	r24, 0xFF	; 255
 866:	9f 4f       	sbci	r25, 0xFF	; 255
 868:	08 95       	ret

0000086a <__fp_split3>:
 86a:	57 fd       	sbrc	r21, 7
 86c:	90 58       	subi	r25, 0x80	; 128
 86e:	44 0f       	add	r20, r20
 870:	55 1f       	adc	r21, r21
 872:	59 f0       	breq	.+22     	; 0x88a <__fp_splitA+0x10>
 874:	5f 3f       	cpi	r21, 0xFF	; 255
 876:	71 f0       	breq	.+28     	; 0x894 <__fp_splitA+0x1a>
 878:	47 95       	ror	r20

0000087a <__fp_splitA>:
 87a:	88 0f       	add	r24, r24
 87c:	97 fb       	bst	r25, 7
 87e:	99 1f       	adc	r25, r25
 880:	61 f0       	breq	.+24     	; 0x89a <__fp_splitA+0x20>
 882:	9f 3f       	cpi	r25, 0xFF	; 255
 884:	79 f0       	breq	.+30     	; 0x8a4 <__fp_splitA+0x2a>
 886:	87 95       	ror	r24
 888:	08 95       	ret
 88a:	12 16       	cp	r1, r18
 88c:	13 06       	cpc	r1, r19
 88e:	14 06       	cpc	r1, r20
 890:	55 1f       	adc	r21, r21
 892:	f2 cf       	rjmp	.-28     	; 0x878 <__fp_split3+0xe>
 894:	46 95       	lsr	r20
 896:	f1 df       	rcall	.-30     	; 0x87a <__fp_splitA>
 898:	08 c0       	rjmp	.+16     	; 0x8aa <__fp_splitA+0x30>
 89a:	16 16       	cp	r1, r22
 89c:	17 06       	cpc	r1, r23
 89e:	18 06       	cpc	r1, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	f1 cf       	rjmp	.-30     	; 0x886 <__fp_splitA+0xc>
 8a4:	86 95       	lsr	r24
 8a6:	71 05       	cpc	r23, r1
 8a8:	61 05       	cpc	r22, r1
 8aa:	08 94       	sec
 8ac:	08 95       	ret

000008ae <__fp_zero>:
 8ae:	e8 94       	clt

000008b0 <__fp_szero>:
 8b0:	bb 27       	eor	r27, r27
 8b2:	66 27       	eor	r22, r22
 8b4:	77 27       	eor	r23, r23
 8b6:	cb 01       	movw	r24, r22
 8b8:	97 f9       	bld	r25, 7
 8ba:	08 95       	ret

000008bc <__tablejump2__>:
 8bc:	ee 0f       	add	r30, r30
 8be:	ff 1f       	adc	r31, r31
 8c0:	00 24       	eor	r0, r0
 8c2:	00 1c       	adc	r0, r0
 8c4:	0b be       	out	0x3b, r0	; 59
 8c6:	07 90       	elpm	r0, Z+
 8c8:	f6 91       	elpm	r31, Z
 8ca:	e0 2d       	mov	r30, r0
 8cc:	09 94       	ijmp

000008ce <_exit>:
 8ce:	f8 94       	cli

000008d0 <__stop_program>:
 8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <__stop_program>
