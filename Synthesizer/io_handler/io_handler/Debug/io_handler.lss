
io_handler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000bd4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  0080017e  0080017e  00000ce6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001852  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afa  00000000  00000000  000026d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b84  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079d  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3d  00000000  00000000  00004811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000534e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c3 02       	muls	r28, r19
  8e:	d2 02       	muls	r29, r18
  90:	6d 03       	fmul	r22, r21
  92:	f9 02       	muls	r31, r25
  94:	15 03       	mulsu	r17, r21
  96:	be 03       	fmulsu	r19, r22
  98:	1e 03       	fmul	r17, r22
  9a:	3a 03       	fmul	r19, r18
  9c:	c1 02       	muls	r28, r17
  9e:	43 03       	mulsu	r20, r19
  a0:	5f 03       	fmul	r21, r23

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e4 ed       	ldi	r30, 0xD4	; 212
  b6:	fb e0       	ldi	r31, 0x0B	; 11
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	ae 37       	cpi	r26, 0x7E	; 126
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	ae e7       	ldi	r26, 0x7E	; 126
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a1 3c       	cpi	r26, 0xC1	; 193
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	6e d3       	rcall	.+1756   	; 0x7b6 <main>
  da:	7a c5       	rjmp	.+2804   	; 0xbd0 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <initUSART>:

#include <util/delay.h>
#define F_CPU 16000000UL

void ADC_init() {
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE);	//0x06 MIGHT FIX PROBLEM
  de:	e1 ec       	ldi	r30, 0xC1	; 193
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 61       	ori	r24, 0x18	; 24
  e6:	80 83       	st	Z, r24
  e8:	8e e0       	ldi	r24, 0x0E	; 14
  ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f8:	08 95       	ret

000000fa <USART_Send>:
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	95 ff       	sbrs	r25, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <USART_Send+0x4>
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 108:	08 95       	ret

0000010a <usartTask>:
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
 10e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <amp>
 112:	f3 df       	rcall	.-26     	; 0xfa <USART_Send>
 114:	8c 2f       	mov	r24, r28
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <TimerOn>:
 11a:	8b e0       	ldi	r24, 0x0B	; 11
 11c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 120:	8d e7       	ldi	r24, 0x7D	; 125
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 132:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 136:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 142:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 146:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 14a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_avr_timer_cntcurr>
 14e:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <_avr_timer_cntcurr+0x1>
 152:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <_avr_timer_cntcurr+0x2>
 156:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <_avr_timer_cntcurr+0x3>
 15a:	78 94       	sei
 15c:	08 95       	ret

0000015e <__vector_13>:
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <_avr_timer_cntcurr>
 174:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <_avr_timer_cntcurr+0x1>
 178:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <_avr_timer_cntcurr+0x2>
 17c:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <_avr_timer_cntcurr+0x3>
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	a1 09       	sbc	r26, r1
 184:	b1 09       	sbc	r27, r1
 186:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_avr_timer_cntcurr>
 18a:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <_avr_timer_cntcurr+0x1>
 18e:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <_avr_timer_cntcurr+0x2>
 192:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <_avr_timer_cntcurr+0x3>
 196:	89 2b       	or	r24, r25
 198:	8a 2b       	or	r24, r26
 19a:	8b 2b       	or	r24, r27
 19c:	99 f4       	brne	.+38     	; 0x1c4 <__vector_13+0x66>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <TimerFlag>
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ac:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1b0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1b4:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_avr_timer_cntcurr>
 1b8:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <_avr_timer_cntcurr+0x1>
 1bc:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <_avr_timer_cntcurr+0x2>
 1c0:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <_avr_timer_cntcurr+0x3>
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <TimerSet>:
 1d6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1da:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1e6:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <_avr_timer_cntcurr>
 1ea:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <_avr_timer_cntcurr+0x1>
 1ee:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <_avr_timer_cntcurr+0x2>
 1f2:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <_avr_timer_cntcurr+0x3>
 1f6:	08 95       	ret

000001f8 <scaleTo100>:
}

unsigned char scaleTo100(){		
	return (ADC - 32.0)/9.77;	//THIS EQUATION IS UNIQUE TO THE POTENTIOMETERS I USED
 1f8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1fc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	4e d4       	rcall	.+2204   	; 0xaa2 <__floatunsisf>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	52 e4       	ldi	r21, 0x42	; 66
 20e:	50 d3       	rcall	.+1696   	; 0x8b0 <__subsf3>
 210:	2c ee       	ldi	r18, 0xEC	; 236
 212:	31 e5       	ldi	r19, 0x51	; 81
 214:	4c e1       	ldi	r20, 0x1C	; 28
 216:	51 e4       	ldi	r21, 0x41	; 65
 218:	b0 d3       	rcall	.+1888   	; 0x97a <__divsf3>
 21a:	17 d4       	rcall	.+2094   	; 0xa4a <__fixunssfsi>
 21c:	86 2f       	mov	r24, r22
}
 21e:	08 95       	ret

00000220 <captureSingleKnob>:

unsigned char captureSingleKnob(unsigned char pos){
	ADMUX = 0b00011111 & pos;	//MIGHT CAUSE ADC PROBLEMS
 220:	8f 71       	andi	r24, 0x1F	; 31
 222:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	asm("nop");
 226:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	87 ee       	ldi	r24, 0xE7	; 231
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <captureSingleKnob+0xc>
 230:	00 c0       	rjmp	.+0      	; 0x232 <captureSingleKnob+0x12>
 232:	00 00       	nop
	_delay_us(500);		//DONT USE asm("nop") -- causes read error
	return scaleTo100();
 234:	e1 cf       	rjmp	.-62     	; 0x1f8 <scaleTo100>
}
 236:	08 95       	ret

00000238 <getPotentiometerSnapshot>:

void getPotentiometerSnapshot(unsigned char * array){	//5 potentiometers
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	8c 01       	movw	r16, r24
	unsigned char i;
	for(i = 0; i < 4; i = i + 1){
 240:	c0 e0       	ldi	r28, 0x00	; 0
		array[i] = captureSingleKnob(i + 1);
 242:	cf 5f       	subi	r28, 0xFF	; 255
 244:	8c 2f       	mov	r24, r28
 246:	ec df       	rcall	.-40     	; 0x220 <captureSingleKnob>
 248:	f8 01       	movw	r30, r16
 24a:	81 93       	st	Z+, r24
 24c:	8f 01       	movw	r16, r30
	return scaleTo100();
}

void getPotentiometerSnapshot(unsigned char * array){	//5 potentiometers
	unsigned char i;
	for(i = 0; i < 4; i = i + 1){
 24e:	c4 30       	cpi	r28, 0x04	; 4
 250:	c1 f7       	brne	.-16     	; 0x242 <getPotentiometerSnapshot+0xa>
		array[i] = captureSingleKnob(i + 1);
	}
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <isPressed>:

unsigned char isPressed(){
	return (~PINA & 0x20);
 25a:	80 b1       	in	r24, 0x00	; 0
 25c:	80 95       	com	r24
}
 25e:	80 72       	andi	r24, 0x20	; 32
 260:	08 95       	ret

00000262 <copyValues>:

void copyValues(unsigned char * copy, unsigned char * target){
 262:	fb 01       	movw	r30, r22
 264:	dc 01       	movw	r26, r24
 266:	9b 01       	movw	r18, r22
 268:	2c 5f       	subi	r18, 0xFC	; 252
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
	for(unsigned char i = 0; i < 4; i++){
		copy[i] = target[i];
 26c:	81 91       	ld	r24, Z+
 26e:	8d 93       	st	X+, r24
unsigned char isPressed(){
	return (~PINA & 0x20);
}

void copyValues(unsigned char * copy, unsigned char * target){
	for(unsigned char i = 0; i < 4; i++){
 270:	e2 17       	cp	r30, r18
 272:	f3 07       	cpc	r31, r19
 274:	d9 f7       	brne	.-10     	; 0x26c <copyValues+0xa>
		copy[i] = target[i];
	}
}
 276:	08 95       	ret

00000278 <updateValues>:

void updateValues(unsigned char * parameters, unsigned char * oldValues, unsigned char * module, unsigned char * isUpdated){
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	a4 2f       	mov	r26, r20
 286:	b5 2f       	mov	r27, r21
 288:	e6 2e       	mov	r14, r22
 28a:	f7 2e       	mov	r15, r23
 28c:	e0 e0       	ldi	r30, 0x00	; 0
 28e:	f0 e0       	ldi	r31, 0x00	; 0
	for(unsigned char i = 0; i < 4; i++){
		if((*isUpdated & (1 << i)) == (1 << i)){
 290:	01 e0       	ldi	r16, 0x01	; 1
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	b8 01       	movw	r22, r16
 296:	0e 2e       	mov	r0, r30
 298:	02 c0       	rjmp	.+4      	; 0x29e <updateValues+0x26>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <updateValues+0x22>
 2a2:	e9 01       	movw	r28, r18
 2a4:	48 81       	ld	r20, Y
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	46 23       	and	r20, r22
 2aa:	57 23       	and	r21, r23
 2ac:	64 17       	cp	r22, r20
 2ae:	75 07       	cpc	r23, r21
 2b0:	21 f4       	brne	.+8      	; 0x2ba <updateValues+0x42>
			module[i] = parameters[i];
 2b2:	ec 01       	movw	r28, r24
 2b4:	48 81       	ld	r20, Y
 2b6:	4c 93       	st	X, r20
 2b8:	0b c0       	rjmp	.+22     	; 0x2d0 <updateValues+0x58>
		}
		else if(oldValues[i] != parameters[i]){
 2ba:	ec 01       	movw	r28, r24
 2bc:	48 81       	ld	r20, Y
 2be:	e7 01       	movw	r28, r14
 2c0:	58 81       	ld	r21, Y
 2c2:	54 17       	cp	r21, r20
 2c4:	29 f0       	breq	.+10     	; 0x2d0 <updateValues+0x58>
			module[i] = parameters[i];
 2c6:	4c 93       	st	X, r20
			*isUpdated |= (1 << i);
 2c8:	e9 01       	movw	r28, r18
 2ca:	48 81       	ld	r20, Y
 2cc:	64 2b       	or	r22, r20
 2ce:	68 83       	st	Y, r22
 2d0:	31 96       	adiw	r30, 0x01	; 1
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	11 96       	adiw	r26, 0x01	; 1
 2d6:	df ef       	ldi	r29, 0xFF	; 255
 2d8:	ed 1a       	sub	r14, r29
 2da:	fd 0a       	sbc	r15, r29
		copy[i] = target[i];
	}
}

void updateValues(unsigned char * parameters, unsigned char * oldValues, unsigned char * module, unsigned char * isUpdated){
	for(unsigned char i = 0; i < 4; i++){
 2dc:	e4 30       	cpi	r30, 0x04	; 4
 2de:	f1 05       	cpc	r31, r1
 2e0:	c9 f6       	brne	.-78     	; 0x294 <updateValues+0x1c>
		else if(oldValues[i] != parameters[i]){
			module[i] = parameters[i];
			*isUpdated |= (1 << i);
		}
	}
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	08 95       	ret

000002f0 <calcMenu>:
typedef enum Menu {INIT, RELEASE, OSC1PREP, OSC1WAIT, OSC1MAIN, FILTPREP, FILTWAIT, FILTMAIN, AMPPREP, AMPWAIT, AMPMAIN} Menu;
#define MENU_ITEMS 3


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	96 df       	rcall	.-212    	; 0x220 <captureSingleKnob>
	if(value < 33){
 2f4:	81 32       	cpi	r24, 0x21	; 33
 2f6:	20 f0       	brcs	.+8      	; 0x300 <calcMenu+0x10>
		return OSC1PREP;		//OSC_1 PREP state
	}
	else if(value < 66){
 2f8:	82 34       	cpi	r24, 0x42	; 66
 2fa:	20 f0       	brcs	.+8      	; 0x304 <calcMenu+0x14>
		return FILTPREP;		//FILT PREP state
	}
	else{
		return AMPPREP;			//AMP PREP state
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	08 95       	ret


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0);
	if(value < 33){
		return OSC1PREP;		//OSC_1 PREP state
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	08 95       	ret
	}
	else if(value < 66){
		return FILTPREP;		//FILT PREP state
 304:	85 e0       	ldi	r24, 0x05	; 5
	}
	else{
		return AMPPREP;			//AMP PREP state
	}
}
 306:	08 95       	ret

00000308 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 308:	18 16       	cp	r1, r24
 30a:	19 06       	cpc	r1, r25
 30c:	5c f0       	brlt	.+22     	; 0x324 <delay_ms+0x1c>
 30e:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 310:	00 00       	nop
 312:	21 50       	subi	r18, 0x01	; 1
 314:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 316:	e1 f7       	brne	.-8      	; 0x310 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	84 17       	cp	r24, r20
 31e:	95 07       	cpc	r25, r21
 320:	19 f4       	brne	.+6      	; 0x328 <delay_ms+0x20>
 322:	08 95       	ret
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 328:	27 e0       	ldi	r18, 0x07	; 7
 32a:	33 e0       	ldi	r19, 0x03	; 3
 32c:	f1 cf       	rjmp	.-30     	; 0x310 <delay_ms+0x8>

0000032e <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 32e:	5f 98       	cbi	0x0b, 7	; 11
   DATA_BUS = Command;
 330:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 332:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 334:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 336:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	e5 cf       	rjmp	.-54     	; 0x308 <delay_ms>
 33e:	08 95       	ret

00000340 <LCD_ClearScreen>:
#define E 6		// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	f5 cf       	rjmp	.-22     	; 0x32e <LCD_WriteCommand>
 344:	08 95       	ret

00000346 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 346:	81 31       	cpi	r24, 0x11	; 17
 348:	18 f4       	brcc	.+6      	; 0x350 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 34a:	81 58       	subi	r24, 0x81	; 129
 34c:	f0 cf       	rjmp	.-32     	; 0x32e <LCD_WriteCommand>
 34e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 350:	81 55       	subi	r24, 0x51	; 81
 352:	ed cf       	rjmp	.-38     	; 0x32e <LCD_WriteCommand>
 354:	08 95       	ret

00000356 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 356:	84 e6       	ldi	r24, 0x64	; 100
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	d6 df       	rcall	.-84     	; 0x308 <delay_ms>
	LCD_WriteCommand(0x38);
 35c:	88 e3       	ldi	r24, 0x38	; 56
 35e:	e7 df       	rcall	.-50     	; 0x32e <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	e5 df       	rcall	.-54     	; 0x32e <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	e3 df       	rcall	.-58     	; 0x32e <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	e1 df       	rcall	.-62     	; 0x32e <LCD_WriteCommand>
	delay_ms(10);						 
 36c:	8a e0       	ldi	r24, 0x0A	; 10
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	cb cf       	rjmp	.-106    	; 0x308 <delay_ms>
 372:	08 95       	ret

00000374 <LCD_WriteData>:
 374:	5f 9a       	sbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 376:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 378:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 37a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 37c:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(1);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	c2 cf       	rjmp	.-124    	; 0x308 <delay_ms>
 384:	08 95       	ret

00000386 <updateFilterParameter>:

void updateFilterParameter(unsigned char* array){
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	8c 01       	movw	r16, r24
	for(unsigned char i = 0; i < 2; i++){
		LCD_Cursor(17 + i * 4);
 38e:	81 e1       	ldi	r24, 0x11	; 17
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	d9 df       	rcall	.-78     	; 0x346 <LCD_Cursor>
		LCD_WriteData(array[i] / 10 + 48);
 394:	f8 01       	movw	r30, r16
 396:	80 81       	ld	r24, Z
 398:	cd ec       	ldi	r28, 0xCD	; 205
 39a:	8c 9f       	mul	r24, r28
 39c:	81 2d       	mov	r24, r1
 39e:	11 24       	eor	r1, r1
 3a0:	86 95       	lsr	r24
 3a2:	86 95       	lsr	r24
 3a4:	86 95       	lsr	r24
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	c0 96       	adiw	r24, 0x30	; 48
 3aa:	e4 df       	rcall	.-56     	; 0x374 <LCD_WriteData>
		LCD_Cursor(18 + i * 4);
 3ac:	82 e1       	ldi	r24, 0x12	; 18
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	ca df       	rcall	.-108    	; 0x346 <LCD_Cursor>
		LCD_WriteData(array[i] % 10 + 48);
 3b2:	f8 01       	movw	r30, r16
 3b4:	80 81       	ld	r24, Z
 3b6:	8c 9f       	mul	r24, r28
 3b8:	91 2d       	mov	r25, r1
 3ba:	11 24       	eor	r1, r1
 3bc:	96 95       	lsr	r25
 3be:	96 95       	lsr	r25
 3c0:	96 95       	lsr	r25
 3c2:	99 0f       	add	r25, r25
 3c4:	29 2f       	mov	r18, r25
 3c6:	22 0f       	add	r18, r18
 3c8:	22 0f       	add	r18, r18
 3ca:	92 0f       	add	r25, r18
 3cc:	89 1b       	sub	r24, r25
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	c0 96       	adiw	r24, 0x30	; 48
	}
}

void updateFilterParameter(unsigned char* array){
	for(unsigned char i = 0; i < 2; i++){
		LCD_Cursor(17 + i * 4);
 3d2:	d0 df       	rcall	.-96     	; 0x374 <LCD_WriteData>
 3d4:	85 e1       	ldi	r24, 0x15	; 21
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	b6 df       	rcall	.-148    	; 0x346 <LCD_Cursor>
		LCD_WriteData(array[i] / 10 + 48);
 3da:	f8 01       	movw	r30, r16
 3dc:	81 81       	ldd	r24, Z+1	; 0x01
 3de:	8c 9f       	mul	r24, r28
 3e0:	81 2d       	mov	r24, r1
 3e2:	11 24       	eor	r1, r1
 3e4:	86 95       	lsr	r24
 3e6:	86 95       	lsr	r24
 3e8:	86 95       	lsr	r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	c0 96       	adiw	r24, 0x30	; 48
		LCD_Cursor(18 + i * 4);
 3ee:	c2 df       	rcall	.-124    	; 0x374 <LCD_WriteData>
 3f0:	86 e1       	ldi	r24, 0x16	; 22
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	a8 df       	rcall	.-176    	; 0x346 <LCD_Cursor>
		LCD_WriteData(array[i] % 10 + 48);
 3f6:	f8 01       	movw	r30, r16
 3f8:	81 81       	ldd	r24, Z+1	; 0x01
 3fa:	8c 9f       	mul	r24, r28
 3fc:	c1 2d       	mov	r28, r1
 3fe:	11 24       	eor	r1, r1
 400:	c6 95       	lsr	r28
 402:	c6 95       	lsr	r28
 404:	c6 95       	lsr	r28
 406:	cc 0f       	add	r28, r28
 408:	9c 2f       	mov	r25, r28
 40a:	99 0f       	add	r25, r25
 40c:	99 0f       	add	r25, r25
 40e:	c9 0f       	add	r28, r25
 410:	8c 1b       	sub	r24, r28
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	c0 96       	adiw	r24, 0x30	; 48
		
	}
	LCD_Cursor(0);
 416:	ae df       	rcall	.-164    	; 0x374 <LCD_WriteData>
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	94 df       	rcall	.-216    	; 0x346 <LCD_Cursor>
}
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <updateAmpParameter>:

void updateAmpParameter(unsigned char * array){
 426:	df 92       	push	r13
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	7c 01       	movw	r14, r24
 436:	01 e1       	ldi	r16, 0x11	; 17
 438:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0; i < 4; i++){
		str[0] = array[i] / 10 + 48;
		str[1] = array[i] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
 43a:	0f 2e       	mov	r0, r31
 43c:	fd ec       	ldi	r31, 0xCD	; 205
 43e:	df 2e       	mov	r13, r31
 440:	f0 2d       	mov	r31, r0

void updateAmpParameter(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
		str[0] = array[i] / 10 + 48;
 442:	f7 01       	movw	r30, r14
 444:	d1 91       	ld	r29, Z+
 446:	7f 01       	movw	r14, r30
		str[1] = array[i] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
 448:	c8 01       	movw	r24, r16
 44a:	7d df       	rcall	.-262    	; 0x346 <LCD_Cursor>
		LCD_WriteData(str[0]);
 44c:	dd 9d       	mul	r29, r13
 44e:	c1 2d       	mov	r28, r1
 450:	11 24       	eor	r1, r1
 452:	c6 95       	lsr	r28
 454:	c6 95       	lsr	r28
 456:	c6 95       	lsr	r28
 458:	80 e3       	ldi	r24, 0x30	; 48
 45a:	8c 0f       	add	r24, r28
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	8a df       	rcall	.-236    	; 0x374 <LCD_WriteData>
		LCD_Cursor(18 + i * 4);	
 460:	c8 01       	movw	r24, r16
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	70 df       	rcall	.-288    	; 0x346 <LCD_Cursor>
		LCD_WriteData(str[1]);
 466:	cc 0f       	add	r28, r28
 468:	8c 2f       	mov	r24, r28
 46a:	88 0f       	add	r24, r24
 46c:	88 0f       	add	r24, r24
 46e:	c8 0f       	add	r28, r24
 470:	dc 1b       	sub	r29, r28
 472:	80 e3       	ldi	r24, 0x30	; 48
 474:	8d 0f       	add	r24, r29
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	7d df       	rcall	.-262    	; 0x374 <LCD_WriteData>
 47a:	0c 5f       	subi	r16, 0xFC	; 252
 47c:	1f 4f       	sbci	r17, 0xFF	; 255
}

void updateAmpParameter(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
 47e:	01 32       	cpi	r16, 0x21	; 33
 480:	11 05       	cpc	r17, r1
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
		LCD_Cursor(18 + i * 4);	
		LCD_WriteData(str[1]);
	}
	LCD_Cursor(0);
 482:	f9 f6       	brne	.-66     	; 0x442 <updateAmpParameter+0x1c>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	5e df       	rcall	.-324    	; 0x346 <LCD_Cursor>
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	08 95       	ret

0000049a <updateOscParameter>:

void updateOscParameter(unsigned char * array){
 49a:	ef 92       	push	r14
 49c:	ff 92       	push	r15
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <updateOscParameter+0xe>
 4a8:	1f 92       	push	r1
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	unsigned char str[3];
	
	if(array[0] < 33){
 4ae:	fc 01       	movw	r30, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	81 32       	cpi	r24, 0x21	; 33
 4b4:	38 f4       	brcc	.+14     	; 0x4c4 <updateOscParameter+0x2a>
		str[0] = 0x53;
 4b6:	83 e5       	ldi	r24, 0x53	; 83
 4b8:	89 83       	std	Y+1, r24	; 0x01
		str[1] = 0x41;
 4ba:	81 e4       	ldi	r24, 0x41	; 65
 4bc:	8a 83       	std	Y+2, r24	; 0x02
		str[2] = 0x57;
 4be:	87 e5       	ldi	r24, 0x57	; 87
 4c0:	8b 83       	std	Y+3, r24	; 0x03
 4c2:	20 c0       	rjmp	.+64     	; 0x504 <updateOscParameter+0x6a>
	}	
	else if(array[0] < 66){
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	38 f4       	brcc	.+14     	; 0x4d6 <updateOscParameter+0x3c>
		str[0] = 0x53;
 4c8:	83 e5       	ldi	r24, 0x53	; 83
 4ca:	89 83       	std	Y+1, r24	; 0x01
		str[1] = 0x51;
 4cc:	81 e5       	ldi	r24, 0x51	; 81
 4ce:	8a 83       	std	Y+2, r24	; 0x02
		str[2] = 0x52;
 4d0:	82 e5       	ldi	r24, 0x52	; 82
 4d2:	8b 83       	std	Y+3, r24	; 0x03
 4d4:	17 c0       	rjmp	.+46     	; 0x504 <updateOscParameter+0x6a>
	}
	else{
		
		str[0] = 0x54;
 4d6:	84 e5       	ldi	r24, 0x54	; 84
 4d8:	89 83       	std	Y+1, r24	; 0x01
		str[1] = 0x52;
 4da:	82 e5       	ldi	r24, 0x52	; 82
 4dc:	8a 83       	std	Y+2, r24	; 0x02
		str[2] = 0x49;
 4de:	89 e4       	ldi	r24, 0x49	; 73
 4e0:	8b 83       	std	Y+3, r24	; 0x03
 4e2:	10 c0       	rjmp	.+32     	; 0x504 <updateOscParameter+0x6a>
	}

	for(unsigned char i = 0; i < 3; i++){
		LCD_Cursor(17 + i);
 4e4:	c8 01       	movw	r24, r16
 4e6:	2f df       	rcall	.-418    	; 0x346 <LCD_Cursor>
		LCD_WriteData(str[i]);
 4e8:	f7 01       	movw	r30, r14
 4ea:	81 91       	ld	r24, Z+
 4ec:	7f 01       	movw	r14, r30
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	41 df       	rcall	.-382    	; 0x374 <LCD_WriteData>
 4f2:	0f 5f       	subi	r16, 0xFF	; 255
 4f4:	1f 4f       	sbci	r17, 0xFF	; 255
		str[0] = 0x54;
		str[1] = 0x52;
		str[2] = 0x49;
	}

	for(unsigned char i = 0; i < 3; i++){
 4f6:	04 31       	cpi	r16, 0x14	; 20
 4f8:	11 05       	cpc	r17, r1
 4fa:	a1 f7       	brne	.-24     	; 0x4e4 <updateOscParameter+0x4a>
		LCD_Cursor(17 + i);
		LCD_WriteData(str[i]);
	}	
	LCD_Cursor(0);
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	22 df       	rcall	.-444    	; 0x346 <LCD_Cursor>
	LCD_Cursor(21);			// Level Output
	LCD_WriteData(array[1] / 10 + 48);
	LCD_Cursor(22);
	LCD_WriteData(array[1] % 10 + 48);
	*/
}
 502:	06 c0       	rjmp	.+12     	; 0x510 <updateOscParameter+0x76>
 504:	ce 01       	movw	r24, r28
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	7c 01       	movw	r14, r24
		LCD_WriteData(str[1]);
	}
	LCD_Cursor(0);
}

void updateOscParameter(unsigned char * array){
 50a:	01 e1       	ldi	r16, 0x11	; 17
 50c:	10 e0       	ldi	r17, 0x00	; 0
 50e:	ea cf       	rjmp	.-44     	; 0x4e4 <updateOscParameter+0x4a>
	LCD_Cursor(21);			// Level Output
	LCD_WriteData(array[1] / 10 + 48);
	LCD_Cursor(22);
	LCD_WriteData(array[1] % 10 + 48);
	*/
}
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	ef 90       	pop	r14
 522:	08 95       	ret

00000524 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 524:	0f 93       	push	r16
 526:	1f 93       	push	r17
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	18 2f       	mov	r17, r24
 52e:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 530:	07 df       	rcall	.-498    	; 0x340 <LCD_ClearScreen>
   LCD_ClearScreen();
 532:	06 df       	rcall	.-500    	; 0x340 <LCD_ClearScreen>
 534:	88 81       	ld	r24, Y
   unsigned char c = column;
   while(*string) {
 536:	88 23       	and	r24, r24
 538:	51 f0       	breq	.+20     	; 0x54e <LCD_DisplayString+0x2a>
 53a:	01 e0       	ldi	r16, 0x01	; 1
      LCD_Cursor(c++);
 53c:	01 0f       	add	r16, r17
 53e:	81 2f       	mov	r24, r17
 540:	02 df       	rcall	.-508    	; 0x346 <LCD_Cursor>
      LCD_WriteData(*string++);
 542:	89 91       	ld	r24, Y+
 544:	17 df       	rcall	.-466    	; 0x374 <LCD_WriteData>
 546:	10 2f       	mov	r17, r16
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 548:	88 81       	ld	r24, Y

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 54a:	81 11       	cpse	r24, r1
 54c:	f6 cf       	rjmp	.-20     	; 0x53a <LCD_DisplayString+0x16>
 54e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	08 95       	ret

00000558 <menuTask>:
 558:	1f 93       	push	r17
//global variable for Menu Tick
unsigned char isUpdated = 0x00; //0000 0000
unsigned char oldValues[4];

//menuTask handles the main I/O
unsigned char menuTask(unsigned char currentState){
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	00 d0       	rcall	.+0      	; 0x560 <menuTask+0x8>
 560:	00 d0       	rcall	.+0      	; 0x562 <menuTask+0xa>
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
 566:	18 2f       	mov	r17, r24
	
	unsigned char parameters[4];
	getPotentiometerSnapshot(parameters);
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	65 de       	rcall	.-822    	; 0x238 <getPotentiometerSnapshot>
	
	switch(currentState){	//state transition calculations
 56e:	81 2f       	mov	r24, r17
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	8b 30       	cpi	r24, 0x0B	; 11
 574:	91 05       	cpc	r25, r1
 576:	08 f0       	brcs	.+2      	; 0x57a <menuTask+0x22>
 578:	ab c0       	rjmp	.+342    	; 0x6d0 <menuTask+0x178>
 57a:	fc 01       	movw	r30, r24
 57c:	ea 5b       	subi	r30, 0xBA	; 186
 57e:	ff 4f       	sbci	r31, 0xFF	; 255
 580:	1e c3       	rjmp	.+1596   	; 0xbbe <__tablejump2__>
			
			}
			break;
		
		case(AMPPREP):
			currentState = AMPWAIT;
 582:	19 e0       	ldi	r17, 0x09	; 9
 584:	fc c0       	rjmp	.+504    	; 0x77e <menuTask+0x226>
	getPotentiometerSnapshot(parameters);
	
	switch(currentState){	//state transition calculations
		
		case(INIT):
			osc[0] = 1;		//waveform = saw
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <osc>
			filt[0] = 0;	//lp filter amt = 0
 58c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <filt>
			filt[0] = 0;	//resonance = 0
			amp[0] = 0;		//attack = 0
 590:	e9 ea       	ldi	r30, 0xA9	; 169
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	10 82       	st	Z, r1
			amp[1] = 0;		//decay = 0
 596:	11 82       	std	Z+1, r1	; 0x01
			amp[2] = 99;	//sustain = 99
 598:	83 e6       	ldi	r24, 0x63	; 99
			amp[3] = 0;		//release = 0
 59a:	82 83       	std	Z+2, r24	; 0x02
		
			currentState = calcMenu();
 59c:	13 82       	std	Z+3, r1	; 0x03
 59e:	a8 de       	rcall	.-688    	; 0x2f0 <calcMenu>
			break;
 5a0:	18 2f       	mov	r17, r24
		
		case(RELEASE):						//wait for button release
			
			if(isPressed()){
 5a2:	9e c0       	rjmp	.+316    	; 0x6e0 <menuTask+0x188>
 5a4:	5a de       	rcall	.-844    	; 0x25a <isPressed>
 5a6:	81 11       	cpse	r24, r1
 5a8:	ea c0       	rjmp	.+468    	; 0x77e <menuTask+0x226>
				return currentState; //NO ACTIONS PREFORMED IF BUTTON IS STILL PRESSED, can return immediately
			}
			isUpdated = 0x00;
 5aa:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			switch(previousMenuState){
 5ae:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <previousMenuState>
 5b2:	86 30       	cpi	r24, 0x06	; 6
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <menuTask+0x60>
 5b6:	bf c0       	rjmp	.+382    	; 0x736 <menuTask+0x1de>
 5b8:	30 f4       	brcc	.+12     	; 0x5c6 <menuTask+0x6e>
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <menuTask+0x68>
 5be:	8f c0       	rjmp	.+286    	; 0x6de <menuTask+0x186>
 5c0:	84 30       	cpi	r24, 0x04	; 4
 5c2:	49 f0       	breq	.+18     	; 0x5d6 <menuTask+0x7e>
 5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <menuTask+0x90>
 5c6:	89 30       	cpi	r24, 0x09	; 9
 5c8:	09 f4       	brne	.+2      	; 0x5cc <menuTask+0x74>
 5ca:	ca c0       	rjmp	.+404    	; 0x760 <menuTask+0x208>
 5cc:	8a 30       	cpi	r24, 0x0A	; 10
 5ce:	49 f0       	breq	.+18     	; 0x5e2 <menuTask+0x8a>
 5d0:	87 30       	cpi	r24, 0x07	; 7
 5d2:	51 f4       	brne	.+20     	; 0x5e8 <menuTask+0x90>
				case(OSC1WAIT):
					currentState = OSC1MAIN;
					break;

				case(OSC1MAIN):
					currentState = calcMenu();
 5d4:	03 c0       	rjmp	.+6      	; 0x5dc <menuTask+0x84>
 5d6:	8c de       	rcall	.-744    	; 0x2f0 <calcMenu>
					break;
 5d8:	18 2f       	mov	r17, r24
				case(FILTWAIT):
					currentState = FILTMAIN;
					break;
					
				case(FILTMAIN):
					currentState = calcMenu();
 5da:	82 c0       	rjmp	.+260    	; 0x6e0 <menuTask+0x188>
 5dc:	89 de       	rcall	.-750    	; 0x2f0 <calcMenu>
 5de:	18 2f       	mov	r17, r24
					break;
 5e0:	7f c0       	rjmp	.+254    	; 0x6e0 <menuTask+0x188>
				case(AMPWAIT):
					currentState = AMPMAIN;
					break;
			
				case(AMPMAIN):
					currentState = calcMenu();
 5e2:	86 de       	rcall	.-756    	; 0x2f0 <calcMenu>
 5e4:	18 2f       	mov	r17, r24
					break;
 5e6:	7c c0       	rjmp	.+248    	; 0x6e0 <menuTask+0x188>
			
				default:
					LCD_DisplayString(1, "NO BACK STATE FOUND!");
 5e8:	64 e0       	ldi	r22, 0x04	; 4
 5ea:	71 e0       	ldi	r23, 0x01	; 1
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	9a df       	rcall	.-204    	; 0x524 <LCD_DisplayString>
			currentState = OSC1WAIT;
			break;
		
		case(OSC1WAIT)://OSC_1 WAIT
		
			if(calcMenu() != OSC1PREP){			//data knob priority over button press
 5f0:	c6 c0       	rjmp	.+396    	; 0x77e <menuTask+0x226>
 5f2:	7e de       	rcall	.-772    	; 0x2f0 <calcMenu>
 5f4:	82 30       	cpi	r24, 0x02	; 2
 5f6:	19 f0       	breq	.+6      	; 0x5fe <menuTask+0xa6>
				currentState = calcMenu();
 5f8:	7b de       	rcall	.-778    	; 0x2f0 <calcMenu>
 5fa:	18 2f       	mov	r17, r24
 5fc:	71 c0       	rjmp	.+226    	; 0x6e0 <menuTask+0x188>
 5fe:	2d de       	rcall	.-934    	; 0x25a <isPressed>
			}
			
			else if(isPressed()){
 600:	88 23       	and	r24, r24
 602:	09 f4       	brne	.+2      	; 0x606 <menuTask+0xae>
 604:	bc c0       	rjmp	.+376    	; 0x77e <menuTask+0x226>
 606:	83 e0       	ldi	r24, 0x03	; 3
				previousMenuState = OSC1WAIT;
 608:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
				LCD_DisplayString(1, "WAV"); //LVL ");//OCT DET");
 60c:	69 e1       	ldi	r22, 0x19	; 25
 60e:	71 e0       	ldi	r23, 0x01	; 1
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	88 df       	rcall	.-240    	; 0x524 <LCD_DisplayString>
				copyValues(oldValues, parameters);
 614:	be 01       	movw	r22, r28
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8c eb       	ldi	r24, 0xBC	; 188
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	21 de       	rcall	.-958    	; 0x262 <copyValues>
 620:	8d ea       	ldi	r24, 0xAD	; 173
				updateOscParameter(osc);
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	3a df       	rcall	.-396    	; 0x49a <updateOscParameter>
 626:	11 e0       	ldi	r17, 0x01	; 1
				currentState = calcMenu();
			}
			
			else if(isPressed()){
				previousMenuState = OSC1WAIT;
				currentState = RELEASE;	//OSC_1 Release
 628:	aa c0       	rjmp	.+340    	; 0x77e <menuTask+0x226>
			
			}
			break;
		
		case(OSC1MAIN):
			if(isPressed()){
 62a:	17 de       	rcall	.-978    	; 0x25a <isPressed>
 62c:	88 23       	and	r24, r24
 62e:	09 f4       	brne	.+2      	; 0x632 <menuTask+0xda>
 630:	6d c0       	rjmp	.+218    	; 0x70c <menuTask+0x1b4>
				previousMenuState = OSC1MAIN;
 632:	84 e0       	ldi	r24, 0x04	; 4
 634:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <previousMenuState>
				currentState = RELEASE; //WAIT FOR RELEASE
 638:	11 e0       	ldi	r17, 0x01	; 1
 63a:	a1 c0       	rjmp	.+322    	; 0x77e <menuTask+0x226>
		case(FILTPREP):
			currentState = FILTWAIT;
			break;
		
		case(FILTWAIT):
			if(calcMenu() != FILTPREP){			//data knob priority over button press
 63c:	59 de       	rcall	.-846    	; 0x2f0 <calcMenu>
 63e:	85 30       	cpi	r24, 0x05	; 5
 640:	19 f0       	breq	.+6      	; 0x648 <menuTask+0xf0>
				currentState = calcMenu();
 642:	56 de       	rcall	.-852    	; 0x2f0 <calcMenu>
 644:	18 2f       	mov	r17, r24
 646:	4c c0       	rjmp	.+152    	; 0x6e0 <menuTask+0x188>
			}
			else if(isPressed()){
 648:	08 de       	rcall	.-1008   	; 0x25a <isPressed>
 64a:	88 23       	and	r24, r24
 64c:	09 f4       	brne	.+2      	; 0x650 <menuTask+0xf8>
 64e:	97 c0       	rjmp	.+302    	; 0x77e <menuTask+0x226>
				previousMenuState = FILTWAIT;
 650:	86 e0       	ldi	r24, 0x06	; 6
 652:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
				LCD_DisplayString(1, "AMT RES"); //MOD TYPE");
 656:	6d e1       	ldi	r22, 0x1D	; 29
 658:	71 e0       	ldi	r23, 0x01	; 1
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	63 df       	rcall	.-314    	; 0x524 <LCD_DisplayString>
				copyValues(oldValues, parameters);
 65e:	be 01       	movw	r22, r28
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8c eb       	ldi	r24, 0xBC	; 188
 666:	91 e0       	ldi	r25, 0x01	; 1
				updateFilterParameter(filt);
 668:	fc dd       	rcall	.-1032   	; 0x262 <copyValues>
 66a:	85 ea       	ldi	r24, 0xA5	; 165
 66c:	91 e0       	ldi	r25, 0x01	; 1
			if(calcMenu() != FILTPREP){			//data knob priority over button press
				currentState = calcMenu();
			}
			else if(isPressed()){
				previousMenuState = FILTWAIT;
				currentState = RELEASE;	//OSC_1 Release
 66e:	8b de       	rcall	.-746    	; 0x386 <updateFilterParameter>
 670:	11 e0       	ldi	r17, 0x01	; 1
				updateFilterParameter(filt);
			}
			break;
		
		case(FILTMAIN):
			if(isPressed()){
 672:	85 c0       	rjmp	.+266    	; 0x77e <menuTask+0x226>
 674:	f2 dd       	rcall	.-1052   	; 0x25a <isPressed>
 676:	88 23       	and	r24, r24
 678:	09 f4       	brne	.+2      	; 0x67c <menuTask+0x124>
				previousMenuState = FILTMAIN;
 67a:	5d c0       	rjmp	.+186    	; 0x736 <menuTask+0x1de>
 67c:	87 e0       	ldi	r24, 0x07	; 7
 67e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <previousMenuState>
				currentState = RELEASE; //WAIT FOR RELEASE
 682:	11 e0       	ldi	r17, 0x01	; 1
		case(AMPPREP):
			currentState = AMPWAIT;
			break;
		
		case(AMPWAIT):
			if(calcMenu() != AMPPREP){			//data knob priority over button press
 684:	7c c0       	rjmp	.+248    	; 0x77e <menuTask+0x226>
 686:	34 de       	rcall	.-920    	; 0x2f0 <calcMenu>
 688:	88 30       	cpi	r24, 0x08	; 8
				currentState = calcMenu();
 68a:	19 f0       	breq	.+6      	; 0x692 <menuTask+0x13a>
 68c:	31 de       	rcall	.-926    	; 0x2f0 <calcMenu>
 68e:	18 2f       	mov	r17, r24
			}
			else if(isPressed()){
 690:	27 c0       	rjmp	.+78     	; 0x6e0 <menuTask+0x188>
 692:	e3 dd       	rcall	.-1082   	; 0x25a <isPressed>
 694:	88 23       	and	r24, r24
 696:	09 f4       	brne	.+2      	; 0x69a <menuTask+0x142>
 698:	72 c0       	rjmp	.+228    	; 0x77e <menuTask+0x226>
				previousMenuState = AMPWAIT;
 69a:	89 e0       	ldi	r24, 0x09	; 9
 69c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
				LCD_DisplayString(1, "A   D   S   R");
 6a0:	65 e2       	ldi	r22, 0x25	; 37
 6a2:	71 e0       	ldi	r23, 0x01	; 1
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	3e df       	rcall	.-388    	; 0x524 <LCD_DisplayString>
				copyValues(oldValues, parameters);
 6a8:	be 01       	movw	r22, r28
 6aa:	6f 5f       	subi	r22, 0xFF	; 255
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8c eb       	ldi	r24, 0xBC	; 188
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	d7 dd       	rcall	.-1106   	; 0x262 <copyValues>
 6b4:	89 ea       	ldi	r24, 0xA9	; 169
				updateAmpParameter(amp);
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	b6 de       	rcall	.-660    	; 0x426 <updateAmpParameter>
 6ba:	11 e0       	ldi	r17, 0x01	; 1
 6bc:	60 c0       	rjmp	.+192    	; 0x77e <menuTask+0x226>
			if(calcMenu() != AMPPREP){			//data knob priority over button press
				currentState = calcMenu();
			}
			else if(isPressed()){
				previousMenuState = AMPWAIT;
				currentState = RELEASE;	//OSC_1 Release
 6be:	cd dd       	rcall	.-1126   	; 0x25a <isPressed>
 6c0:	88 23       	and	r24, r24
				updateAmpParameter(amp);
			}
			break;
		
		case(AMPMAIN):
			if(isPressed()){
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <menuTask+0x16e>
 6c4:	4d c0       	rjmp	.+154    	; 0x760 <menuTask+0x208>
 6c6:	8a e0       	ldi	r24, 0x0A	; 10
 6c8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <previousMenuState>
				previousMenuState = AMPMAIN;
 6cc:	11 e0       	ldi	r17, 0x01	; 1
 6ce:	57 c0       	rjmp	.+174    	; 0x77e <menuTask+0x226>
				currentState = RELEASE; //WAIT FOR RELEASE
 6d0:	63 e3       	ldi	r22, 0x33	; 51
			}
			break;
		
		default:
			LCD_DisplayString(1, "ERROR no defined state transition");
 6d2:	71 e0       	ldi	r23, 0x01	; 1
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	26 df       	rcall	.-436    	; 0x524 <LCD_DisplayString>
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <menuTask+0x188>
 6da:	13 e0       	ldi	r17, 0x03	; 3
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <menuTask+0x188>
					LCD_DisplayString(1, "NO BACK STATE FOUND!");
			}
			break;

		case(OSC1PREP)://OSC_1 PREP
			currentState = OSC1WAIT;
 6de:	14 e0       	ldi	r17, 0x04	; 4
 6e0:	15 30       	cpi	r17, 0x05	; 5
				return currentState; //NO ACTIONS PREFORMED IF BUTTON IS STILL PRESSED, can return immediately
			}
			isUpdated = 0x00;
			switch(previousMenuState){
				case(OSC1WAIT):
					currentState = OSC1MAIN;
 6e2:	11 f1       	breq	.+68     	; 0x728 <menuTask+0x1d0>
		
		default:
			LCD_DisplayString(1, "ERROR no defined state transition");
	}
	
	switch(currentState){	//state actions
 6e4:	28 f4       	brcc	.+10     	; 0x6f0 <menuTask+0x198>
 6e6:	12 30       	cpi	r17, 0x02	; 2
 6e8:	51 f0       	breq	.+20     	; 0x6fe <menuTask+0x1a6>
 6ea:	14 30       	cpi	r17, 0x04	; 4
 6ec:	79 f0       	breq	.+30     	; 0x70c <menuTask+0x1b4>
 6ee:	47 c0       	rjmp	.+142    	; 0x77e <menuTask+0x226>
 6f0:	18 30       	cpi	r17, 0x08	; 8
 6f2:	79 f1       	breq	.+94     	; 0x752 <menuTask+0x1fa>
 6f4:	1a 30       	cpi	r17, 0x0A	; 10
 6f6:	a1 f1       	breq	.+104    	; 0x760 <menuTask+0x208>
 6f8:	17 30       	cpi	r17, 0x07	; 7
		case(OSC1PREP):
			LCD_DisplayString(1, "  OSCILLATOR 1");
 6fa:	e9 f0       	breq	.+58     	; 0x736 <menuTask+0x1de>
 6fc:	40 c0       	rjmp	.+128    	; 0x77e <menuTask+0x226>
 6fe:	65 e5       	ldi	r22, 0x55	; 85
 700:	71 e0       	ldi	r23, 0x01	; 1
 702:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Cursor(0);
 704:	0f df       	rcall	.-482    	; 0x524 <LCD_DisplayString>
 706:	80 e0       	ldi	r24, 0x00	; 0
			break;
 708:	1e de       	rcall	.-964    	; 0x346 <LCD_Cursor>
		
		case(OSC1MAIN):
			updateValues(parameters, oldValues, osc, &isUpdated);
 70a:	39 c0       	rjmp	.+114    	; 0x77e <menuTask+0x226>
 70c:	2e e7       	ldi	r18, 0x7E	; 126
 70e:	31 e0       	ldi	r19, 0x01	; 1
 710:	4d ea       	ldi	r20, 0xAD	; 173
 712:	51 e0       	ldi	r21, 0x01	; 1
 714:	6c eb       	ldi	r22, 0xBC	; 188
 716:	71 e0       	ldi	r23, 0x01	; 1
 718:	ce 01       	movw	r24, r28
			updateOscParameter(osc);
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	ad dd       	rcall	.-1190   	; 0x278 <updateValues>
 71e:	8d ea       	ldi	r24, 0xAD	; 173
 720:	91 e0       	ldi	r25, 0x01	; 1
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
	}
	return currentState;
 722:	bb de       	rcall	.-650    	; 0x49a <updateOscParameter>
			break;
		
		case(OSC1MAIN):
			updateValues(parameters, oldValues, osc, &isUpdated);
			updateOscParameter(osc);
			break;
 724:	14 e0       	ldi	r17, 0x04	; 4
		
		case(FILTPREP):
			LCD_DisplayString(1, "     FILTER");
 726:	2b c0       	rjmp	.+86     	; 0x77e <menuTask+0x226>
 728:	64 e6       	ldi	r22, 0x64	; 100
 72a:	71 e0       	ldi	r23, 0x01	; 1
 72c:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Cursor(0);
 72e:	fa de       	rcall	.-524    	; 0x524 <LCD_DisplayString>
 730:	80 e0       	ldi	r24, 0x00	; 0
			break;
 732:	09 de       	rcall	.-1006   	; 0x346 <LCD_Cursor>
		
		case(FILTMAIN):
			updateValues(parameters, oldValues, filt, &isUpdated);
 734:	24 c0       	rjmp	.+72     	; 0x77e <menuTask+0x226>
 736:	2e e7       	ldi	r18, 0x7E	; 126
 738:	31 e0       	ldi	r19, 0x01	; 1
 73a:	45 ea       	ldi	r20, 0xA5	; 165
 73c:	51 e0       	ldi	r21, 0x01	; 1
 73e:	6c eb       	ldi	r22, 0xBC	; 188
 740:	71 e0       	ldi	r23, 0x01	; 1
 742:	ce 01       	movw	r24, r28
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	98 dd       	rcall	.-1232   	; 0x278 <updateValues>
			updateFilterParameter(filt);
 748:	85 ea       	ldi	r24, 0xA5	; 165
 74a:	91 e0       	ldi	r25, 0x01	; 1
 74c:	1c de       	rcall	.-968    	; 0x386 <updateFilterParameter>
 74e:	17 e0       	ldi	r17, 0x07	; 7
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
	}
	return currentState;
 750:	16 c0       	rjmp	.+44     	; 0x77e <menuTask+0x226>
			break;
		
		case(FILTMAIN):
			updateValues(parameters, oldValues, filt, &isUpdated);
			updateFilterParameter(filt);
			break;
 752:	60 e7       	ldi	r22, 0x70	; 112
		
		case(AMPPREP):
			LCD_DisplayString(1, "   AMPLIFIER");
 754:	71 e0       	ldi	r23, 0x01	; 1
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	e5 de       	rcall	.-566    	; 0x524 <LCD_DisplayString>
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	f4 dd       	rcall	.-1048   	; 0x346 <LCD_Cursor>
			LCD_Cursor(0);
 75e:	0f c0       	rjmp	.+30     	; 0x77e <menuTask+0x226>
 760:	2e e7       	ldi	r18, 0x7E	; 126
 762:	31 e0       	ldi	r19, 0x01	; 1
			break;
 764:	49 ea       	ldi	r20, 0xA9	; 169
		
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
 766:	51 e0       	ldi	r21, 0x01	; 1
 768:	6c eb       	ldi	r22, 0xBC	; 188
 76a:	71 e0       	ldi	r23, 0x01	; 1
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	83 dd       	rcall	.-1274   	; 0x278 <updateValues>
 772:	89 ea       	ldi	r24, 0xA9	; 169
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	57 de       	rcall	.-850    	; 0x426 <updateAmpParameter>
 778:	1a e0       	ldi	r17, 0x0A	; 10
			updateAmpParameter(amp);
 77a:	01 c0       	rjmp	.+2      	; 0x77e <menuTask+0x226>
 77c:	16 e0       	ldi	r17, 0x06	; 6
 77e:	81 2f       	mov	r24, r17
 780:	0f 90       	pop	r0
			break;
	}
	return currentState;
 782:	0f 90       	pop	r0
			break;
		
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
 784:	0f 90       	pop	r0
				currentState = RELEASE; //WAIT FOR RELEASE
			}
			break;
		
		case(FILTPREP):
			currentState = FILTWAIT;
 786:	0f 90       	pop	r0
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
	}
	return currentState;
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	08 95       	ret

00000790 <initExtern>:
 790:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TimerFlag>
 794:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_avr_timer_cntcurr>
 798:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_avr_timer_cntcurr+0x1>
	}
}

void initExtern(){
	TimerFlag = 0;
	_avr_timer_cntcurr = 0;
 79c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_avr_timer_cntcurr+0x2>
 7a0:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <_avr_timer_cntcurr+0x3>
	_avr_timer_M = 0;
 7a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 7a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 7ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
 7b0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
 7b4:	08 95       	ret

000007b6 <main>:
unsigned char menuTask(unsigned char);	//states defined in menu.h
unsigned char usartTask(unsigned char);

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;	//potentiometer inputs
 7b6:	11 b8       	out	0x01, r1	; 1
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;	
 7bc:	84 b9       	out	0x04, r24	; 4
 7be:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;	//LCD data out
 7c0:	87 b9       	out	0x07, r24	; 7
 7c2:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;	//bits 6 and 4 input Rx in || everything else is output. Tx and LCD control
 7c4:	8a b9       	out	0x0a, r24	; 10
 7c6:	1b b8       	out	0x0b, r1	; 11
	
	initExtern();
 7c8:	e3 df       	rcall	.-58     	; 0x790 <initExtern>
	/////////////////////////////////////////////////////////////////////////
	
	unsigned char i = 0x00;
	unsigned char taskCount = 1;
	
	tasks[0] = menu;
 7ca:	8b e0       	ldi	r24, 0x0B	; 11
 7cc:	e4 e8       	ldi	r30, 0x84	; 132
 7ce:	f1 e0       	ldi	r31, 0x01	; 1
 7d0:	af e8       	ldi	r26, 0x8F	; 143
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	01 90       	ld	r0, Z+
 7d6:	0d 92       	st	X+, r0
 7d8:	8a 95       	dec	r24
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <main+0x1e>
	tasks[0].period = menuPeriod;
 7dc:	cf e8       	ldi	r28, 0x8F	; 143
 7de:	d1 e0       	ldi	r29, 0x01	; 1
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	48 83       	st	Y, r20
 7ea:	59 83       	std	Y+1, r21	; 0x01
 7ec:	6a 83       	std	Y+2, r22	; 0x02
 7ee:	7b 83       	std	Y+3, r23	; 0x03
	tasks[0].state = 0;
 7f0:	18 86       	std	Y+8, r1	; 0x08
	tasks[0].elapsedTime = 0;
 7f2:	1c 82       	std	Y+4, r1	; 0x04
 7f4:	1d 82       	std	Y+5, r1	; 0x05
 7f6:	1e 82       	std	Y+6, r1	; 0x06
 7f8:	1f 82       	std	Y+7, r1	; 0x07
	tasks[0].TickFunction = &menuTask;
 7fa:	8c ea       	ldi	r24, 0xAC	; 172
 7fc:	92 e0       	ldi	r25, 0x02	; 2
 7fe:	9a 87       	std	Y+10, r25	; 0x0a
 800:	89 87       	std	Y+9, r24	; 0x09
	
	tasks[1] = usart;
 802:	8b e0       	ldi	r24, 0x0B	; 11
 804:	e1 eb       	ldi	r30, 0xB1	; 177
 806:	f1 e0       	ldi	r31, 0x01	; 1
 808:	aa e9       	ldi	r26, 0x9A	; 154
 80a:	b1 e0       	ldi	r27, 0x01	; 1
 80c:	01 90       	ld	r0, Z+
 80e:	0d 92       	st	X+, r0
 810:	8a 95       	dec	r24
 812:	e1 f7       	brne	.-8      	; 0x80c <main+0x56>
	tasks[1].period = usartPeriod;
 814:	4b 87       	std	Y+11, r20	; 0x0b
 816:	5c 87       	std	Y+12, r21	; 0x0c
 818:	6d 87       	std	Y+13, r22	; 0x0d
 81a:	7e 87       	std	Y+14, r23	; 0x0e
	tasks[1].state = 0;
 81c:	1b 8a       	std	Y+19, r1	; 0x13
	tasks[1].elapsedTime = 0;
 81e:	1f 86       	std	Y+15, r1	; 0x0f
 820:	18 8a       	std	Y+16, r1	; 0x10
 822:	19 8a       	std	Y+17, r1	; 0x11
 824:	1a 8a       	std	Y+18, r1	; 0x12
	tasks[1].TickFunction = &usartTask;
 826:	85 e8       	ldi	r24, 0x85	; 133
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	9d 8b       	std	Y+21, r25	; 0x15
 82c:	8c 8b       	std	Y+20, r24	; 0x14

#include <util/delay.h>
#define F_CPU 16000000UL

void ADC_init() {
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE);	//0x06 MIGHT FIX PROBLEM
 82e:	80 ee       	ldi	r24, 0xE0	; 224
 830:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	ADC_init();		//init ADC
	LCD_init();		//init LCD
	initUSART();	//init USART communications
 834:	90 dd       	rcall	.-1248   	; 0x356 <LCD_init>
 836:	53 dc       	rcall	.-1882   	; 0xde <initUSART>
	TimerSet(GCD);	//set timer interrupt cycle period
 838:	62 e3       	ldi	r22, 0x32	; 50
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();		//enable timer
 840:	ca dc       	rcall	.-1644   	; 0x1d6 <TimerSet>
 842:	6b dc       	rcall	.-1834   	; 0x11a <TimerOn>
 844:	0f 2e       	mov	r0, r31
 846:	f5 ea       	ldi	r31, 0xA5	; 165
 848:	ef 2e       	mov	r14, r31
 84a:	f1 e0       	ldi	r31, 0x01	; 1
 84c:	ff 2e       	mov	r15, r31
 84e:	f0 2d       	mov	r31, r0
 850:	cf e8       	ldi	r28, 0x8F	; 143
 852:	d1 e0       	ldi	r29, 0x01	; 1
 854:	8e 01       	movw	r16, r28
	
	while (1)
	{
		for(i = 0; i < NUM_OF_TASKS; i++){
			if(tasks[i].elapsedTime >= tasks[i].period){
 856:	4c 81       	ldd	r20, Y+4	; 0x04
 858:	5d 81       	ldd	r21, Y+5	; 0x05
 85a:	6e 81       	ldd	r22, Y+6	; 0x06
 85c:	7f 81       	ldd	r23, Y+7	; 0x07
 85e:	88 81       	ld	r24, Y
 860:	99 81       	ldd	r25, Y+1	; 0x01
 862:	aa 81       	ldd	r26, Y+2	; 0x02
 864:	bb 81       	ldd	r27, Y+3	; 0x03
 866:	48 17       	cp	r20, r24
 868:	59 07       	cpc	r21, r25
 86a:	6a 07       	cpc	r22, r26
 86c:	7b 07       	cpc	r23, r27
 86e:	48 f0       	brcs	.+18     	; 0x882 <main+0xcc>
				tasks[i].state = tasks[i].TickFunction(tasks[i].state);
 870:	e9 85       	ldd	r30, Y+9	; 0x09
 872:	fa 85       	ldd	r31, Y+10	; 0x0a
 874:	88 85       	ldd	r24, Y+8	; 0x08
 876:	09 95       	icall
 878:	88 87       	std	Y+8, r24	; 0x08
				tasks[i].elapsedTime = 0;
 87a:	1c 82       	std	Y+4, r1	; 0x04
 87c:	1d 82       	std	Y+5, r1	; 0x05
 87e:	1e 82       	std	Y+6, r1	; 0x06
 880:	1f 82       	std	Y+7, r1	; 0x07
			}
			tasks[i].elapsedTime += 1;
 882:	f8 01       	movw	r30, r16
 884:	84 81       	ldd	r24, Z+4	; 0x04
 886:	95 81       	ldd	r25, Z+5	; 0x05
 888:	a6 81       	ldd	r26, Z+6	; 0x06
 88a:	b7 81       	ldd	r27, Z+7	; 0x07
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	a1 1d       	adc	r26, r1
 890:	b1 1d       	adc	r27, r1
 892:	84 83       	std	Z+4, r24	; 0x04
 894:	95 83       	std	Z+5, r25	; 0x05
 896:	a6 83       	std	Z+6, r26	; 0x06
 898:	b7 83       	std	Z+7, r27	; 0x07
 89a:	2b 96       	adiw	r28, 0x0b	; 11
	TimerSet(GCD);	//set timer interrupt cycle period
	TimerOn();		//enable timer
	
	while (1)
	{
		for(i = 0; i < NUM_OF_TASKS; i++){
 89c:	ce 15       	cp	r28, r14
 89e:	df 05       	cpc	r29, r15
 8a0:	c9 f6       	brne	.-78     	; 0x854 <main+0x9e>
				tasks[i].state = tasks[i].TickFunction(tasks[i].state);
				tasks[i].elapsedTime = 0;
			}
			tasks[i].elapsedTime += 1;
		}
		TimerFlag = 0;
 8a2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TimerFlag>
		while(!TimerFlag);
 8a6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <TimerFlag>
 8aa:	88 23       	and	r24, r24
 8ac:	e1 f3       	breq	.-8      	; 0x8a6 <main+0xf0>
 8ae:	d0 cf       	rjmp	.-96     	; 0x850 <main+0x9a>

000008b0 <__subsf3>:
 8b0:	50 58       	subi	r21, 0x80	; 128

000008b2 <__addsf3>:
 8b2:	bb 27       	eor	r27, r27
 8b4:	aa 27       	eor	r26, r26
 8b6:	0e d0       	rcall	.+28     	; 0x8d4 <__addsf3x>
 8b8:	48 c1       	rjmp	.+656    	; 0xb4a <__fp_round>
 8ba:	39 d1       	rcall	.+626    	; 0xb2e <__fp_pscA>
 8bc:	30 f0       	brcs	.+12     	; 0x8ca <__addsf3+0x18>
 8be:	3e d1       	rcall	.+636    	; 0xb3c <__fp_pscB>
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <__addsf3+0x18>
 8c2:	31 f4       	brne	.+12     	; 0x8d0 <__addsf3+0x1e>
 8c4:	9f 3f       	cpi	r25, 0xFF	; 255
 8c6:	11 f4       	brne	.+4      	; 0x8cc <__addsf3+0x1a>
 8c8:	1e f4       	brtc	.+6      	; 0x8d0 <__addsf3+0x1e>
 8ca:	2e c1       	rjmp	.+604    	; 0xb28 <__fp_nan>
 8cc:	0e f4       	brtc	.+2      	; 0x8d0 <__addsf3+0x1e>
 8ce:	e0 95       	com	r30
 8d0:	e7 fb       	bst	r30, 7
 8d2:	24 c1       	rjmp	.+584    	; 0xb1c <__fp_inf>

000008d4 <__addsf3x>:
 8d4:	e9 2f       	mov	r30, r25
 8d6:	4a d1       	rcall	.+660    	; 0xb6c <__fp_split3>
 8d8:	80 f3       	brcs	.-32     	; 0x8ba <__addsf3+0x8>
 8da:	ba 17       	cp	r27, r26
 8dc:	62 07       	cpc	r22, r18
 8de:	73 07       	cpc	r23, r19
 8e0:	84 07       	cpc	r24, r20
 8e2:	95 07       	cpc	r25, r21
 8e4:	18 f0       	brcs	.+6      	; 0x8ec <__addsf3x+0x18>
 8e6:	71 f4       	brne	.+28     	; 0x904 <__addsf3x+0x30>
 8e8:	9e f5       	brtc	.+102    	; 0x950 <__addsf3x+0x7c>
 8ea:	62 c1       	rjmp	.+708    	; 0xbb0 <__fp_zero>
 8ec:	0e f4       	brtc	.+2      	; 0x8f0 <__addsf3x+0x1c>
 8ee:	e0 95       	com	r30
 8f0:	0b 2e       	mov	r0, r27
 8f2:	ba 2f       	mov	r27, r26
 8f4:	a0 2d       	mov	r26, r0
 8f6:	0b 01       	movw	r0, r22
 8f8:	b9 01       	movw	r22, r18
 8fa:	90 01       	movw	r18, r0
 8fc:	0c 01       	movw	r0, r24
 8fe:	ca 01       	movw	r24, r20
 900:	a0 01       	movw	r20, r0
 902:	11 24       	eor	r1, r1
 904:	ff 27       	eor	r31, r31
 906:	59 1b       	sub	r21, r25
 908:	99 f0       	breq	.+38     	; 0x930 <__addsf3x+0x5c>
 90a:	59 3f       	cpi	r21, 0xF9	; 249
 90c:	50 f4       	brcc	.+20     	; 0x922 <__addsf3x+0x4e>
 90e:	50 3e       	cpi	r21, 0xE0	; 224
 910:	68 f1       	brcs	.+90     	; 0x96c <__addsf3x+0x98>
 912:	1a 16       	cp	r1, r26
 914:	f0 40       	sbci	r31, 0x00	; 0
 916:	a2 2f       	mov	r26, r18
 918:	23 2f       	mov	r18, r19
 91a:	34 2f       	mov	r19, r20
 91c:	44 27       	eor	r20, r20
 91e:	58 5f       	subi	r21, 0xF8	; 248
 920:	f3 cf       	rjmp	.-26     	; 0x908 <__addsf3x+0x34>
 922:	46 95       	lsr	r20
 924:	37 95       	ror	r19
 926:	27 95       	ror	r18
 928:	a7 95       	ror	r26
 92a:	f0 40       	sbci	r31, 0x00	; 0
 92c:	53 95       	inc	r21
 92e:	c9 f7       	brne	.-14     	; 0x922 <__addsf3x+0x4e>
 930:	7e f4       	brtc	.+30     	; 0x950 <__addsf3x+0x7c>
 932:	1f 16       	cp	r1, r31
 934:	ba 0b       	sbc	r27, r26
 936:	62 0b       	sbc	r22, r18
 938:	73 0b       	sbc	r23, r19
 93a:	84 0b       	sbc	r24, r20
 93c:	ba f0       	brmi	.+46     	; 0x96c <__addsf3x+0x98>
 93e:	91 50       	subi	r25, 0x01	; 1
 940:	a1 f0       	breq	.+40     	; 0x96a <__addsf3x+0x96>
 942:	ff 0f       	add	r31, r31
 944:	bb 1f       	adc	r27, r27
 946:	66 1f       	adc	r22, r22
 948:	77 1f       	adc	r23, r23
 94a:	88 1f       	adc	r24, r24
 94c:	c2 f7       	brpl	.-16     	; 0x93e <__addsf3x+0x6a>
 94e:	0e c0       	rjmp	.+28     	; 0x96c <__addsf3x+0x98>
 950:	ba 0f       	add	r27, r26
 952:	62 1f       	adc	r22, r18
 954:	73 1f       	adc	r23, r19
 956:	84 1f       	adc	r24, r20
 958:	48 f4       	brcc	.+18     	; 0x96c <__addsf3x+0x98>
 95a:	87 95       	ror	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	b7 95       	ror	r27
 962:	f7 95       	ror	r31
 964:	9e 3f       	cpi	r25, 0xFE	; 254
 966:	08 f0       	brcs	.+2      	; 0x96a <__addsf3x+0x96>
 968:	b3 cf       	rjmp	.-154    	; 0x8d0 <__addsf3+0x1e>
 96a:	93 95       	inc	r25
 96c:	88 0f       	add	r24, r24
 96e:	08 f0       	brcs	.+2      	; 0x972 <__addsf3x+0x9e>
 970:	99 27       	eor	r25, r25
 972:	ee 0f       	add	r30, r30
 974:	97 95       	ror	r25
 976:	87 95       	ror	r24
 978:	08 95       	ret

0000097a <__divsf3>:
 97a:	0c d0       	rcall	.+24     	; 0x994 <__divsf3x>
 97c:	e6 c0       	rjmp	.+460    	; 0xb4a <__fp_round>
 97e:	de d0       	rcall	.+444    	; 0xb3c <__fp_pscB>
 980:	40 f0       	brcs	.+16     	; 0x992 <__divsf3+0x18>
 982:	d5 d0       	rcall	.+426    	; 0xb2e <__fp_pscA>
 984:	30 f0       	brcs	.+12     	; 0x992 <__divsf3+0x18>
 986:	21 f4       	brne	.+8      	; 0x990 <__divsf3+0x16>
 988:	5f 3f       	cpi	r21, 0xFF	; 255
 98a:	19 f0       	breq	.+6      	; 0x992 <__divsf3+0x18>
 98c:	c7 c0       	rjmp	.+398    	; 0xb1c <__fp_inf>
 98e:	51 11       	cpse	r21, r1
 990:	10 c1       	rjmp	.+544    	; 0xbb2 <__fp_szero>
 992:	ca c0       	rjmp	.+404    	; 0xb28 <__fp_nan>

00000994 <__divsf3x>:
 994:	eb d0       	rcall	.+470    	; 0xb6c <__fp_split3>
 996:	98 f3       	brcs	.-26     	; 0x97e <__divsf3+0x4>

00000998 <__divsf3_pse>:
 998:	99 23       	and	r25, r25
 99a:	c9 f3       	breq	.-14     	; 0x98e <__divsf3+0x14>
 99c:	55 23       	and	r21, r21
 99e:	b1 f3       	breq	.-20     	; 0x98c <__divsf3+0x12>
 9a0:	95 1b       	sub	r25, r21
 9a2:	55 0b       	sbc	r21, r21
 9a4:	bb 27       	eor	r27, r27
 9a6:	aa 27       	eor	r26, r26
 9a8:	62 17       	cp	r22, r18
 9aa:	73 07       	cpc	r23, r19
 9ac:	84 07       	cpc	r24, r20
 9ae:	38 f0       	brcs	.+14     	; 0x9be <__divsf3_pse+0x26>
 9b0:	9f 5f       	subi	r25, 0xFF	; 255
 9b2:	5f 4f       	sbci	r21, 0xFF	; 255
 9b4:	22 0f       	add	r18, r18
 9b6:	33 1f       	adc	r19, r19
 9b8:	44 1f       	adc	r20, r20
 9ba:	aa 1f       	adc	r26, r26
 9bc:	a9 f3       	breq	.-22     	; 0x9a8 <__divsf3_pse+0x10>
 9be:	33 d0       	rcall	.+102    	; 0xa26 <__divsf3_pse+0x8e>
 9c0:	0e 2e       	mov	r0, r30
 9c2:	3a f0       	brmi	.+14     	; 0x9d2 <__divsf3_pse+0x3a>
 9c4:	e0 e8       	ldi	r30, 0x80	; 128
 9c6:	30 d0       	rcall	.+96     	; 0xa28 <__divsf3_pse+0x90>
 9c8:	91 50       	subi	r25, 0x01	; 1
 9ca:	50 40       	sbci	r21, 0x00	; 0
 9cc:	e6 95       	lsr	r30
 9ce:	00 1c       	adc	r0, r0
 9d0:	ca f7       	brpl	.-14     	; 0x9c4 <__divsf3_pse+0x2c>
 9d2:	29 d0       	rcall	.+82     	; 0xa26 <__divsf3_pse+0x8e>
 9d4:	fe 2f       	mov	r31, r30
 9d6:	27 d0       	rcall	.+78     	; 0xa26 <__divsf3_pse+0x8e>
 9d8:	66 0f       	add	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	bb 1f       	adc	r27, r27
 9e0:	26 17       	cp	r18, r22
 9e2:	37 07       	cpc	r19, r23
 9e4:	48 07       	cpc	r20, r24
 9e6:	ab 07       	cpc	r26, r27
 9e8:	b0 e8       	ldi	r27, 0x80	; 128
 9ea:	09 f0       	breq	.+2      	; 0x9ee <__divsf3_pse+0x56>
 9ec:	bb 0b       	sbc	r27, r27
 9ee:	80 2d       	mov	r24, r0
 9f0:	bf 01       	movw	r22, r30
 9f2:	ff 27       	eor	r31, r31
 9f4:	93 58       	subi	r25, 0x83	; 131
 9f6:	5f 4f       	sbci	r21, 0xFF	; 255
 9f8:	2a f0       	brmi	.+10     	; 0xa04 <__divsf3_pse+0x6c>
 9fa:	9e 3f       	cpi	r25, 0xFE	; 254
 9fc:	51 05       	cpc	r21, r1
 9fe:	68 f0       	brcs	.+26     	; 0xa1a <__divsf3_pse+0x82>
 a00:	8d c0       	rjmp	.+282    	; 0xb1c <__fp_inf>
 a02:	d7 c0       	rjmp	.+430    	; 0xbb2 <__fp_szero>
 a04:	5f 3f       	cpi	r21, 0xFF	; 255
 a06:	ec f3       	brlt	.-6      	; 0xa02 <__divsf3_pse+0x6a>
 a08:	98 3e       	cpi	r25, 0xE8	; 232
 a0a:	dc f3       	brlt	.-10     	; 0xa02 <__divsf3_pse+0x6a>
 a0c:	86 95       	lsr	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	b7 95       	ror	r27
 a14:	f7 95       	ror	r31
 a16:	9f 5f       	subi	r25, 0xFF	; 255
 a18:	c9 f7       	brne	.-14     	; 0xa0c <__divsf3_pse+0x74>
 a1a:	88 0f       	add	r24, r24
 a1c:	91 1d       	adc	r25, r1
 a1e:	96 95       	lsr	r25
 a20:	87 95       	ror	r24
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret
 a26:	e1 e0       	ldi	r30, 0x01	; 1
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	bb 1f       	adc	r27, r27
 a30:	62 17       	cp	r22, r18
 a32:	73 07       	cpc	r23, r19
 a34:	84 07       	cpc	r24, r20
 a36:	ba 07       	cpc	r27, r26
 a38:	20 f0       	brcs	.+8      	; 0xa42 <__divsf3_pse+0xaa>
 a3a:	62 1b       	sub	r22, r18
 a3c:	73 0b       	sbc	r23, r19
 a3e:	84 0b       	sbc	r24, r20
 a40:	ba 0b       	sbc	r27, r26
 a42:	ee 1f       	adc	r30, r30
 a44:	88 f7       	brcc	.-30     	; 0xa28 <__divsf3_pse+0x90>
 a46:	e0 95       	com	r30
 a48:	08 95       	ret

00000a4a <__fixunssfsi>:
 a4a:	98 d0       	rcall	.+304    	; 0xb7c <__fp_splitA>
 a4c:	88 f0       	brcs	.+34     	; 0xa70 <__fixunssfsi+0x26>
 a4e:	9f 57       	subi	r25, 0x7F	; 127
 a50:	90 f0       	brcs	.+36     	; 0xa76 <__fixunssfsi+0x2c>
 a52:	b9 2f       	mov	r27, r25
 a54:	99 27       	eor	r25, r25
 a56:	b7 51       	subi	r27, 0x17	; 23
 a58:	a0 f0       	brcs	.+40     	; 0xa82 <__fixunssfsi+0x38>
 a5a:	d1 f0       	breq	.+52     	; 0xa90 <__fixunssfsi+0x46>
 a5c:	66 0f       	add	r22, r22
 a5e:	77 1f       	adc	r23, r23
 a60:	88 1f       	adc	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	1a f0       	brmi	.+6      	; 0xa6c <__fixunssfsi+0x22>
 a66:	ba 95       	dec	r27
 a68:	c9 f7       	brne	.-14     	; 0xa5c <__fixunssfsi+0x12>
 a6a:	12 c0       	rjmp	.+36     	; 0xa90 <__fixunssfsi+0x46>
 a6c:	b1 30       	cpi	r27, 0x01	; 1
 a6e:	81 f0       	breq	.+32     	; 0xa90 <__fixunssfsi+0x46>
 a70:	9f d0       	rcall	.+318    	; 0xbb0 <__fp_zero>
 a72:	b1 e0       	ldi	r27, 0x01	; 1
 a74:	08 95       	ret
 a76:	9c c0       	rjmp	.+312    	; 0xbb0 <__fp_zero>
 a78:	67 2f       	mov	r22, r23
 a7a:	78 2f       	mov	r23, r24
 a7c:	88 27       	eor	r24, r24
 a7e:	b8 5f       	subi	r27, 0xF8	; 248
 a80:	39 f0       	breq	.+14     	; 0xa90 <__fixunssfsi+0x46>
 a82:	b9 3f       	cpi	r27, 0xF9	; 249
 a84:	cc f3       	brlt	.-14     	; 0xa78 <__fixunssfsi+0x2e>
 a86:	86 95       	lsr	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	b3 95       	inc	r27
 a8e:	d9 f7       	brne	.-10     	; 0xa86 <__fixunssfsi+0x3c>
 a90:	3e f4       	brtc	.+14     	; 0xaa0 <__fixunssfsi+0x56>
 a92:	90 95       	com	r25
 a94:	80 95       	com	r24
 a96:	70 95       	com	r23
 a98:	61 95       	neg	r22
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	08 95       	ret

00000aa2 <__floatunsisf>:
 aa2:	e8 94       	clt
 aa4:	09 c0       	rjmp	.+18     	; 0xab8 <__floatsisf+0x12>

00000aa6 <__floatsisf>:
 aa6:	97 fb       	bst	r25, 7
 aa8:	3e f4       	brtc	.+14     	; 0xab8 <__floatsisf+0x12>
 aaa:	90 95       	com	r25
 aac:	80 95       	com	r24
 aae:	70 95       	com	r23
 ab0:	61 95       	neg	r22
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255
 ab4:	8f 4f       	sbci	r24, 0xFF	; 255
 ab6:	9f 4f       	sbci	r25, 0xFF	; 255
 ab8:	99 23       	and	r25, r25
 aba:	a9 f0       	breq	.+42     	; 0xae6 <__floatsisf+0x40>
 abc:	f9 2f       	mov	r31, r25
 abe:	96 e9       	ldi	r25, 0x96	; 150
 ac0:	bb 27       	eor	r27, r27
 ac2:	93 95       	inc	r25
 ac4:	f6 95       	lsr	r31
 ac6:	87 95       	ror	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b7 95       	ror	r27
 ace:	f1 11       	cpse	r31, r1
 ad0:	f8 cf       	rjmp	.-16     	; 0xac2 <__floatsisf+0x1c>
 ad2:	fa f4       	brpl	.+62     	; 0xb12 <__floatsisf+0x6c>
 ad4:	bb 0f       	add	r27, r27
 ad6:	11 f4       	brne	.+4      	; 0xadc <__floatsisf+0x36>
 ad8:	60 ff       	sbrs	r22, 0
 ada:	1b c0       	rjmp	.+54     	; 0xb12 <__floatsisf+0x6c>
 adc:	6f 5f       	subi	r22, 0xFF	; 255
 ade:	7f 4f       	sbci	r23, 0xFF	; 255
 ae0:	8f 4f       	sbci	r24, 0xFF	; 255
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	16 c0       	rjmp	.+44     	; 0xb12 <__floatsisf+0x6c>
 ae6:	88 23       	and	r24, r24
 ae8:	11 f0       	breq	.+4      	; 0xaee <__floatsisf+0x48>
 aea:	96 e9       	ldi	r25, 0x96	; 150
 aec:	11 c0       	rjmp	.+34     	; 0xb10 <__floatsisf+0x6a>
 aee:	77 23       	and	r23, r23
 af0:	21 f0       	breq	.+8      	; 0xafa <__floatsisf+0x54>
 af2:	9e e8       	ldi	r25, 0x8E	; 142
 af4:	87 2f       	mov	r24, r23
 af6:	76 2f       	mov	r23, r22
 af8:	05 c0       	rjmp	.+10     	; 0xb04 <__floatsisf+0x5e>
 afa:	66 23       	and	r22, r22
 afc:	71 f0       	breq	.+28     	; 0xb1a <__floatsisf+0x74>
 afe:	96 e8       	ldi	r25, 0x86	; 134
 b00:	86 2f       	mov	r24, r22
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	60 e0       	ldi	r22, 0x00	; 0
 b06:	2a f0       	brmi	.+10     	; 0xb12 <__floatsisf+0x6c>
 b08:	9a 95       	dec	r25
 b0a:	66 0f       	add	r22, r22
 b0c:	77 1f       	adc	r23, r23
 b0e:	88 1f       	adc	r24, r24
 b10:	da f7       	brpl	.-10     	; 0xb08 <__floatsisf+0x62>
 b12:	88 0f       	add	r24, r24
 b14:	96 95       	lsr	r25
 b16:	87 95       	ror	r24
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <__fp_inf>:
 b1c:	97 f9       	bld	r25, 7
 b1e:	9f 67       	ori	r25, 0x7F	; 127
 b20:	80 e8       	ldi	r24, 0x80	; 128
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	60 e0       	ldi	r22, 0x00	; 0
 b26:	08 95       	ret

00000b28 <__fp_nan>:
 b28:	9f ef       	ldi	r25, 0xFF	; 255
 b2a:	80 ec       	ldi	r24, 0xC0	; 192
 b2c:	08 95       	ret

00000b2e <__fp_pscA>:
 b2e:	00 24       	eor	r0, r0
 b30:	0a 94       	dec	r0
 b32:	16 16       	cp	r1, r22
 b34:	17 06       	cpc	r1, r23
 b36:	18 06       	cpc	r1, r24
 b38:	09 06       	cpc	r0, r25
 b3a:	08 95       	ret

00000b3c <__fp_pscB>:
 b3c:	00 24       	eor	r0, r0
 b3e:	0a 94       	dec	r0
 b40:	12 16       	cp	r1, r18
 b42:	13 06       	cpc	r1, r19
 b44:	14 06       	cpc	r1, r20
 b46:	05 06       	cpc	r0, r21
 b48:	08 95       	ret

00000b4a <__fp_round>:
 b4a:	09 2e       	mov	r0, r25
 b4c:	03 94       	inc	r0
 b4e:	00 0c       	add	r0, r0
 b50:	11 f4       	brne	.+4      	; 0xb56 <__fp_round+0xc>
 b52:	88 23       	and	r24, r24
 b54:	52 f0       	brmi	.+20     	; 0xb6a <__fp_round+0x20>
 b56:	bb 0f       	add	r27, r27
 b58:	40 f4       	brcc	.+16     	; 0xb6a <__fp_round+0x20>
 b5a:	bf 2b       	or	r27, r31
 b5c:	11 f4       	brne	.+4      	; 0xb62 <__fp_round+0x18>
 b5e:	60 ff       	sbrs	r22, 0
 b60:	04 c0       	rjmp	.+8      	; 0xb6a <__fp_round+0x20>
 b62:	6f 5f       	subi	r22, 0xFF	; 255
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	8f 4f       	sbci	r24, 0xFF	; 255
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	08 95       	ret

00000b6c <__fp_split3>:
 b6c:	57 fd       	sbrc	r21, 7
 b6e:	90 58       	subi	r25, 0x80	; 128
 b70:	44 0f       	add	r20, r20
 b72:	55 1f       	adc	r21, r21
 b74:	59 f0       	breq	.+22     	; 0xb8c <__fp_splitA+0x10>
 b76:	5f 3f       	cpi	r21, 0xFF	; 255
 b78:	71 f0       	breq	.+28     	; 0xb96 <__fp_splitA+0x1a>
 b7a:	47 95       	ror	r20

00000b7c <__fp_splitA>:
 b7c:	88 0f       	add	r24, r24
 b7e:	97 fb       	bst	r25, 7
 b80:	99 1f       	adc	r25, r25
 b82:	61 f0       	breq	.+24     	; 0xb9c <__fp_splitA+0x20>
 b84:	9f 3f       	cpi	r25, 0xFF	; 255
 b86:	79 f0       	breq	.+30     	; 0xba6 <__fp_splitA+0x2a>
 b88:	87 95       	ror	r24
 b8a:	08 95       	ret
 b8c:	12 16       	cp	r1, r18
 b8e:	13 06       	cpc	r1, r19
 b90:	14 06       	cpc	r1, r20
 b92:	55 1f       	adc	r21, r21
 b94:	f2 cf       	rjmp	.-28     	; 0xb7a <__fp_split3+0xe>
 b96:	46 95       	lsr	r20
 b98:	f1 df       	rcall	.-30     	; 0xb7c <__fp_splitA>
 b9a:	08 c0       	rjmp	.+16     	; 0xbac <__fp_splitA+0x30>
 b9c:	16 16       	cp	r1, r22
 b9e:	17 06       	cpc	r1, r23
 ba0:	18 06       	cpc	r1, r24
 ba2:	99 1f       	adc	r25, r25
 ba4:	f1 cf       	rjmp	.-30     	; 0xb88 <__fp_splitA+0xc>
 ba6:	86 95       	lsr	r24
 ba8:	71 05       	cpc	r23, r1
 baa:	61 05       	cpc	r22, r1
 bac:	08 94       	sec
 bae:	08 95       	ret

00000bb0 <__fp_zero>:
 bb0:	e8 94       	clt

00000bb2 <__fp_szero>:
 bb2:	bb 27       	eor	r27, r27
 bb4:	66 27       	eor	r22, r22
 bb6:	77 27       	eor	r23, r23
 bb8:	cb 01       	movw	r24, r22
 bba:	97 f9       	bld	r25, 7
 bbc:	08 95       	ret

00000bbe <__tablejump2__>:
 bbe:	ee 0f       	add	r30, r30
 bc0:	ff 1f       	adc	r31, r31
 bc2:	00 24       	eor	r0, r0
 bc4:	00 1c       	adc	r0, r0
 bc6:	0b be       	out	0x3b, r0	; 59
 bc8:	07 90       	elpm	r0, Z+
 bca:	f6 91       	elpm	r31, Z
 bcc:	e0 2d       	mov	r30, r0
 bce:	09 94       	ijmp

00000bd0 <_exit>:
 bd0:	f8 94       	cli

00000bd2 <__stop_program>:
 bd2:	ff cf       	rjmp	.-2      	; 0xbd2 <__stop_program>
