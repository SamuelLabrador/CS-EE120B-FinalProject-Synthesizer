
io_handler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000880  00000914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800126  00800126  0000093a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109c  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a35  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007be  00000000  00000000  0000253d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000702  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b5 01       	movw	r22, r10
  8e:	b8 01       	movw	r22, r16
  90:	1c 02       	muls	r17, r28
  92:	d2 01       	movw	r26, r4
  94:	e1 01       	movw	r28, r2
  96:	2c 02       	muls	r18, r28
  98:	ea 01       	movw	r28, r20
  9a:	f9 01       	movw	r30, r18
  9c:	b3 01       	movw	r22, r6
  9e:	01 02       	muls	r16, r17
  a0:	0f 02       	muls	r16, r31

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e0 e8       	ldi	r30, 0x80	; 128
  b6:	f8 e0       	ldi	r31, 0x08	; 8
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a6 32       	cpi	r26, 0x26	; 38
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a7 34       	cpi	r26, 0x47	; 71
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	d8 d1       	rcall	.+944    	; 0x48a <main>
  da:	d0 c3       	rjmp	.+1952   	; 0x87c <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <TimerOn>:
void getPotentiometerSnapshot(unsigned char * array){	//5 potentiometers
	unsigned char i;
	for(i = 0; i < 5; i = i + 1){
		array[i] = captureSingleKnob(i + 1);
	}
}
  de:	8b e0       	ldi	r24, 0x0B	; 11
  e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  e4:	8a ef       	ldi	r24, 0xFA	; 250
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 102:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 106:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 10a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 10e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 112:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 116:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end+0x2>
 11a:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x3>
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <__vector_13>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 138:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 13c:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <__data_end+0x2>
 140:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <__data_end+0x3>
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	a1 09       	sbc	r26, r1
 148:	b1 09       	sbc	r27, r1
 14a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 14e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 152:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end+0x2>
 156:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x3>
 15a:	89 2b       	or	r24, r25
 15c:	8a 2b       	or	r24, r26
 15e:	8b 2b       	or	r24, r27
 160:	99 f4       	brne	.+38     	; 0x188 <__vector_13+0x66>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TimerFlag>
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 170:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 174:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 178:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 17c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 180:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end+0x2>
 184:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x3>
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <TimerSet>:
 19a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 19e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1aa:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
 1ae:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
 1b2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end+0x2>
 1b6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x3>
 1ba:	08 95       	ret

000001bc <ADC_init>:
 1bc:	ea e7       	ldi	r30, 0x7A	; 122
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 6e       	ori	r24, 0xE0	; 224
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <scaleTo100>:
 1c8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1cc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	bc d2       	rcall	.+1400   	; 0x74e <__floatunsisf>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	52 e4       	ldi	r21, 0x42	; 66
 1de:	be d1       	rcall	.+892    	; 0x55c <__subsf3>
 1e0:	2c ee       	ldi	r18, 0xEC	; 236
 1e2:	31 e5       	ldi	r19, 0x51	; 81
 1e4:	4c e1       	ldi	r20, 0x1C	; 28
 1e6:	51 e4       	ldi	r21, 0x41	; 65
 1e8:	1e d2       	rcall	.+1084   	; 0x626 <__divsf3>
 1ea:	85 d2       	rcall	.+1290   	; 0x6f6 <__fixunssfsi>
 1ec:	86 2f       	mov	r24, r22
 1ee:	08 95       	ret

000001f0 <captureSingleKnob>:
 1f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <captureSingleKnob+0x6>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <captureSingleKnob+0xc>
 1fc:	e5 cf       	rjmp	.-54     	; 0x1c8 <scaleTo100>
 1fe:	08 95       	ret

00000200 <isPressed>:

unsigned char isPressed(){
	return (~PINA & 0x10);
 200:	80 b1       	in	r24, 0x00	; 0
 202:	80 95       	com	r24
}
 204:	80 71       	andi	r24, 0x10	; 16
 206:	08 95       	ret

00000208 <calcMenu>:
typedef enum Menu {INIT, RELEASE, OSC1PREP, OSC1WAIT, OSC1MAIN, FILTPREP, FILTWAIT, FILTMAIN, AMPPREP, AMPWAIT, AMPMAIN} Menu;
#define MENU_ITEMS 3


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0)/MENU_ITEMS;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	f2 df       	rcall	.-28     	; 0x1f0 <captureSingleKnob>
 20c:	9b ea       	ldi	r25, 0xAB	; 171
 20e:	89 9f       	mul	r24, r25
 210:	81 2d       	mov	r24, r1
 212:	11 24       	eor	r1, r1
 214:	86 95       	lsr	r24
	if(value < 33){
 216:	81 32       	cpi	r24, 0x21	; 33
 218:	20 f0       	brcs	.+8      	; 0x222 <calcMenu+0x1a>
		return OSC1PREP;		//OSC_1 PREP state
	}
	else if(value < 66){
 21a:	82 34       	cpi	r24, 0x42	; 66
 21c:	20 f0       	brcs	.+8      	; 0x226 <calcMenu+0x1e>
		return FILTPREP;		//FILT PREP state
	}
	else{
		return AMPPREP;			//AMP PREP state
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	08 95       	ret


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0)/MENU_ITEMS;
	if(value < 33){
		return OSC1PREP;		//OSC_1 PREP state
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	08 95       	ret
	}
	else if(value < 66){
		return FILTPREP;		//FILT PREP state
 226:	85 e0       	ldi	r24, 0x05	; 5
	}
	else{
		return AMPPREP;			//AMP PREP state
	}
}
 228:	08 95       	ret

0000022a <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 22a:	18 16       	cp	r1, r24
 22c:	19 06       	cpc	r1, r25
 22e:	5c f0       	brlt	.+22     	; 0x246 <delay_ms+0x1c>
 230:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 232:	00 00       	nop
 234:	21 50       	subi	r18, 0x01	; 1
 236:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 238:	e1 f7       	brne	.-8      	; 0x232 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 23a:	4f 5f       	subi	r20, 0xFF	; 255
 23c:	5f 4f       	sbci	r21, 0xFF	; 255
 23e:	84 17       	cp	r24, r20
 240:	95 07       	cpc	r25, r21
 242:	19 f4       	brne	.+6      	; 0x24a <delay_ms+0x20>
 244:	08 95       	ret
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 24a:	27 e0       	ldi	r18, 0x07	; 7
 24c:	33 e0       	ldi	r19, 0x03	; 3
 24e:	f1 cf       	rjmp	.-30     	; 0x232 <delay_ms+0x8>

00000250 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 250:	5f 98       	cbi	0x0b, 7	; 11
   DATA_BUS = Command;
 252:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 254:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 256:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 258:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	e5 cf       	rjmp	.-54     	; 0x22a <delay_ms>
 260:	08 95       	ret

00000262 <LCD_ClearScreen>:
#define E 6			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	f5 cf       	rjmp	.-22     	; 0x250 <LCD_WriteCommand>
 266:	08 95       	ret

00000268 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 268:	81 31       	cpi	r24, 0x11	; 17
 26a:	18 f4       	brcc	.+6      	; 0x272 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 26c:	81 58       	subi	r24, 0x81	; 129
 26e:	f0 cf       	rjmp	.-32     	; 0x250 <LCD_WriteCommand>
 270:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 272:	81 55       	subi	r24, 0x51	; 81
 274:	ed cf       	rjmp	.-38     	; 0x250 <LCD_WriteCommand>
 276:	08 95       	ret

00000278 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 278:	84 e6       	ldi	r24, 0x64	; 100
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	d6 df       	rcall	.-84     	; 0x22a <delay_ms>
	LCD_WriteCommand(0x38);
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	e7 df       	rcall	.-50     	; 0x250 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	e5 df       	rcall	.-54     	; 0x250 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	e3 df       	rcall	.-58     	; 0x250 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	e1 df       	rcall	.-62     	; 0x250 <LCD_WriteCommand>
	delay_ms(10);						 
 28e:	8a e0       	ldi	r24, 0x0A	; 10
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	cb cf       	rjmp	.-106    	; 0x22a <delay_ms>
 294:	08 95       	ret

00000296 <LCD_WriteData>:
 296:	5f 9a       	sbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 298:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 29a:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 29c:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 29e:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(1);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	c2 cf       	rjmp	.-124    	; 0x22a <delay_ms>
 2a6:	08 95       	ret

000002a8 <updateParameterValue>:

void updateParameterValue(unsigned char * array){
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	7c 01       	movw	r14, r24
 2ba:	01 e1       	ldi	r16, 0x11	; 17
 2bc:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0; i < 4; i++){
		str[0] = array[i + 1] / 10 + 48;
		str[1] = array[i + 1] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
 2be:	0f 2e       	mov	r0, r31
 2c0:	fd ec       	ldi	r31, 0xCD	; 205
 2c2:	df 2e       	mov	r13, r31
 2c4:	f0 2d       	mov	r31, r0

void updateParameterValue(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
		str[0] = array[i + 1] / 10 + 48;
 2c6:	f7 01       	movw	r30, r14
 2c8:	d1 91       	ld	r29, Z+
 2ca:	7f 01       	movw	r14, r30
		str[1] = array[i + 1] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
 2cc:	c8 01       	movw	r24, r16
 2ce:	cc df       	rcall	.-104    	; 0x268 <LCD_Cursor>
		LCD_WriteData(str[0]);
 2d0:	dd 9d       	mul	r29, r13
 2d2:	c1 2d       	mov	r28, r1
 2d4:	11 24       	eor	r1, r1
 2d6:	c6 95       	lsr	r28
 2d8:	c6 95       	lsr	r28
 2da:	c6 95       	lsr	r28
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	8c 0f       	add	r24, r28
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	d9 df       	rcall	.-78     	; 0x296 <LCD_WriteData>
		LCD_Cursor(18 + i * 4);	
 2e4:	c8 01       	movw	r24, r16
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	bf df       	rcall	.-130    	; 0x268 <LCD_Cursor>
		LCD_WriteData(str[1]);
 2ea:	cc 0f       	add	r28, r28
 2ec:	8c 2f       	mov	r24, r28
 2ee:	88 0f       	add	r24, r24
 2f0:	88 0f       	add	r24, r24
 2f2:	c8 0f       	add	r28, r24
 2f4:	dc 1b       	sub	r29, r28
 2f6:	80 e3       	ldi	r24, 0x30	; 48
 2f8:	8d 0f       	add	r24, r29
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	cc df       	rcall	.-104    	; 0x296 <LCD_WriteData>
 2fe:	0c 5f       	subi	r16, 0xFC	; 252
 300:	1f 4f       	sbci	r17, 0xFF	; 255
}

void updateParameterValue(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
 302:	01 32       	cpi	r16, 0x21	; 33
 304:	11 05       	cpc	r17, r1
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
		LCD_Cursor(18 + i * 4);	
		LCD_WriteData(str[1]);
	}
	LCD_Cursor(0);
 306:	f9 f6       	brne	.-66     	; 0x2c6 <updateParameterValue+0x1e>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ad df       	rcall	.-166    	; 0x268 <LCD_Cursor>
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	08 95       	ret

0000031e <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	18 2f       	mov	r17, r24
 328:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 32a:	9b df       	rcall	.-202    	; 0x262 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 32c:	88 81       	ld	r24, Y
 32e:	88 23       	and	r24, r24
 330:	51 f0       	breq	.+20     	; 0x346 <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 332:	01 e0       	ldi	r16, 0x01	; 1
 334:	01 0f       	add	r16, r17
 336:	81 2f       	mov	r24, r17
 338:	97 df       	rcall	.-210    	; 0x268 <LCD_Cursor>
      LCD_WriteData(*string++);
 33a:	89 91       	ld	r24, Y+
 33c:	ac df       	rcall	.-168    	; 0x296 <LCD_WriteData>
 33e:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 340:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 342:	81 11       	cpse	r24, r1
 344:	f6 cf       	rjmp	.-20     	; 0x332 <LCD_DisplayString+0x14>
 346:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <menuTask>:
 350:	cf 93       	push	r28
	_avr_timer_cntcurr = 0;
	_avr_timer_M = 0;
}

//menuTask handles the main I/O
unsigned char menuTask(unsigned char currentState){
 352:	c8 2f       	mov	r28, r24
	
	switch(currentState){	//state transition calculations
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	8b 30       	cpi	r24, 0x0B	; 11
 358:	91 05       	cpc	r25, r1
 35a:	08 f0       	brcs	.+2      	; 0x35e <menuTask+0xe>
 35c:	68 c0       	rjmp	.+208    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 35e:	fc 01       	movw	r30, r24
 360:	ea 5b       	subi	r30, 0xBA	; 186
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	82 c2       	rjmp	.+1284   	; 0x86a <__tablejump2__>
				currentState = RELEASE; //WAIT FOR RELEASE
			}
			break;
			
		case(AMPPREP):
			currentState = AMPWAIT;
 366:	c9 e0       	ldi	r28, 0x09	; 9
//menuTask handles the main I/O
unsigned char menuTask(unsigned char currentState){
	
	switch(currentState){	//state transition calculations
		case(INIT):
			currentState = calcMenu();
 368:	7a c0       	rjmp	.+244    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 36a:	4e df       	rcall	.-356    	; 0x208 <calcMenu>
			break;
 36c:	c8 2f       	mov	r28, r24
		
		case(RELEASE):						//wait for button release
			if(isPressed()){
 36e:	65 c0       	rjmp	.+202    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 370:	47 df       	rcall	.-370    	; 0x200 <isPressed>
 372:	81 11       	cpse	r24, r1
 374:	74 c0       	rjmp	.+232    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				return currentState; //NO ACTIONS PREFORMED IF BUTTON IS STILL PRESSED, can return immediately
			}
			else if(previousMenuState == OSC1WAIT){
 376:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <previousMenuState>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	09 f4       	brne	.+2      	; 0x380 <menuTask+0x30>
				currentState = OSC1MAIN;	
			}
			else if(previousMenuState == OSC1MAIN){
 37e:	6a c0       	rjmp	.+212    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 380:	84 30       	cpi	r24, 0x04	; 4
				currentState = calcMenu();
 382:	19 f4       	brne	.+6      	; 0x38a <menuTask+0x3a>
 384:	41 df       	rcall	.-382    	; 0x208 <calcMenu>
 386:	c8 2f       	mov	r28, r24
 388:	58 c0       	rjmp	.+176    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
			else if(previousMenuState == FILTWAIT){
 38a:	86 30       	cpi	r24, 0x06	; 6
 38c:	09 f4       	brne	.+2      	; 0x390 <menuTask+0x40>
				currentState = FILTMAIN;
			}
			else if(previousMenuState == FILTMAIN){
 38e:	66 c0       	rjmp	.+204    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 390:	87 30       	cpi	r24, 0x07	; 7
				currentState = calcMenu();
 392:	19 f4       	brne	.+6      	; 0x39a <menuTask+0x4a>
 394:	39 df       	rcall	.-398    	; 0x208 <calcMenu>
 396:	c8 2f       	mov	r28, r24
 398:	50 c0       	rjmp	.+160    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
			else if(previousMenuState = AMPWAIT){
 39a:	89 e0       	ldi	r24, 0x09	; 9
 39c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <previousMenuState>
		case(OSC1PREP)://OSC_1 PREP
			currentState = OSC1WAIT;
			break;
		
		case(OSC1WAIT)://OSC_1 WAIT
			if(calcMenu() != OSC1PREP){			//data knob priority over button press
 3a0:	ca e0       	ldi	r28, 0x0A	; 10
 3a2:	5d c0       	rjmp	.+186    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3a4:	31 df       	rcall	.-414    	; 0x208 <calcMenu>
				currentState = calcMenu();
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <menuTask+0x60>
 3aa:	2e df       	rcall	.-420    	; 0x208 <calcMenu>
 3ac:	c8 2f       	mov	r28, r24
			}
			else if(isPressed()){
 3ae:	45 c0       	rjmp	.+138    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3b0:	27 df       	rcall	.-434    	; 0x200 <isPressed>
 3b2:	88 23       	and	r24, r24
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <menuTask+0x68>
				previousMenuState = OSC1WAIT;
 3b6:	53 c0       	rjmp	.+166    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
 3be:	c1 e0       	ldi	r28, 0x01	; 1
			}
			break;
			
		case(OSC1MAIN):
			if(isPressed()){
 3c0:	4e c0       	rjmp	.+156    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3c2:	1e df       	rcall	.-452    	; 0x200 <isPressed>
 3c4:	88 23       	and	r24, r24
 3c6:	09 f4       	brne	.+2      	; 0x3ca <menuTask+0x7a>
				previousMenuState = OSC1MAIN;
 3c8:	45 c0       	rjmp	.+138    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3ca:	84 e0       	ldi	r24, 0x04	; 4
				currentState = RELEASE; //WAIT FOR RELEASE
 3cc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <previousMenuState>
		case(FILTPREP):
			currentState = FILTWAIT;
			break;
			
		case(FILTWAIT):
			if(calcMenu() != FILTPREP){			//data knob priority over button press
 3d0:	c1 e0       	ldi	r28, 0x01	; 1
 3d2:	45 c0       	rjmp	.+138    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3d4:	19 df       	rcall	.-462    	; 0x208 <calcMenu>
 3d6:	85 30       	cpi	r24, 0x05	; 5
				currentState = calcMenu();
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <menuTask+0x90>
 3da:	16 df       	rcall	.-468    	; 0x208 <calcMenu>
 3dc:	c8 2f       	mov	r28, r24
			}
			else if(isPressed()){
 3de:	2d c0       	rjmp	.+90     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3e0:	0f df       	rcall	.-482    	; 0x200 <isPressed>
 3e2:	88 23       	and	r24, r24
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <menuTask+0x98>
 3e6:	3b c0       	rjmp	.+118    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				previousMenuState = FILTMAIN;
 3e8:	87 e0       	ldi	r24, 0x07	; 7
 3ea:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
			}
			break;
			
		case(FILTMAIN):
			if(isPressed()){
 3ee:	c1 e0       	ldi	r28, 0x01	; 1
 3f0:	36 c0       	rjmp	.+108    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3f2:	06 df       	rcall	.-500    	; 0x200 <isPressed>
				previousMenuState = FILTMAIN;
 3f4:	88 23       	and	r24, r24
 3f6:	99 f1       	breq	.+102    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3f8:	87 e0       	ldi	r24, 0x07	; 7
				currentState = RELEASE; //WAIT FOR RELEASE
 3fa:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <previousMenuState>
		case(AMPPREP):
			currentState = AMPWAIT;
			break;
			
		case(AMPWAIT):
			if(calcMenu() != AMPPREP){			//data knob priority over button press
 3fe:	c1 e0       	ldi	r28, 0x01	; 1
 400:	2e c0       	rjmp	.+92     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 402:	02 df       	rcall	.-508    	; 0x208 <calcMenu>
				currentState = calcMenu();
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	19 f0       	breq	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	ff de       	rcall	.-514    	; 0x208 <calcMenu>
 40a:	c8 2f       	mov	r28, r24
			}
			else if(isPressed()){
 40c:	16 c0       	rjmp	.+44     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 40e:	f8 de       	rcall	.-528    	; 0x200 <isPressed>
 410:	88 23       	and	r24, r24
 412:	29 f1       	breq	.+74     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				previousMenuState = AMPWAIT;
 414:	89 e0       	ldi	r24, 0x09	; 9
 416:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
 41a:	c1 e0       	ldi	r28, 0x01	; 1
			}
			break;
			
		case(AMPMAIN):
			if(isPressed()){
 41c:	20 c0       	rjmp	.+64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 41e:	f0 de       	rcall	.-544    	; 0x200 <isPressed>
 420:	88 23       	and	r24, r24
 422:	e9 f0       	breq	.+58     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				previousMenuState = AMPMAIN;
 424:	8a e0       	ldi	r24, 0x0A	; 10
 426:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <previousMenuState>
				currentState = RELEASE; //WAIT FOR RELEASE
 42a:	c1 e0       	ldi	r28, 0x01	; 1
			}
			break;
		default:
			LCD_DisplayString(1, "ERROR default state");
 42c:	18 c0       	rjmp	.+48     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	71 e0       	ldi	r23, 0x01	; 1
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	74 df       	rcall	.-280    	; 0x31e <LCD_DisplayString>
				currentState = calcMenu();
			}
			break;
		
		case(OSC1PREP)://OSC_1 PREP
			currentState = OSC1WAIT;
 436:	01 c0       	rjmp	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			break;
		default:
			LCD_DisplayString(1, "ERROR default state");
	}
	
	switch(currentState){
 438:	c3 e0       	ldi	r28, 0x03	; 3
 43a:	c2 30       	cpi	r28, 0x02	; 2
 43c:	19 f0       	breq	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43e:	c4 30       	cpi	r28, 0x04	; 4
 440:	29 f0       	breq	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case(OSC1PREP):
			LCD_DisplayString(1, "OSCILLATOR 1");
 442:	0d c0       	rjmp	.+26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 444:	68 e1       	ldi	r22, 0x18	; 24
 446:	71 e0       	ldi	r23, 0x01	; 1
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	69 df       	rcall	.-302    	; 0x31e <LCD_DisplayString>
			
		case(OSC1MAIN):
			
			updateParameterValue(menuValues);
 44c:	86 e3       	ldi	r24, 0x36	; 54
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	2b df       	rcall	.-426    	; 0x2a8 <updateParameterValue>
 452:	05 c0       	rjmp	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 454:	c4 e0       	ldi	r28, 0x04	; 4
				currentState = calcMenu();
			}
			break;
		
		case(OSC1PREP)://OSC_1 PREP
			currentState = OSC1WAIT;
 456:	fa cf       	rjmp	.-12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 458:	c6 e0       	ldi	r28, 0x06	; 6
				currentState = RELEASE; //WAIT FOR RELEASE
			}
			break;
			
		case(FILTPREP):
			currentState = FILTWAIT;
 45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	c7 e0       	ldi	r28, 0x07	; 7
			}
			else if(previousMenuState == OSC1MAIN){
				currentState = calcMenu();
			}
			else if(previousMenuState == FILTWAIT){
				currentState = FILTMAIN;
 45e:	8c 2f       	mov	r24, r28
	return currentState;
	
	
	
	return 0x01;
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <initExtern>:
 464:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TimerFlag>
    }
}

void initExtern(){
	TimerFlag = 0;
	_avr_timer_cntcurr = 0;
 468:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
 46c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 470:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end+0x2>
 474:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x3>
	_avr_timer_M = 0;
 478:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 47c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 480:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
 484:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
 488:	08 95       	ret

0000048a <main>:
//forward function declerations
void initExtern();	//used to initialize external variables
unsigned char menuTask(unsigned char);

int main(void)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	2b 97       	sbiw	r28, 0x0b	; 11
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0x00; PORTA = 0xFF;	//potentiometer inputs
 49e:	11 b8       	out	0x01, r1	; 1
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;	//LCD data out
 4a4:	87 b9       	out	0x07, r24	; 7
 4a6:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;	//bits 6 and 4 input Rx in || everything else is output. Tx and LCD control
 4a8:	8a b9       	out	0x0a, r24	; 10
 4aa:	1b b8       	out	0x0b, r1	; 11
	
	initExtern();
 4ac:	db df       	rcall	.-74     	; 0x464 <initExtern>
	
	unsigned char i = 0x00;
	unsigned char taskCount = 1;
	task menu;
	tasks[0] = menu;
 4ae:	8b e0       	ldi	r24, 0x0B	; 11
 4b0:	fe 01       	movw	r30, r28
 4b2:	31 96       	adiw	r30, 0x01	; 1
 4b4:	ab e2       	ldi	r26, 0x2B	; 43
 4b6:	b1 e0       	ldi	r27, 0x01	; 1
 4b8:	01 90       	ld	r0, Z+
 4ba:	0d 92       	st	X+, r0
 4bc:	8a 95       	dec	r24
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <main+0x2e>
	
	tasks[0].period = 50;
 4c0:	eb e2       	ldi	r30, 0x2B	; 43
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	82 e3       	ldi	r24, 0x32	; 50
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	a0 e0       	ldi	r26, 0x00	; 0
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	80 83       	st	Z, r24
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	a2 83       	std	Z+2, r26	; 0x02
 4d2:	b3 83       	std	Z+3, r27	; 0x03
	tasks[0].elapsedTime = 0;
 4d4:	14 82       	std	Z+4, r1	; 0x04
 4d6:	15 82       	std	Z+5, r1	; 0x05
 4d8:	16 82       	std	Z+6, r1	; 0x06
 4da:	17 82       	std	Z+7, r1	; 0x07
	tasks[0].TickFunction = &menuTask;
 4dc:	88 ea       	ldi	r24, 0xA8	; 168
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	92 87       	std	Z+10, r25	; 0x0a
	
	ADC_init();		//init ADC
 4e2:	81 87       	std	Z+9, r24	; 0x09
	LCD_init();		//init LCD
 4e4:	6b de       	rcall	.-810    	; 0x1bc <ADC_init>
 4e6:	c8 de       	rcall	.-624    	; 0x278 <LCD_init>
	TimerSet(5);	//set timer interrupt cycle period
 4e8:	65 e0       	ldi	r22, 0x05	; 5
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();		//enable timer
 4f0:	54 de       	rcall	.-856    	; 0x19a <TimerSet>
 4f2:	f5 dd       	rcall	.-1046   	; 0xde <TimerOn>
	
    while (1) 
    {
		for(i = 0; i < taskCount; i++){
			if(tasks[i].elapsedTime >= tasks[i].period){
 4f4:	0b e2       	ldi	r16, 0x2B	; 43
 4f6:	11 e0       	ldi	r17, 0x01	; 1
 4f8:	d8 01       	movw	r26, r16
 4fa:	14 96       	adiw	r26, 0x04	; 4
 4fc:	4d 91       	ld	r20, X+
 4fe:	5d 91       	ld	r21, X+
 500:	6d 91       	ld	r22, X+
 502:	7c 91       	ld	r23, X
 504:	17 97       	sbiw	r26, 0x07	; 7
 506:	8d 91       	ld	r24, X+
 508:	9d 91       	ld	r25, X+
 50a:	0d 90       	ld	r0, X+
 50c:	bc 91       	ld	r27, X
 50e:	a0 2d       	mov	r26, r0
 510:	48 17       	cp	r20, r24
 512:	59 07       	cpc	r21, r25
 514:	6a 07       	cpc	r22, r26
 516:	7b 07       	cpc	r23, r27
 518:	70 f0       	brcs	.+28     	; 0x536 <main+0xac>
				tasks[i].state = tasks[i].TickFunction(tasks[i].state);
 51a:	d8 01       	movw	r26, r16
 51c:	19 96       	adiw	r26, 0x09	; 9
 51e:	ed 91       	ld	r30, X+
 520:	fc 91       	ld	r31, X
 522:	1a 97       	sbiw	r26, 0x0a	; 10
 524:	18 96       	adiw	r26, 0x08	; 8
 526:	8c 91       	ld	r24, X
 528:	09 95       	icall
 52a:	f8 01       	movw	r30, r16
 52c:	80 87       	std	Z+8, r24	; 0x08
				tasks[i].elapsedTime = 0;
 52e:	14 82       	std	Z+4, r1	; 0x04
 530:	15 82       	std	Z+5, r1	; 0x05
 532:	16 82       	std	Z+6, r1	; 0x06
 534:	17 82       	std	Z+7, r1	; 0x07
			}
			tasks[i].elapsedTime += 5;
 536:	f8 01       	movw	r30, r16
 538:	84 81       	ldd	r24, Z+4	; 0x04
 53a:	95 81       	ldd	r25, Z+5	; 0x05
 53c:	a6 81       	ldd	r26, Z+6	; 0x06
 53e:	b7 81       	ldd	r27, Z+7	; 0x07
 540:	05 96       	adiw	r24, 0x05	; 5
 542:	a1 1d       	adc	r26, r1
 544:	b1 1d       	adc	r27, r1
 546:	84 83       	std	Z+4, r24	; 0x04
 548:	95 83       	std	Z+5, r25	; 0x05
 54a:	a6 83       	std	Z+6, r26	; 0x06
 54c:	b7 83       	std	Z+7, r27	; 0x07
		}
		TimerFlag = 0;
 54e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TimerFlag>
		while(!TimerFlag);
 552:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <TimerFlag>
 556:	88 23       	and	r24, r24
 558:	e1 f3       	breq	.-8      	; 0x552 <main+0xc8>
 55a:	ce cf       	rjmp	.-100    	; 0x4f8 <main+0x6e>

0000055c <__subsf3>:
 55c:	50 58       	subi	r21, 0x80	; 128

0000055e <__addsf3>:
 55e:	bb 27       	eor	r27, r27
 560:	aa 27       	eor	r26, r26
 562:	0e d0       	rcall	.+28     	; 0x580 <__addsf3x>
 564:	48 c1       	rjmp	.+656    	; 0x7f6 <__fp_round>
 566:	39 d1       	rcall	.+626    	; 0x7da <__fp_pscA>
 568:	30 f0       	brcs	.+12     	; 0x576 <__addsf3+0x18>
 56a:	3e d1       	rcall	.+636    	; 0x7e8 <__fp_pscB>
 56c:	20 f0       	brcs	.+8      	; 0x576 <__addsf3+0x18>
 56e:	31 f4       	brne	.+12     	; 0x57c <__addsf3+0x1e>
 570:	9f 3f       	cpi	r25, 0xFF	; 255
 572:	11 f4       	brne	.+4      	; 0x578 <__addsf3+0x1a>
 574:	1e f4       	brtc	.+6      	; 0x57c <__addsf3+0x1e>
 576:	2e c1       	rjmp	.+604    	; 0x7d4 <__fp_nan>
 578:	0e f4       	brtc	.+2      	; 0x57c <__addsf3+0x1e>
 57a:	e0 95       	com	r30
 57c:	e7 fb       	bst	r30, 7
 57e:	24 c1       	rjmp	.+584    	; 0x7c8 <__fp_inf>

00000580 <__addsf3x>:
 580:	e9 2f       	mov	r30, r25
 582:	4a d1       	rcall	.+660    	; 0x818 <__fp_split3>
 584:	80 f3       	brcs	.-32     	; 0x566 <__addsf3+0x8>
 586:	ba 17       	cp	r27, r26
 588:	62 07       	cpc	r22, r18
 58a:	73 07       	cpc	r23, r19
 58c:	84 07       	cpc	r24, r20
 58e:	95 07       	cpc	r25, r21
 590:	18 f0       	brcs	.+6      	; 0x598 <__addsf3x+0x18>
 592:	71 f4       	brne	.+28     	; 0x5b0 <__addsf3x+0x30>
 594:	9e f5       	brtc	.+102    	; 0x5fc <__addsf3x+0x7c>
 596:	62 c1       	rjmp	.+708    	; 0x85c <__fp_zero>
 598:	0e f4       	brtc	.+2      	; 0x59c <__addsf3x+0x1c>
 59a:	e0 95       	com	r30
 59c:	0b 2e       	mov	r0, r27
 59e:	ba 2f       	mov	r27, r26
 5a0:	a0 2d       	mov	r26, r0
 5a2:	0b 01       	movw	r0, r22
 5a4:	b9 01       	movw	r22, r18
 5a6:	90 01       	movw	r18, r0
 5a8:	0c 01       	movw	r0, r24
 5aa:	ca 01       	movw	r24, r20
 5ac:	a0 01       	movw	r20, r0
 5ae:	11 24       	eor	r1, r1
 5b0:	ff 27       	eor	r31, r31
 5b2:	59 1b       	sub	r21, r25
 5b4:	99 f0       	breq	.+38     	; 0x5dc <__addsf3x+0x5c>
 5b6:	59 3f       	cpi	r21, 0xF9	; 249
 5b8:	50 f4       	brcc	.+20     	; 0x5ce <__addsf3x+0x4e>
 5ba:	50 3e       	cpi	r21, 0xE0	; 224
 5bc:	68 f1       	brcs	.+90     	; 0x618 <__addsf3x+0x98>
 5be:	1a 16       	cp	r1, r26
 5c0:	f0 40       	sbci	r31, 0x00	; 0
 5c2:	a2 2f       	mov	r26, r18
 5c4:	23 2f       	mov	r18, r19
 5c6:	34 2f       	mov	r19, r20
 5c8:	44 27       	eor	r20, r20
 5ca:	58 5f       	subi	r21, 0xF8	; 248
 5cc:	f3 cf       	rjmp	.-26     	; 0x5b4 <__addsf3x+0x34>
 5ce:	46 95       	lsr	r20
 5d0:	37 95       	ror	r19
 5d2:	27 95       	ror	r18
 5d4:	a7 95       	ror	r26
 5d6:	f0 40       	sbci	r31, 0x00	; 0
 5d8:	53 95       	inc	r21
 5da:	c9 f7       	brne	.-14     	; 0x5ce <__addsf3x+0x4e>
 5dc:	7e f4       	brtc	.+30     	; 0x5fc <__addsf3x+0x7c>
 5de:	1f 16       	cp	r1, r31
 5e0:	ba 0b       	sbc	r27, r26
 5e2:	62 0b       	sbc	r22, r18
 5e4:	73 0b       	sbc	r23, r19
 5e6:	84 0b       	sbc	r24, r20
 5e8:	ba f0       	brmi	.+46     	; 0x618 <__addsf3x+0x98>
 5ea:	91 50       	subi	r25, 0x01	; 1
 5ec:	a1 f0       	breq	.+40     	; 0x616 <__addsf3x+0x96>
 5ee:	ff 0f       	add	r31, r31
 5f0:	bb 1f       	adc	r27, r27
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	c2 f7       	brpl	.-16     	; 0x5ea <__addsf3x+0x6a>
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <__addsf3x+0x98>
 5fc:	ba 0f       	add	r27, r26
 5fe:	62 1f       	adc	r22, r18
 600:	73 1f       	adc	r23, r19
 602:	84 1f       	adc	r24, r20
 604:	48 f4       	brcc	.+18     	; 0x618 <__addsf3x+0x98>
 606:	87 95       	ror	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	b7 95       	ror	r27
 60e:	f7 95       	ror	r31
 610:	9e 3f       	cpi	r25, 0xFE	; 254
 612:	08 f0       	brcs	.+2      	; 0x616 <__addsf3x+0x96>
 614:	b3 cf       	rjmp	.-154    	; 0x57c <__addsf3+0x1e>
 616:	93 95       	inc	r25
 618:	88 0f       	add	r24, r24
 61a:	08 f0       	brcs	.+2      	; 0x61e <__addsf3x+0x9e>
 61c:	99 27       	eor	r25, r25
 61e:	ee 0f       	add	r30, r30
 620:	97 95       	ror	r25
 622:	87 95       	ror	r24
 624:	08 95       	ret

00000626 <__divsf3>:
 626:	0c d0       	rcall	.+24     	; 0x640 <__divsf3x>
 628:	e6 c0       	rjmp	.+460    	; 0x7f6 <__fp_round>
 62a:	de d0       	rcall	.+444    	; 0x7e8 <__fp_pscB>
 62c:	40 f0       	brcs	.+16     	; 0x63e <__divsf3+0x18>
 62e:	d5 d0       	rcall	.+426    	; 0x7da <__fp_pscA>
 630:	30 f0       	brcs	.+12     	; 0x63e <__divsf3+0x18>
 632:	21 f4       	brne	.+8      	; 0x63c <__divsf3+0x16>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	19 f0       	breq	.+6      	; 0x63e <__divsf3+0x18>
 638:	c7 c0       	rjmp	.+398    	; 0x7c8 <__fp_inf>
 63a:	51 11       	cpse	r21, r1
 63c:	10 c1       	rjmp	.+544    	; 0x85e <__fp_szero>
 63e:	ca c0       	rjmp	.+404    	; 0x7d4 <__fp_nan>

00000640 <__divsf3x>:
 640:	eb d0       	rcall	.+470    	; 0x818 <__fp_split3>
 642:	98 f3       	brcs	.-26     	; 0x62a <__divsf3+0x4>

00000644 <__divsf3_pse>:
 644:	99 23       	and	r25, r25
 646:	c9 f3       	breq	.-14     	; 0x63a <__divsf3+0x14>
 648:	55 23       	and	r21, r21
 64a:	b1 f3       	breq	.-20     	; 0x638 <__divsf3+0x12>
 64c:	95 1b       	sub	r25, r21
 64e:	55 0b       	sbc	r21, r21
 650:	bb 27       	eor	r27, r27
 652:	aa 27       	eor	r26, r26
 654:	62 17       	cp	r22, r18
 656:	73 07       	cpc	r23, r19
 658:	84 07       	cpc	r24, r20
 65a:	38 f0       	brcs	.+14     	; 0x66a <__divsf3_pse+0x26>
 65c:	9f 5f       	subi	r25, 0xFF	; 255
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	22 0f       	add	r18, r18
 662:	33 1f       	adc	r19, r19
 664:	44 1f       	adc	r20, r20
 666:	aa 1f       	adc	r26, r26
 668:	a9 f3       	breq	.-22     	; 0x654 <__divsf3_pse+0x10>
 66a:	33 d0       	rcall	.+102    	; 0x6d2 <__divsf3_pse+0x8e>
 66c:	0e 2e       	mov	r0, r30
 66e:	3a f0       	brmi	.+14     	; 0x67e <__divsf3_pse+0x3a>
 670:	e0 e8       	ldi	r30, 0x80	; 128
 672:	30 d0       	rcall	.+96     	; 0x6d4 <__divsf3_pse+0x90>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	e6 95       	lsr	r30
 67a:	00 1c       	adc	r0, r0
 67c:	ca f7       	brpl	.-14     	; 0x670 <__divsf3_pse+0x2c>
 67e:	29 d0       	rcall	.+82     	; 0x6d2 <__divsf3_pse+0x8e>
 680:	fe 2f       	mov	r31, r30
 682:	27 d0       	rcall	.+78     	; 0x6d2 <__divsf3_pse+0x8e>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	bb 1f       	adc	r27, r27
 68c:	26 17       	cp	r18, r22
 68e:	37 07       	cpc	r19, r23
 690:	48 07       	cpc	r20, r24
 692:	ab 07       	cpc	r26, r27
 694:	b0 e8       	ldi	r27, 0x80	; 128
 696:	09 f0       	breq	.+2      	; 0x69a <__divsf3_pse+0x56>
 698:	bb 0b       	sbc	r27, r27
 69a:	80 2d       	mov	r24, r0
 69c:	bf 01       	movw	r22, r30
 69e:	ff 27       	eor	r31, r31
 6a0:	93 58       	subi	r25, 0x83	; 131
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	2a f0       	brmi	.+10     	; 0x6b0 <__divsf3_pse+0x6c>
 6a6:	9e 3f       	cpi	r25, 0xFE	; 254
 6a8:	51 05       	cpc	r21, r1
 6aa:	68 f0       	brcs	.+26     	; 0x6c6 <__divsf3_pse+0x82>
 6ac:	8d c0       	rjmp	.+282    	; 0x7c8 <__fp_inf>
 6ae:	d7 c0       	rjmp	.+430    	; 0x85e <__fp_szero>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	ec f3       	brlt	.-6      	; 0x6ae <__divsf3_pse+0x6a>
 6b4:	98 3e       	cpi	r25, 0xE8	; 232
 6b6:	dc f3       	brlt	.-10     	; 0x6ae <__divsf3_pse+0x6a>
 6b8:	86 95       	lsr	r24
 6ba:	77 95       	ror	r23
 6bc:	67 95       	ror	r22
 6be:	b7 95       	ror	r27
 6c0:	f7 95       	ror	r31
 6c2:	9f 5f       	subi	r25, 0xFF	; 255
 6c4:	c9 f7       	brne	.-14     	; 0x6b8 <__divsf3_pse+0x74>
 6c6:	88 0f       	add	r24, r24
 6c8:	91 1d       	adc	r25, r1
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret
 6d2:	e1 e0       	ldi	r30, 0x01	; 1
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	bb 1f       	adc	r27, r27
 6dc:	62 17       	cp	r22, r18
 6de:	73 07       	cpc	r23, r19
 6e0:	84 07       	cpc	r24, r20
 6e2:	ba 07       	cpc	r27, r26
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__divsf3_pse+0xaa>
 6e6:	62 1b       	sub	r22, r18
 6e8:	73 0b       	sbc	r23, r19
 6ea:	84 0b       	sbc	r24, r20
 6ec:	ba 0b       	sbc	r27, r26
 6ee:	ee 1f       	adc	r30, r30
 6f0:	88 f7       	brcc	.-30     	; 0x6d4 <__divsf3_pse+0x90>
 6f2:	e0 95       	com	r30
 6f4:	08 95       	ret

000006f6 <__fixunssfsi>:
 6f6:	98 d0       	rcall	.+304    	; 0x828 <__fp_splitA>
 6f8:	88 f0       	brcs	.+34     	; 0x71c <__fixunssfsi+0x26>
 6fa:	9f 57       	subi	r25, 0x7F	; 127
 6fc:	90 f0       	brcs	.+36     	; 0x722 <__fixunssfsi+0x2c>
 6fe:	b9 2f       	mov	r27, r25
 700:	99 27       	eor	r25, r25
 702:	b7 51       	subi	r27, 0x17	; 23
 704:	a0 f0       	brcs	.+40     	; 0x72e <__fixunssfsi+0x38>
 706:	d1 f0       	breq	.+52     	; 0x73c <__fixunssfsi+0x46>
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	1a f0       	brmi	.+6      	; 0x718 <__fixunssfsi+0x22>
 712:	ba 95       	dec	r27
 714:	c9 f7       	brne	.-14     	; 0x708 <__fixunssfsi+0x12>
 716:	12 c0       	rjmp	.+36     	; 0x73c <__fixunssfsi+0x46>
 718:	b1 30       	cpi	r27, 0x01	; 1
 71a:	81 f0       	breq	.+32     	; 0x73c <__fixunssfsi+0x46>
 71c:	9f d0       	rcall	.+318    	; 0x85c <__fp_zero>
 71e:	b1 e0       	ldi	r27, 0x01	; 1
 720:	08 95       	ret
 722:	9c c0       	rjmp	.+312    	; 0x85c <__fp_zero>
 724:	67 2f       	mov	r22, r23
 726:	78 2f       	mov	r23, r24
 728:	88 27       	eor	r24, r24
 72a:	b8 5f       	subi	r27, 0xF8	; 248
 72c:	39 f0       	breq	.+14     	; 0x73c <__fixunssfsi+0x46>
 72e:	b9 3f       	cpi	r27, 0xF9	; 249
 730:	cc f3       	brlt	.-14     	; 0x724 <__fixunssfsi+0x2e>
 732:	86 95       	lsr	r24
 734:	77 95       	ror	r23
 736:	67 95       	ror	r22
 738:	b3 95       	inc	r27
 73a:	d9 f7       	brne	.-10     	; 0x732 <__fixunssfsi+0x3c>
 73c:	3e f4       	brtc	.+14     	; 0x74c <__fixunssfsi+0x56>
 73e:	90 95       	com	r25
 740:	80 95       	com	r24
 742:	70 95       	com	r23
 744:	61 95       	neg	r22
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8f 4f       	sbci	r24, 0xFF	; 255
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	08 95       	ret

0000074e <__floatunsisf>:
 74e:	e8 94       	clt
 750:	09 c0       	rjmp	.+18     	; 0x764 <__floatsisf+0x12>

00000752 <__floatsisf>:
 752:	97 fb       	bst	r25, 7
 754:	3e f4       	brtc	.+14     	; 0x764 <__floatsisf+0x12>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	99 23       	and	r25, r25
 766:	a9 f0       	breq	.+42     	; 0x792 <__floatsisf+0x40>
 768:	f9 2f       	mov	r31, r25
 76a:	96 e9       	ldi	r25, 0x96	; 150
 76c:	bb 27       	eor	r27, r27
 76e:	93 95       	inc	r25
 770:	f6 95       	lsr	r31
 772:	87 95       	ror	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b7 95       	ror	r27
 77a:	f1 11       	cpse	r31, r1
 77c:	f8 cf       	rjmp	.-16     	; 0x76e <__floatsisf+0x1c>
 77e:	fa f4       	brpl	.+62     	; 0x7be <__floatsisf+0x6c>
 780:	bb 0f       	add	r27, r27
 782:	11 f4       	brne	.+4      	; 0x788 <__floatsisf+0x36>
 784:	60 ff       	sbrs	r22, 0
 786:	1b c0       	rjmp	.+54     	; 0x7be <__floatsisf+0x6c>
 788:	6f 5f       	subi	r22, 0xFF	; 255
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	16 c0       	rjmp	.+44     	; 0x7be <__floatsisf+0x6c>
 792:	88 23       	and	r24, r24
 794:	11 f0       	breq	.+4      	; 0x79a <__floatsisf+0x48>
 796:	96 e9       	ldi	r25, 0x96	; 150
 798:	11 c0       	rjmp	.+34     	; 0x7bc <__floatsisf+0x6a>
 79a:	77 23       	and	r23, r23
 79c:	21 f0       	breq	.+8      	; 0x7a6 <__floatsisf+0x54>
 79e:	9e e8       	ldi	r25, 0x8E	; 142
 7a0:	87 2f       	mov	r24, r23
 7a2:	76 2f       	mov	r23, r22
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <__floatsisf+0x5e>
 7a6:	66 23       	and	r22, r22
 7a8:	71 f0       	breq	.+28     	; 0x7c6 <__floatsisf+0x74>
 7aa:	96 e8       	ldi	r25, 0x86	; 134
 7ac:	86 2f       	mov	r24, r22
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	2a f0       	brmi	.+10     	; 0x7be <__floatsisf+0x6c>
 7b4:	9a 95       	dec	r25
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	da f7       	brpl	.-10     	; 0x7b4 <__floatsisf+0x62>
 7be:	88 0f       	add	r24, r24
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret

000007c8 <__fp_inf>:
 7c8:	97 f9       	bld	r25, 7
 7ca:	9f 67       	ori	r25, 0x7F	; 127
 7cc:	80 e8       	ldi	r24, 0x80	; 128
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	08 95       	ret

000007d4 <__fp_nan>:
 7d4:	9f ef       	ldi	r25, 0xFF	; 255
 7d6:	80 ec       	ldi	r24, 0xC0	; 192
 7d8:	08 95       	ret

000007da <__fp_pscA>:
 7da:	00 24       	eor	r0, r0
 7dc:	0a 94       	dec	r0
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	18 06       	cpc	r1, r24
 7e4:	09 06       	cpc	r0, r25
 7e6:	08 95       	ret

000007e8 <__fp_pscB>:
 7e8:	00 24       	eor	r0, r0
 7ea:	0a 94       	dec	r0
 7ec:	12 16       	cp	r1, r18
 7ee:	13 06       	cpc	r1, r19
 7f0:	14 06       	cpc	r1, r20
 7f2:	05 06       	cpc	r0, r21
 7f4:	08 95       	ret

000007f6 <__fp_round>:
 7f6:	09 2e       	mov	r0, r25
 7f8:	03 94       	inc	r0
 7fa:	00 0c       	add	r0, r0
 7fc:	11 f4       	brne	.+4      	; 0x802 <__fp_round+0xc>
 7fe:	88 23       	and	r24, r24
 800:	52 f0       	brmi	.+20     	; 0x816 <__fp_round+0x20>
 802:	bb 0f       	add	r27, r27
 804:	40 f4       	brcc	.+16     	; 0x816 <__fp_round+0x20>
 806:	bf 2b       	or	r27, r31
 808:	11 f4       	brne	.+4      	; 0x80e <__fp_round+0x18>
 80a:	60 ff       	sbrs	r22, 0
 80c:	04 c0       	rjmp	.+8      	; 0x816 <__fp_round+0x20>
 80e:	6f 5f       	subi	r22, 0xFF	; 255
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	8f 4f       	sbci	r24, 0xFF	; 255
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	08 95       	ret

00000818 <__fp_split3>:
 818:	57 fd       	sbrc	r21, 7
 81a:	90 58       	subi	r25, 0x80	; 128
 81c:	44 0f       	add	r20, r20
 81e:	55 1f       	adc	r21, r21
 820:	59 f0       	breq	.+22     	; 0x838 <__fp_splitA+0x10>
 822:	5f 3f       	cpi	r21, 0xFF	; 255
 824:	71 f0       	breq	.+28     	; 0x842 <__fp_splitA+0x1a>
 826:	47 95       	ror	r20

00000828 <__fp_splitA>:
 828:	88 0f       	add	r24, r24
 82a:	97 fb       	bst	r25, 7
 82c:	99 1f       	adc	r25, r25
 82e:	61 f0       	breq	.+24     	; 0x848 <__fp_splitA+0x20>
 830:	9f 3f       	cpi	r25, 0xFF	; 255
 832:	79 f0       	breq	.+30     	; 0x852 <__fp_splitA+0x2a>
 834:	87 95       	ror	r24
 836:	08 95       	ret
 838:	12 16       	cp	r1, r18
 83a:	13 06       	cpc	r1, r19
 83c:	14 06       	cpc	r1, r20
 83e:	55 1f       	adc	r21, r21
 840:	f2 cf       	rjmp	.-28     	; 0x826 <__fp_split3+0xe>
 842:	46 95       	lsr	r20
 844:	f1 df       	rcall	.-30     	; 0x828 <__fp_splitA>
 846:	08 c0       	rjmp	.+16     	; 0x858 <__fp_splitA+0x30>
 848:	16 16       	cp	r1, r22
 84a:	17 06       	cpc	r1, r23
 84c:	18 06       	cpc	r1, r24
 84e:	99 1f       	adc	r25, r25
 850:	f1 cf       	rjmp	.-30     	; 0x834 <__fp_splitA+0xc>
 852:	86 95       	lsr	r24
 854:	71 05       	cpc	r23, r1
 856:	61 05       	cpc	r22, r1
 858:	08 94       	sec
 85a:	08 95       	ret

0000085c <__fp_zero>:
 85c:	e8 94       	clt

0000085e <__fp_szero>:
 85e:	bb 27       	eor	r27, r27
 860:	66 27       	eor	r22, r22
 862:	77 27       	eor	r23, r23
 864:	cb 01       	movw	r24, r22
 866:	97 f9       	bld	r25, 7
 868:	08 95       	ret

0000086a <__tablejump2__>:
 86a:	ee 0f       	add	r30, r30
 86c:	ff 1f       	adc	r31, r31
 86e:	00 24       	eor	r0, r0
 870:	00 1c       	adc	r0, r0
 872:	0b be       	out	0x3b, r0	; 59
 874:	07 90       	elpm	r0, Z+
 876:	f6 91       	elpm	r31, Z
 878:	e0 2d       	mov	r30, r0
 87a:	09 94       	ijmp

0000087c <_exit>:
 87c:	f8 94       	cli

0000087e <__stop_program>:
 87e:	ff cf       	rjmp	.-2      	; 0x87e <__stop_program>
