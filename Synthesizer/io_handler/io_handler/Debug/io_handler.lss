
io_handler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000b76  00000c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080017e  0080017e  00000c88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000168e  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a72  00000000  00000000  00002466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f8  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006db  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000998  00000000  00000000  00004233  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004bcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	a3 02       	muls	r26, r19
  8e:	b2 02       	muls	r27, r18
  90:	4d 03       	fmul	r20, r21
  92:	d9 02       	muls	r29, r25
  94:	f5 02       	muls	r31, r21
  96:	9e 03       	fmulsu	r17, r22
  98:	fe 02       	muls	r31, r30
  9a:	1a 03       	fmul	r17, r18
  9c:	a1 02       	muls	r26, r17
  9e:	23 03       	mulsu	r18, r19
  a0:	3f 03       	fmul	r19, r23

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e6 e7       	ldi	r30, 0x76	; 118
  b6:	fb e0       	ldi	r31, 0x0B	; 11
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	ae 37       	cpi	r26, 0x7E	; 126
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	ae e7       	ldi	r26, 0x7E	; 126
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a4 3a       	cpi	r26, 0xA4	; 164
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	4e d3       	rcall	.+1692   	; 0x776 <main>
  da:	4b c5       	rjmp	.+2710   	; 0xb72 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <TimerOn>:

#include <util/delay.h>
#define F_CPU 16000000UL

void ADC_init() {
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE);	//0x06 MIGHT FIX PROBLEM
  de:	8b e0       	ldi	r24, 0x0B	; 11
  e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  e4:	8d e7       	ldi	r24, 0x7D	; 125
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 102:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 106:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 10a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 10e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_avr_timer_cntcurr>
 112:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <_avr_timer_cntcurr+0x1>
 116:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <_avr_timer_cntcurr+0x2>
 11a:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <_avr_timer_cntcurr+0x3>
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <__vector_13>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <_avr_timer_cntcurr>
 138:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <_avr_timer_cntcurr+0x1>
 13c:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <_avr_timer_cntcurr+0x2>
 140:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <_avr_timer_cntcurr+0x3>
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	a1 09       	sbc	r26, r1
 148:	b1 09       	sbc	r27, r1
 14a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_avr_timer_cntcurr>
 14e:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <_avr_timer_cntcurr+0x1>
 152:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <_avr_timer_cntcurr+0x2>
 156:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <_avr_timer_cntcurr+0x3>
 15a:	89 2b       	or	r24, r25
 15c:	8a 2b       	or	r24, r26
 15e:	8b 2b       	or	r24, r27
 160:	99 f4       	brne	.+38     	; 0x188 <__vector_13+0x66>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <TimerFlag>
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 170:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 174:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 178:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_avr_timer_cntcurr>
 17c:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <_avr_timer_cntcurr+0x1>
 180:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <_avr_timer_cntcurr+0x2>
 184:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <_avr_timer_cntcurr+0x3>
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <TimerSet>:
 19a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 19e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1aa:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <_avr_timer_cntcurr>
 1ae:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <_avr_timer_cntcurr+0x1>
 1b2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <_avr_timer_cntcurr+0x2>
 1b6:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <_avr_timer_cntcurr+0x3>
 1ba:	08 95       	ret

000001bc <scaleTo100>:
}

unsigned char scaleTo100(){		
	return (ADC - 32.0)/9.77;	//THIS EQUATION IS UNIQUE TO THE POTENTIOMETERS I USED
 1bc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1c0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	3d d4       	rcall	.+2170   	; 0xa44 <__floatunsisf>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	52 e4       	ldi	r21, 0x42	; 66
 1d2:	3f d3       	rcall	.+1662   	; 0x852 <__subsf3>
 1d4:	2c ee       	ldi	r18, 0xEC	; 236
 1d6:	31 e5       	ldi	r19, 0x51	; 81
 1d8:	4c e1       	ldi	r20, 0x1C	; 28
 1da:	51 e4       	ldi	r21, 0x41	; 65
 1dc:	9f d3       	rcall	.+1854   	; 0x91c <__divsf3>
 1de:	06 d4       	rcall	.+2060   	; 0x9ec <__fixunssfsi>
 1e0:	86 2f       	mov	r24, r22
}
 1e2:	08 95       	ret

000001e4 <captureSingleKnob>:

unsigned char captureSingleKnob(unsigned char pos){
	ADMUX = 0b00011111 & pos;	//MIGHT CAUSE ADC PROBLEMS
 1e4:	8f 71       	andi	r24, 0x1F	; 31
 1e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	asm("nop");
 1ea:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	86 ea       	ldi	r24, 0xA6	; 166
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <captureSingleKnob+0xa>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <captureSingleKnob+0x10>
	_delay_us(500);		//DONT USE asm("nop") -- causes read error
	return scaleTo100();
 1f4:	e3 cf       	rjmp	.-58     	; 0x1bc <scaleTo100>
}
 1f6:	08 95       	ret

000001f8 <getPotentiometerSnapshot>:

void getPotentiometerSnapshot(unsigned char * array){	//5 potentiometers
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	8c 01       	movw	r16, r24
	unsigned char i;
	for(i = 0; i < 4; i = i + 1){
 200:	c0 e0       	ldi	r28, 0x00	; 0
		array[i] = captureSingleKnob(i + 1);
 202:	cf 5f       	subi	r28, 0xFF	; 255
 204:	8c 2f       	mov	r24, r28
 206:	ee df       	rcall	.-36     	; 0x1e4 <captureSingleKnob>
 208:	f8 01       	movw	r30, r16
 20a:	81 93       	st	Z+, r24
 20c:	8f 01       	movw	r16, r30
	return scaleTo100();
}

void getPotentiometerSnapshot(unsigned char * array){	//5 potentiometers
	unsigned char i;
	for(i = 0; i < 4; i = i + 1){
 20e:	c4 30       	cpi	r28, 0x04	; 4
 210:	c1 f7       	brne	.-16     	; 0x202 <getPotentiometerSnapshot+0xa>
		array[i] = captureSingleKnob(i + 1);
	}
}
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <isPressed>:

unsigned char isPressed(){
	return (~PINA & 0x20);
 21a:	80 b1       	in	r24, 0x00	; 0
 21c:	80 95       	com	r24
}
 21e:	80 72       	andi	r24, 0x20	; 32
 220:	08 95       	ret

00000222 <copyValues>:

void copyValues(unsigned char * copy, unsigned char * target){
 222:	fb 01       	movw	r30, r22
 224:	dc 01       	movw	r26, r24
 226:	9b 01       	movw	r18, r22
 228:	2c 5f       	subi	r18, 0xFC	; 252
 22a:	3f 4f       	sbci	r19, 0xFF	; 255
	for(unsigned char i = 0; i < 4; i++){
		copy[i] = target[i];
 22c:	81 91       	ld	r24, Z+
 22e:	8d 93       	st	X+, r24
unsigned char isPressed(){
	return (~PINA & 0x20);
}

void copyValues(unsigned char * copy, unsigned char * target){
	for(unsigned char i = 0; i < 4; i++){
 230:	e2 17       	cp	r30, r18
 232:	f3 07       	cpc	r31, r19
 234:	d9 f7       	brne	.-10     	; 0x22c <copyValues+0xa>
		copy[i] = target[i];
	}
}
 236:	08 95       	ret

00000238 <updateValues>:

void updateValues(unsigned char * parameters, unsigned char * oldValues, unsigned char * module, unsigned char * isUpdated){
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	a4 2f       	mov	r26, r20
 246:	b5 2f       	mov	r27, r21
 248:	e6 2e       	mov	r14, r22
 24a:	f7 2e       	mov	r15, r23
 24c:	e0 e0       	ldi	r30, 0x00	; 0
 24e:	f0 e0       	ldi	r31, 0x00	; 0
	for(unsigned char i = 0; i < 4; i++){
		if((*isUpdated & (1 << i)) == (1 << i)){
 250:	01 e0       	ldi	r16, 0x01	; 1
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	b8 01       	movw	r22, r16
 256:	0e 2e       	mov	r0, r30
 258:	02 c0       	rjmp	.+4      	; 0x25e <updateValues+0x26>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <updateValues+0x22>
 262:	e9 01       	movw	r28, r18
 264:	48 81       	ld	r20, Y
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	46 23       	and	r20, r22
 26a:	57 23       	and	r21, r23
 26c:	64 17       	cp	r22, r20
 26e:	75 07       	cpc	r23, r21
 270:	21 f4       	brne	.+8      	; 0x27a <updateValues+0x42>
			module[i] = parameters[i];
 272:	ec 01       	movw	r28, r24
 274:	48 81       	ld	r20, Y
 276:	4c 93       	st	X, r20
 278:	0b c0       	rjmp	.+22     	; 0x290 <updateValues+0x58>
		}
		else if(oldValues[i] != parameters[i]){
 27a:	ec 01       	movw	r28, r24
 27c:	48 81       	ld	r20, Y
 27e:	e7 01       	movw	r28, r14
 280:	58 81       	ld	r21, Y
 282:	54 17       	cp	r21, r20
 284:	29 f0       	breq	.+10     	; 0x290 <updateValues+0x58>
			module[i] = parameters[i];
 286:	4c 93       	st	X, r20
			*isUpdated |= (1 << i);
 288:	e9 01       	movw	r28, r18
 28a:	48 81       	ld	r20, Y
 28c:	64 2b       	or	r22, r20
 28e:	68 83       	st	Y, r22
 290:	31 96       	adiw	r30, 0x01	; 1
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	11 96       	adiw	r26, 0x01	; 1
 296:	df ef       	ldi	r29, 0xFF	; 255
 298:	ed 1a       	sub	r14, r29
 29a:	fd 0a       	sbc	r15, r29
		copy[i] = target[i];
	}
}

void updateValues(unsigned char * parameters, unsigned char * oldValues, unsigned char * module, unsigned char * isUpdated){
	for(unsigned char i = 0; i < 4; i++){
 29c:	e4 30       	cpi	r30, 0x04	; 4
 29e:	f1 05       	cpc	r31, r1
 2a0:	c9 f6       	brne	.-78     	; 0x254 <updateValues+0x1c>
		else if(oldValues[i] != parameters[i]){
			module[i] = parameters[i];
			*isUpdated |= (1 << i);
		}
	}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <calcMenu>:
typedef enum Menu {INIT, RELEASE, OSC1PREP, OSC1WAIT, OSC1MAIN, FILTPREP, FILTWAIT, FILTMAIN, AMPPREP, AMPWAIT, AMPMAIN} Menu;
#define MENU_ITEMS 3


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	98 df       	rcall	.-208    	; 0x1e4 <captureSingleKnob>
	if(value < 33){
 2b4:	81 32       	cpi	r24, 0x21	; 33
 2b6:	20 f0       	brcs	.+8      	; 0x2c0 <calcMenu+0x10>
		return OSC1PREP;		//OSC_1 PREP state
	}
	else if(value < 66){
 2b8:	82 34       	cpi	r24, 0x42	; 66
 2ba:	20 f0       	brcs	.+8      	; 0x2c4 <calcMenu+0x14>
		return FILTPREP;		//FILT PREP state
	}
	else{
		return AMPPREP;			//AMP PREP state
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	08 95       	ret


Menu calcMenu(){
	unsigned char value = captureSingleKnob(0);
	if(value < 33){
		return OSC1PREP;		//OSC_1 PREP state
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	08 95       	ret
	}
	else if(value < 66){
		return FILTPREP;		//FILT PREP state
 2c4:	85 e0       	ldi	r24, 0x05	; 5
	}
	else{
		return AMPPREP;			//AMP PREP state
	}
}
 2c6:	08 95       	ret

000002c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 2c8:	18 16       	cp	r1, r24
 2ca:	19 06       	cpc	r1, r25
 2cc:	5c f0       	brlt	.+22     	; 0x2e4 <delay_ms+0x1c>
 2ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 2d0:	00 00       	nop
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	84 17       	cp	r24, r20
 2de:	95 07       	cpc	r25, r21
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <delay_ms+0x20>
 2e2:	08 95       	ret
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 2e8:	27 e0       	ldi	r18, 0x07	; 7
 2ea:	33 e0       	ldi	r19, 0x03	; 3
 2ec:	f1 cf       	rjmp	.-30     	; 0x2d0 <delay_ms+0x8>

000002ee <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 2ee:	5f 98       	cbi	0x0b, 7	; 11
   DATA_BUS = Command;
 2f0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 2f2:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 2f4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 2f6:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	e5 cf       	rjmp	.-54     	; 0x2c8 <delay_ms>
 2fe:	08 95       	ret

00000300 <LCD_ClearScreen>:
#define E 6		// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	f5 cf       	rjmp	.-22     	; 0x2ee <LCD_WriteCommand>
 304:	08 95       	ret

00000306 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 306:	81 31       	cpi	r24, 0x11	; 17
 308:	18 f4       	brcc	.+6      	; 0x310 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 30a:	81 58       	subi	r24, 0x81	; 129
 30c:	f0 cf       	rjmp	.-32     	; 0x2ee <LCD_WriteCommand>
 30e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 310:	81 55       	subi	r24, 0x51	; 81
 312:	ed cf       	rjmp	.-38     	; 0x2ee <LCD_WriteCommand>
 314:	08 95       	ret

00000316 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 316:	84 e6       	ldi	r24, 0x64	; 100
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	d6 df       	rcall	.-84     	; 0x2c8 <delay_ms>
	LCD_WriteCommand(0x38);
 31c:	88 e3       	ldi	r24, 0x38	; 56
 31e:	e7 df       	rcall	.-50     	; 0x2ee <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	e5 df       	rcall	.-54     	; 0x2ee <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	e3 df       	rcall	.-58     	; 0x2ee <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	e1 df       	rcall	.-62     	; 0x2ee <LCD_WriteCommand>
	delay_ms(10);						 
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	cb cf       	rjmp	.-106    	; 0x2c8 <delay_ms>
 332:	08 95       	ret

00000334 <LCD_WriteData>:
 334:	5f 9a       	sbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 336:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 338:	5e 9a       	sbi	0x0b, 6	; 11
   asm("nop");
 33a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 33c:	5e 98       	cbi	0x0b, 6	; 11
   delay_ms(1);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	c2 cf       	rjmp	.-124    	; 0x2c8 <delay_ms>
 344:	08 95       	ret

00000346 <updateFilterParameter>:

void updateFilterParameter(unsigned char* array){
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	8c 01       	movw	r16, r24
	for(unsigned char i = 0; i < 2; i++){
		LCD_Cursor(17 + i * 4);
 34e:	81 e1       	ldi	r24, 0x11	; 17
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	d9 df       	rcall	.-78     	; 0x306 <LCD_Cursor>
		LCD_WriteData(array[i] / 10 + 48);
 354:	f8 01       	movw	r30, r16
 356:	80 81       	ld	r24, Z
 358:	cd ec       	ldi	r28, 0xCD	; 205
 35a:	8c 9f       	mul	r24, r28
 35c:	81 2d       	mov	r24, r1
 35e:	11 24       	eor	r1, r1
 360:	86 95       	lsr	r24
 362:	86 95       	lsr	r24
 364:	86 95       	lsr	r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	c0 96       	adiw	r24, 0x30	; 48
 36a:	e4 df       	rcall	.-56     	; 0x334 <LCD_WriteData>
		LCD_Cursor(18 + i * 4);
 36c:	82 e1       	ldi	r24, 0x12	; 18
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ca df       	rcall	.-108    	; 0x306 <LCD_Cursor>
		LCD_WriteData(array[i] % 10 + 48);
 372:	f8 01       	movw	r30, r16
 374:	80 81       	ld	r24, Z
 376:	8c 9f       	mul	r24, r28
 378:	91 2d       	mov	r25, r1
 37a:	11 24       	eor	r1, r1
 37c:	96 95       	lsr	r25
 37e:	96 95       	lsr	r25
 380:	96 95       	lsr	r25
 382:	99 0f       	add	r25, r25
 384:	29 2f       	mov	r18, r25
 386:	22 0f       	add	r18, r18
 388:	22 0f       	add	r18, r18
 38a:	92 0f       	add	r25, r18
 38c:	89 1b       	sub	r24, r25
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	c0 96       	adiw	r24, 0x30	; 48
	}
}

void updateFilterParameter(unsigned char* array){
	for(unsigned char i = 0; i < 2; i++){
		LCD_Cursor(17 + i * 4);
 392:	d0 df       	rcall	.-96     	; 0x334 <LCD_WriteData>
 394:	85 e1       	ldi	r24, 0x15	; 21
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	b6 df       	rcall	.-148    	; 0x306 <LCD_Cursor>
		LCD_WriteData(array[i] / 10 + 48);
 39a:	f8 01       	movw	r30, r16
 39c:	81 81       	ldd	r24, Z+1	; 0x01
 39e:	8c 9f       	mul	r24, r28
 3a0:	81 2d       	mov	r24, r1
 3a2:	11 24       	eor	r1, r1
 3a4:	86 95       	lsr	r24
 3a6:	86 95       	lsr	r24
 3a8:	86 95       	lsr	r24
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	c0 96       	adiw	r24, 0x30	; 48
		LCD_Cursor(18 + i * 4);
 3ae:	c2 df       	rcall	.-124    	; 0x334 <LCD_WriteData>
 3b0:	86 e1       	ldi	r24, 0x16	; 22
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	a8 df       	rcall	.-176    	; 0x306 <LCD_Cursor>
		LCD_WriteData(array[i] % 10 + 48);
 3b6:	f8 01       	movw	r30, r16
 3b8:	81 81       	ldd	r24, Z+1	; 0x01
 3ba:	8c 9f       	mul	r24, r28
 3bc:	c1 2d       	mov	r28, r1
 3be:	11 24       	eor	r1, r1
 3c0:	c6 95       	lsr	r28
 3c2:	c6 95       	lsr	r28
 3c4:	c6 95       	lsr	r28
 3c6:	cc 0f       	add	r28, r28
 3c8:	9c 2f       	mov	r25, r28
 3ca:	99 0f       	add	r25, r25
 3cc:	99 0f       	add	r25, r25
 3ce:	c9 0f       	add	r28, r25
 3d0:	8c 1b       	sub	r24, r28
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	c0 96       	adiw	r24, 0x30	; 48
		
	}
	LCD_Cursor(0);
 3d6:	ae df       	rcall	.-164    	; 0x334 <LCD_WriteData>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	94 df       	rcall	.-216    	; 0x306 <LCD_Cursor>
}
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <updateAmpParameter>:

void updateAmpParameter(unsigned char * array){
 3e6:	df 92       	push	r13
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	7c 01       	movw	r14, r24
 3f6:	01 e1       	ldi	r16, 0x11	; 17
 3f8:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0; i < 4; i++){
		str[0] = array[i] / 10 + 48;
		str[1] = array[i] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
 3fa:	0f 2e       	mov	r0, r31
 3fc:	fd ec       	ldi	r31, 0xCD	; 205
 3fe:	df 2e       	mov	r13, r31
 400:	f0 2d       	mov	r31, r0

void updateAmpParameter(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
		str[0] = array[i] / 10 + 48;
 402:	f7 01       	movw	r30, r14
 404:	d1 91       	ld	r29, Z+
 406:	7f 01       	movw	r14, r30
		str[1] = array[i] % 10 + 48;
		
		LCD_Cursor(17 + i * 4);
 408:	c8 01       	movw	r24, r16
 40a:	7d df       	rcall	.-262    	; 0x306 <LCD_Cursor>
		LCD_WriteData(str[0]);
 40c:	dd 9d       	mul	r29, r13
 40e:	c1 2d       	mov	r28, r1
 410:	11 24       	eor	r1, r1
 412:	c6 95       	lsr	r28
 414:	c6 95       	lsr	r28
 416:	c6 95       	lsr	r28
 418:	80 e3       	ldi	r24, 0x30	; 48
 41a:	8c 0f       	add	r24, r28
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	8a df       	rcall	.-236    	; 0x334 <LCD_WriteData>
		LCD_Cursor(18 + i * 4);	
 420:	c8 01       	movw	r24, r16
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	70 df       	rcall	.-288    	; 0x306 <LCD_Cursor>
		LCD_WriteData(str[1]);
 426:	cc 0f       	add	r28, r28
 428:	8c 2f       	mov	r24, r28
 42a:	88 0f       	add	r24, r24
 42c:	88 0f       	add	r24, r24
 42e:	c8 0f       	add	r28, r24
 430:	dc 1b       	sub	r29, r28
 432:	80 e3       	ldi	r24, 0x30	; 48
 434:	8d 0f       	add	r24, r29
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	7d df       	rcall	.-262    	; 0x334 <LCD_WriteData>
 43a:	0c 5f       	subi	r16, 0xFC	; 252
 43c:	1f 4f       	sbci	r17, 0xFF	; 255
}

void updateAmpParameter(unsigned char * array){
	unsigned char i;
	char str[2];
	for(i = 0; i < 4; i++){
 43e:	01 32       	cpi	r16, 0x21	; 33
 440:	11 05       	cpc	r17, r1
		LCD_Cursor(17 + i * 4);
		LCD_WriteData(str[0]);
		LCD_Cursor(18 + i * 4);	
		LCD_WriteData(str[1]);
	}
	LCD_Cursor(0);
 442:	f9 f6       	brne	.-66     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	5e df       	rcall	.-324    	; 0x306 <LCD_Cursor>
}
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	df 90       	pop	r13
 458:	08 95       	ret

0000045a <updateOscParameter>:

void updateOscParameter(unsigned char * array){
 45a:	ef 92       	push	r14
 45c:	ff 92       	push	r15
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	00 d0       	rcall	.+0      	; 0x468 <updateOscParameter+0xe>
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
	unsigned char str[3];
	
	if(array[0] < 33){
 46e:	fc 01       	movw	r30, r24
 470:	80 81       	ld	r24, Z
 472:	81 32       	cpi	r24, 0x21	; 33
 474:	38 f4       	brcc	.+14     	; 0x484 <updateOscParameter+0x2a>
		str[0] = 0x53;
 476:	83 e5       	ldi	r24, 0x53	; 83
 478:	89 83       	std	Y+1, r24	; 0x01
		str[1] = 0x41;
 47a:	81 e4       	ldi	r24, 0x41	; 65
 47c:	8a 83       	std	Y+2, r24	; 0x02
		str[2] = 0x57;
 47e:	87 e5       	ldi	r24, 0x57	; 87
 480:	8b 83       	std	Y+3, r24	; 0x03
 482:	20 c0       	rjmp	.+64     	; 0x4c4 <updateOscParameter+0x6a>
	}	
	else if(array[0] < 66){
 484:	82 34       	cpi	r24, 0x42	; 66
 486:	38 f4       	brcc	.+14     	; 0x496 <updateOscParameter+0x3c>
		str[0] = 0x53;
 488:	83 e5       	ldi	r24, 0x53	; 83
 48a:	89 83       	std	Y+1, r24	; 0x01
		str[1] = 0x51;
 48c:	81 e5       	ldi	r24, 0x51	; 81
 48e:	8a 83       	std	Y+2, r24	; 0x02
		str[2] = 0x52;
 490:	82 e5       	ldi	r24, 0x52	; 82
 492:	8b 83       	std	Y+3, r24	; 0x03
 494:	17 c0       	rjmp	.+46     	; 0x4c4 <updateOscParameter+0x6a>
	}
	else{
		
		str[0] = 0x54;
 496:	84 e5       	ldi	r24, 0x54	; 84
 498:	89 83       	std	Y+1, r24	; 0x01
		str[1] = 0x52;
 49a:	82 e5       	ldi	r24, 0x52	; 82
 49c:	8a 83       	std	Y+2, r24	; 0x02
		str[2] = 0x49;
 49e:	89 e4       	ldi	r24, 0x49	; 73
 4a0:	8b 83       	std	Y+3, r24	; 0x03
 4a2:	10 c0       	rjmp	.+32     	; 0x4c4 <updateOscParameter+0x6a>
	}

	for(unsigned char i = 0; i < 3; i++){
		LCD_Cursor(17 + i);
 4a4:	c8 01       	movw	r24, r16
 4a6:	2f df       	rcall	.-418    	; 0x306 <LCD_Cursor>
		LCD_WriteData(str[i]);
 4a8:	f7 01       	movw	r30, r14
 4aa:	81 91       	ld	r24, Z+
 4ac:	7f 01       	movw	r14, r30
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	41 df       	rcall	.-382    	; 0x334 <LCD_WriteData>
 4b2:	0f 5f       	subi	r16, 0xFF	; 255
 4b4:	1f 4f       	sbci	r17, 0xFF	; 255
		str[0] = 0x54;
		str[1] = 0x52;
		str[2] = 0x49;
	}

	for(unsigned char i = 0; i < 3; i++){
 4b6:	04 31       	cpi	r16, 0x14	; 20
 4b8:	11 05       	cpc	r17, r1
 4ba:	a1 f7       	brne	.-24     	; 0x4a4 <updateOscParameter+0x4a>
		LCD_Cursor(17 + i);
		LCD_WriteData(str[i]);
	}	
	LCD_Cursor(0);
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	22 df       	rcall	.-444    	; 0x306 <LCD_Cursor>
	LCD_Cursor(21);			// Level Output
	LCD_WriteData(array[1] / 10 + 48);
	LCD_Cursor(22);
	LCD_WriteData(array[1] % 10 + 48);
	*/
}
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <updateOscParameter+0x76>
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	7c 01       	movw	r14, r24
		LCD_WriteData(str[1]);
	}
	LCD_Cursor(0);
}

void updateOscParameter(unsigned char * array){
 4ca:	01 e1       	ldi	r16, 0x11	; 17
 4cc:	10 e0       	ldi	r17, 0x00	; 0
 4ce:	ea cf       	rjmp	.-44     	; 0x4a4 <updateOscParameter+0x4a>
	LCD_Cursor(21);			// Level Output
	LCD_WriteData(array[1] / 10 + 48);
	LCD_Cursor(22);
	LCD_WriteData(array[1] % 10 + 48);
	*/
}
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	08 95       	ret

000004e4 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	18 2f       	mov	r17, r24
 4ee:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 4f0:	07 df       	rcall	.-498    	; 0x300 <LCD_ClearScreen>
   LCD_ClearScreen();
 4f2:	06 df       	rcall	.-500    	; 0x300 <LCD_ClearScreen>
 4f4:	88 81       	ld	r24, Y
   unsigned char c = column;
   while(*string) {
 4f6:	88 23       	and	r24, r24
 4f8:	51 f0       	breq	.+20     	; 0x50e <LCD_DisplayString+0x2a>
 4fa:	01 e0       	ldi	r16, 0x01	; 1
      LCD_Cursor(c++);
 4fc:	01 0f       	add	r16, r17
 4fe:	81 2f       	mov	r24, r17
 500:	02 df       	rcall	.-508    	; 0x306 <LCD_Cursor>
      LCD_WriteData(*string++);
 502:	89 91       	ld	r24, Y+
 504:	17 df       	rcall	.-466    	; 0x334 <LCD_WriteData>
 506:	10 2f       	mov	r17, r16
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 508:	88 81       	ld	r24, Y

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 50a:	81 11       	cpse	r24, r1
 50c:	f6 cf       	rjmp	.-20     	; 0x4fa <LCD_DisplayString+0x16>
 50e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <menuTask>:
 518:	1f 93       	push	r17

unsigned char isUpdated = 0x00; //0000 0000
unsigned char oldValues[4];

//menuTask handles the main I/O
unsigned char menuTask(unsigned char currentState){
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	00 d0       	rcall	.+0      	; 0x520 <menuTask+0x8>
 520:	00 d0       	rcall	.+0      	; 0x522 <menuTask+0xa>
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	18 2f       	mov	r17, r24
	
	unsigned char parameters[4];
	getPotentiometerSnapshot(parameters);
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	65 de       	rcall	.-822    	; 0x1f8 <getPotentiometerSnapshot>
	
	switch(currentState){	//state transition calculations
 52e:	81 2f       	mov	r24, r17
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	8b 30       	cpi	r24, 0x0B	; 11
 534:	91 05       	cpc	r25, r1
 536:	08 f0       	brcs	.+2      	; 0x53a <menuTask+0x22>
 538:	ab c0       	rjmp	.+342    	; 0x690 <menuTask+0x178>
 53a:	fc 01       	movw	r30, r24
 53c:	ea 5b       	subi	r30, 0xBA	; 186
 53e:	ff 4f       	sbci	r31, 0xFF	; 255
 540:	0f c3       	rjmp	.+1566   	; 0xb60 <__tablejump2__>
			
			}
			break;
		
		case(AMPPREP):
			currentState = AMPWAIT;
 542:	19 e0       	ldi	r17, 0x09	; 9
 544:	fc c0       	rjmp	.+504    	; 0x73e <menuTask+0x226>
	getPotentiometerSnapshot(parameters);
	
	switch(currentState){	//state transition calculations
		
		case(INIT):
			osc[0] = 1;		//waveform = saw
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <osc>
			filt[0] = 0;	//lp filter amt = 0
 54c:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <filt>
			filt[0] = 0;	//resonance = 0
			amp[0] = 0;		//attack = 0
 550:	e7 e9       	ldi	r30, 0x97	; 151
 552:	f1 e0       	ldi	r31, 0x01	; 1
 554:	10 82       	st	Z, r1
			amp[1] = 0;		//decay = 0
 556:	11 82       	std	Z+1, r1	; 0x01
			amp[2] = 99;	//sustain = 99
 558:	83 e6       	ldi	r24, 0x63	; 99
			amp[3] = 0;		//release = 0
 55a:	82 83       	std	Z+2, r24	; 0x02
		
			currentState = calcMenu();
 55c:	13 82       	std	Z+3, r1	; 0x03
 55e:	a8 de       	rcall	.-688    	; 0x2b0 <calcMenu>
			break;
 560:	18 2f       	mov	r17, r24
		
		case(RELEASE):						//wait for button release
			
			if(isPressed()){
 562:	9e c0       	rjmp	.+316    	; 0x6a0 <menuTask+0x188>
 564:	5a de       	rcall	.-844    	; 0x21a <isPressed>
 566:	81 11       	cpse	r24, r1
 568:	ea c0       	rjmp	.+468    	; 0x73e <menuTask+0x226>
				return currentState; //NO ACTIONS PREFORMED IF BUTTON IS STILL PRESSED, can return immediately
			}
			isUpdated = 0x00;
 56a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			switch(previousMenuState){
 56e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <previousMenuState>
 572:	86 30       	cpi	r24, 0x06	; 6
 574:	09 f4       	brne	.+2      	; 0x578 <menuTask+0x60>
 576:	bf c0       	rjmp	.+382    	; 0x6f6 <menuTask+0x1de>
 578:	30 f4       	brcc	.+12     	; 0x586 <menuTask+0x6e>
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	09 f4       	brne	.+2      	; 0x580 <menuTask+0x68>
 57e:	8f c0       	rjmp	.+286    	; 0x69e <menuTask+0x186>
 580:	84 30       	cpi	r24, 0x04	; 4
 582:	49 f0       	breq	.+18     	; 0x596 <menuTask+0x7e>
 584:	11 c0       	rjmp	.+34     	; 0x5a8 <menuTask+0x90>
 586:	89 30       	cpi	r24, 0x09	; 9
 588:	09 f4       	brne	.+2      	; 0x58c <menuTask+0x74>
 58a:	ca c0       	rjmp	.+404    	; 0x720 <menuTask+0x208>
 58c:	8a 30       	cpi	r24, 0x0A	; 10
 58e:	49 f0       	breq	.+18     	; 0x5a2 <menuTask+0x8a>
 590:	87 30       	cpi	r24, 0x07	; 7
 592:	51 f4       	brne	.+20     	; 0x5a8 <menuTask+0x90>
				case(OSC1WAIT):
					currentState = OSC1MAIN;
					break;

				case(OSC1MAIN):
					currentState = calcMenu();
 594:	03 c0       	rjmp	.+6      	; 0x59c <menuTask+0x84>
 596:	8c de       	rcall	.-744    	; 0x2b0 <calcMenu>
					break;
 598:	18 2f       	mov	r17, r24
				case(FILTWAIT):
					currentState = FILTMAIN;
					break;
					
				case(FILTMAIN):
					currentState = calcMenu();
 59a:	82 c0       	rjmp	.+260    	; 0x6a0 <menuTask+0x188>
 59c:	89 de       	rcall	.-750    	; 0x2b0 <calcMenu>
 59e:	18 2f       	mov	r17, r24
					break;
 5a0:	7f c0       	rjmp	.+254    	; 0x6a0 <menuTask+0x188>
				case(AMPWAIT):
					currentState = AMPMAIN;
					break;
			
				case(AMPMAIN):
					currentState = calcMenu();
 5a2:	86 de       	rcall	.-756    	; 0x2b0 <calcMenu>
 5a4:	18 2f       	mov	r17, r24
					break;
 5a6:	7c c0       	rjmp	.+248    	; 0x6a0 <menuTask+0x188>
			
				default:
					LCD_DisplayString(1, "NO BACK STATE FOUND!");
 5a8:	64 e0       	ldi	r22, 0x04	; 4
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	9a df       	rcall	.-204    	; 0x4e4 <LCD_DisplayString>
			currentState = OSC1WAIT;
			break;
		
		case(OSC1WAIT)://OSC_1 WAIT
		
			if(calcMenu() != OSC1PREP){			//data knob priority over button press
 5b0:	c6 c0       	rjmp	.+396    	; 0x73e <menuTask+0x226>
 5b2:	7e de       	rcall	.-772    	; 0x2b0 <calcMenu>
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	19 f0       	breq	.+6      	; 0x5be <menuTask+0xa6>
				currentState = calcMenu();
 5b8:	7b de       	rcall	.-778    	; 0x2b0 <calcMenu>
 5ba:	18 2f       	mov	r17, r24
 5bc:	71 c0       	rjmp	.+226    	; 0x6a0 <menuTask+0x188>
 5be:	2d de       	rcall	.-934    	; 0x21a <isPressed>
			}
			
			else if(isPressed()){
 5c0:	88 23       	and	r24, r24
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <menuTask+0xae>
 5c4:	bc c0       	rjmp	.+376    	; 0x73e <menuTask+0x226>
 5c6:	83 e0       	ldi	r24, 0x03	; 3
				previousMenuState = OSC1WAIT;
 5c8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
				LCD_DisplayString(1, "WAV"); //LVL ");//OCT DET");
 5cc:	69 e1       	ldi	r22, 0x19	; 25
 5ce:	71 e0       	ldi	r23, 0x01	; 1
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	88 df       	rcall	.-240    	; 0x4e4 <LCD_DisplayString>
				copyValues(oldValues, parameters);
 5d4:	be 01       	movw	r22, r28
 5d6:	6f 5f       	subi	r22, 0xFF	; 255
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	8f e9       	ldi	r24, 0x9F	; 159
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	21 de       	rcall	.-958    	; 0x222 <copyValues>
 5e0:	8b e9       	ldi	r24, 0x9B	; 155
				updateOscParameter(osc);
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	3a df       	rcall	.-396    	; 0x45a <updateOscParameter>
 5e6:	11 e0       	ldi	r17, 0x01	; 1
				currentState = calcMenu();
			}
			
			else if(isPressed()){
				previousMenuState = OSC1WAIT;
				currentState = RELEASE;	//OSC_1 Release
 5e8:	aa c0       	rjmp	.+340    	; 0x73e <menuTask+0x226>
			
			}
			break;
		
		case(OSC1MAIN):
			if(isPressed()){
 5ea:	17 de       	rcall	.-978    	; 0x21a <isPressed>
 5ec:	88 23       	and	r24, r24
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <menuTask+0xda>
 5f0:	6d c0       	rjmp	.+218    	; 0x6cc <menuTask+0x1b4>
				previousMenuState = OSC1MAIN;
 5f2:	84 e0       	ldi	r24, 0x04	; 4
 5f4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <previousMenuState>
				currentState = RELEASE; //WAIT FOR RELEASE
 5f8:	11 e0       	ldi	r17, 0x01	; 1
 5fa:	a1 c0       	rjmp	.+322    	; 0x73e <menuTask+0x226>
		case(FILTPREP):
			currentState = FILTWAIT;
			break;
		
		case(FILTWAIT):
			if(calcMenu() != FILTPREP){			//data knob priority over button press
 5fc:	59 de       	rcall	.-846    	; 0x2b0 <calcMenu>
 5fe:	85 30       	cpi	r24, 0x05	; 5
 600:	19 f0       	breq	.+6      	; 0x608 <menuTask+0xf0>
				currentState = calcMenu();
 602:	56 de       	rcall	.-852    	; 0x2b0 <calcMenu>
 604:	18 2f       	mov	r17, r24
 606:	4c c0       	rjmp	.+152    	; 0x6a0 <menuTask+0x188>
			}
			else if(isPressed()){
 608:	08 de       	rcall	.-1008   	; 0x21a <isPressed>
 60a:	88 23       	and	r24, r24
 60c:	09 f4       	brne	.+2      	; 0x610 <menuTask+0xf8>
 60e:	97 c0       	rjmp	.+302    	; 0x73e <menuTask+0x226>
				previousMenuState = FILTWAIT;
 610:	86 e0       	ldi	r24, 0x06	; 6
 612:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
				LCD_DisplayString(1, "AMT RES"); //MOD TYPE");
 616:	6d e1       	ldi	r22, 0x1D	; 29
 618:	71 e0       	ldi	r23, 0x01	; 1
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	63 df       	rcall	.-314    	; 0x4e4 <LCD_DisplayString>
				copyValues(oldValues, parameters);
 61e:	be 01       	movw	r22, r28
 620:	6f 5f       	subi	r22, 0xFF	; 255
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f e9       	ldi	r24, 0x9F	; 159
 626:	91 e0       	ldi	r25, 0x01	; 1
				updateFilterParameter(filt);
 628:	fc dd       	rcall	.-1032   	; 0x222 <copyValues>
 62a:	83 e9       	ldi	r24, 0x93	; 147
 62c:	91 e0       	ldi	r25, 0x01	; 1
			if(calcMenu() != FILTPREP){			//data knob priority over button press
				currentState = calcMenu();
			}
			else if(isPressed()){
				previousMenuState = FILTWAIT;
				currentState = RELEASE;	//OSC_1 Release
 62e:	8b de       	rcall	.-746    	; 0x346 <updateFilterParameter>
 630:	11 e0       	ldi	r17, 0x01	; 1
				updateFilterParameter(filt);
			}
			break;
		
		case(FILTMAIN):
			if(isPressed()){
 632:	85 c0       	rjmp	.+266    	; 0x73e <menuTask+0x226>
 634:	f2 dd       	rcall	.-1052   	; 0x21a <isPressed>
 636:	88 23       	and	r24, r24
 638:	09 f4       	brne	.+2      	; 0x63c <menuTask+0x124>
				previousMenuState = FILTMAIN;
 63a:	5d c0       	rjmp	.+186    	; 0x6f6 <menuTask+0x1de>
 63c:	87 e0       	ldi	r24, 0x07	; 7
 63e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <previousMenuState>
				currentState = RELEASE; //WAIT FOR RELEASE
 642:	11 e0       	ldi	r17, 0x01	; 1
		case(AMPPREP):
			currentState = AMPWAIT;
			break;
		
		case(AMPWAIT):
			if(calcMenu() != AMPPREP){			//data knob priority over button press
 644:	7c c0       	rjmp	.+248    	; 0x73e <menuTask+0x226>
 646:	34 de       	rcall	.-920    	; 0x2b0 <calcMenu>
 648:	88 30       	cpi	r24, 0x08	; 8
				currentState = calcMenu();
 64a:	19 f0       	breq	.+6      	; 0x652 <menuTask+0x13a>
 64c:	31 de       	rcall	.-926    	; 0x2b0 <calcMenu>
 64e:	18 2f       	mov	r17, r24
			}
			else if(isPressed()){
 650:	27 c0       	rjmp	.+78     	; 0x6a0 <menuTask+0x188>
 652:	e3 dd       	rcall	.-1082   	; 0x21a <isPressed>
 654:	88 23       	and	r24, r24
 656:	09 f4       	brne	.+2      	; 0x65a <menuTask+0x142>
 658:	72 c0       	rjmp	.+228    	; 0x73e <menuTask+0x226>
				previousMenuState = AMPWAIT;
 65a:	89 e0       	ldi	r24, 0x09	; 9
 65c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <previousMenuState>
				currentState = RELEASE;	//OSC_1 Release
				LCD_DisplayString(1, "A   D   S   R");
 660:	65 e2       	ldi	r22, 0x25	; 37
 662:	71 e0       	ldi	r23, 0x01	; 1
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	3e df       	rcall	.-388    	; 0x4e4 <LCD_DisplayString>
				copyValues(oldValues, parameters);
 668:	be 01       	movw	r22, r28
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f e9       	ldi	r24, 0x9F	; 159
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	d7 dd       	rcall	.-1106   	; 0x222 <copyValues>
 674:	87 e9       	ldi	r24, 0x97	; 151
				updateAmpParameter(amp);
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	b6 de       	rcall	.-660    	; 0x3e6 <updateAmpParameter>
 67a:	11 e0       	ldi	r17, 0x01	; 1
 67c:	60 c0       	rjmp	.+192    	; 0x73e <menuTask+0x226>
			if(calcMenu() != AMPPREP){			//data knob priority over button press
				currentState = calcMenu();
			}
			else if(isPressed()){
				previousMenuState = AMPWAIT;
				currentState = RELEASE;	//OSC_1 Release
 67e:	cd dd       	rcall	.-1126   	; 0x21a <isPressed>
 680:	88 23       	and	r24, r24
				updateAmpParameter(amp);
			}
			break;
		
		case(AMPMAIN):
			if(isPressed()){
 682:	09 f4       	brne	.+2      	; 0x686 <menuTask+0x16e>
 684:	4d c0       	rjmp	.+154    	; 0x720 <menuTask+0x208>
 686:	8a e0       	ldi	r24, 0x0A	; 10
 688:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <previousMenuState>
				previousMenuState = AMPMAIN;
 68c:	11 e0       	ldi	r17, 0x01	; 1
 68e:	57 c0       	rjmp	.+174    	; 0x73e <menuTask+0x226>
				currentState = RELEASE; //WAIT FOR RELEASE
 690:	63 e3       	ldi	r22, 0x33	; 51
			}
			break;
		
		default:
			LCD_DisplayString(1, "ERROR no defined state transition");
 692:	71 e0       	ldi	r23, 0x01	; 1
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	26 df       	rcall	.-436    	; 0x4e4 <LCD_DisplayString>
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <menuTask+0x188>
 69a:	13 e0       	ldi	r17, 0x03	; 3
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <menuTask+0x188>
					LCD_DisplayString(1, "NO BACK STATE FOUND!");
			}
			break;

		case(OSC1PREP)://OSC_1 PREP
			currentState = OSC1WAIT;
 69e:	14 e0       	ldi	r17, 0x04	; 4
 6a0:	15 30       	cpi	r17, 0x05	; 5
				return currentState; //NO ACTIONS PREFORMED IF BUTTON IS STILL PRESSED, can return immediately
			}
			isUpdated = 0x00;
			switch(previousMenuState){
				case(OSC1WAIT):
					currentState = OSC1MAIN;
 6a2:	11 f1       	breq	.+68     	; 0x6e8 <menuTask+0x1d0>
		
		default:
			LCD_DisplayString(1, "ERROR no defined state transition");
	}
	
	switch(currentState){	//state actions
 6a4:	28 f4       	brcc	.+10     	; 0x6b0 <menuTask+0x198>
 6a6:	12 30       	cpi	r17, 0x02	; 2
 6a8:	51 f0       	breq	.+20     	; 0x6be <menuTask+0x1a6>
 6aa:	14 30       	cpi	r17, 0x04	; 4
 6ac:	79 f0       	breq	.+30     	; 0x6cc <menuTask+0x1b4>
 6ae:	47 c0       	rjmp	.+142    	; 0x73e <menuTask+0x226>
 6b0:	18 30       	cpi	r17, 0x08	; 8
 6b2:	79 f1       	breq	.+94     	; 0x712 <menuTask+0x1fa>
 6b4:	1a 30       	cpi	r17, 0x0A	; 10
 6b6:	a1 f1       	breq	.+104    	; 0x720 <menuTask+0x208>
 6b8:	17 30       	cpi	r17, 0x07	; 7
		case(OSC1PREP):
			LCD_DisplayString(1, "  OSCILLATOR 1");
 6ba:	e9 f0       	breq	.+58     	; 0x6f6 <menuTask+0x1de>
 6bc:	40 c0       	rjmp	.+128    	; 0x73e <menuTask+0x226>
 6be:	65 e5       	ldi	r22, 0x55	; 85
 6c0:	71 e0       	ldi	r23, 0x01	; 1
 6c2:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Cursor(0);
 6c4:	0f df       	rcall	.-482    	; 0x4e4 <LCD_DisplayString>
 6c6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 6c8:	1e de       	rcall	.-964    	; 0x306 <LCD_Cursor>
		
		case(OSC1MAIN):
			updateValues(parameters, oldValues, osc, &isUpdated);
 6ca:	39 c0       	rjmp	.+114    	; 0x73e <menuTask+0x226>
 6cc:	2e e7       	ldi	r18, 0x7E	; 126
 6ce:	31 e0       	ldi	r19, 0x01	; 1
 6d0:	4b e9       	ldi	r20, 0x9B	; 155
 6d2:	51 e0       	ldi	r21, 0x01	; 1
 6d4:	6f e9       	ldi	r22, 0x9F	; 159
 6d6:	71 e0       	ldi	r23, 0x01	; 1
 6d8:	ce 01       	movw	r24, r28
			updateOscParameter(osc);
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	ad dd       	rcall	.-1190   	; 0x238 <updateValues>
 6de:	8b e9       	ldi	r24, 0x9B	; 155
 6e0:	91 e0       	ldi	r25, 0x01	; 1
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
	}
	return currentState;
 6e2:	bb de       	rcall	.-650    	; 0x45a <updateOscParameter>
			break;
		
		case(OSC1MAIN):
			updateValues(parameters, oldValues, osc, &isUpdated);
			updateOscParameter(osc);
			break;
 6e4:	14 e0       	ldi	r17, 0x04	; 4
		
		case(FILTPREP):
			LCD_DisplayString(1, "     FILTER");
 6e6:	2b c0       	rjmp	.+86     	; 0x73e <menuTask+0x226>
 6e8:	64 e6       	ldi	r22, 0x64	; 100
 6ea:	71 e0       	ldi	r23, 0x01	; 1
 6ec:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Cursor(0);
 6ee:	fa de       	rcall	.-524    	; 0x4e4 <LCD_DisplayString>
 6f0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 6f2:	09 de       	rcall	.-1006   	; 0x306 <LCD_Cursor>
		
		case(FILTMAIN):
			updateValues(parameters, oldValues, filt, &isUpdated);
 6f4:	24 c0       	rjmp	.+72     	; 0x73e <menuTask+0x226>
 6f6:	2e e7       	ldi	r18, 0x7E	; 126
 6f8:	31 e0       	ldi	r19, 0x01	; 1
 6fa:	43 e9       	ldi	r20, 0x93	; 147
 6fc:	51 e0       	ldi	r21, 0x01	; 1
 6fe:	6f e9       	ldi	r22, 0x9F	; 159
 700:	71 e0       	ldi	r23, 0x01	; 1
 702:	ce 01       	movw	r24, r28
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	98 dd       	rcall	.-1232   	; 0x238 <updateValues>
			updateFilterParameter(filt);
 708:	83 e9       	ldi	r24, 0x93	; 147
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	1c de       	rcall	.-968    	; 0x346 <updateFilterParameter>
 70e:	17 e0       	ldi	r17, 0x07	; 7
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
	}
	return currentState;
 710:	16 c0       	rjmp	.+44     	; 0x73e <menuTask+0x226>
			break;
		
		case(FILTMAIN):
			updateValues(parameters, oldValues, filt, &isUpdated);
			updateFilterParameter(filt);
			break;
 712:	60 e7       	ldi	r22, 0x70	; 112
		
		case(AMPPREP):
			LCD_DisplayString(1, "   AMPLIFIER");
 714:	71 e0       	ldi	r23, 0x01	; 1
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	e5 de       	rcall	.-566    	; 0x4e4 <LCD_DisplayString>
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	f4 dd       	rcall	.-1048   	; 0x306 <LCD_Cursor>
			LCD_Cursor(0);
 71e:	0f c0       	rjmp	.+30     	; 0x73e <menuTask+0x226>
 720:	2e e7       	ldi	r18, 0x7E	; 126
 722:	31 e0       	ldi	r19, 0x01	; 1
			break;
 724:	47 e9       	ldi	r20, 0x97	; 151
		
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
 726:	51 e0       	ldi	r21, 0x01	; 1
 728:	6f e9       	ldi	r22, 0x9F	; 159
 72a:	71 e0       	ldi	r23, 0x01	; 1
 72c:	ce 01       	movw	r24, r28
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	83 dd       	rcall	.-1274   	; 0x238 <updateValues>
 732:	87 e9       	ldi	r24, 0x97	; 151
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	57 de       	rcall	.-850    	; 0x3e6 <updateAmpParameter>
 738:	1a e0       	ldi	r17, 0x0A	; 10
			updateAmpParameter(amp);
 73a:	01 c0       	rjmp	.+2      	; 0x73e <menuTask+0x226>
 73c:	16 e0       	ldi	r17, 0x06	; 6
 73e:	81 2f       	mov	r24, r17
 740:	0f 90       	pop	r0
			break;
	}
	return currentState;
 742:	0f 90       	pop	r0
			break;
		
		case(AMPMAIN):
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
 744:	0f 90       	pop	r0
				currentState = RELEASE; //WAIT FOR RELEASE
			}
			break;
		
		case(FILTPREP):
			currentState = FILTWAIT;
 746:	0f 90       	pop	r0
			updateValues(parameters, oldValues, amp, &isUpdated);
			updateAmpParameter(amp);
			break;
	}
	return currentState;
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	08 95       	ret

00000750 <initExtern>:
 750:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TimerFlag>
 754:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_avr_timer_cntcurr>
 758:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_avr_timer_cntcurr+0x1>
	}
}

void initExtern(){
	TimerFlag = 0;
	_avr_timer_cntcurr = 0;
 75c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_avr_timer_cntcurr+0x2>
 760:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <_avr_timer_cntcurr+0x3>
	_avr_timer_M = 0;
 764:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 768:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 76c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
 770:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
 774:	08 95       	ret

00000776 <main>:
//forward function declerations
void initExtern();	//used to initialize external variables
unsigned char menuTask(unsigned char);

int main(void)
{
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	2b 97       	sbiw	r28, 0x0b	; 11
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	f8 94       	cli
 784:	de bf       	out	0x3e, r29	; 62
 786:	0f be       	out	0x3f, r0	; 63
 788:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;	//potentiometer inputs
 78a:	11 b8       	out	0x01, r1	; 1
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 790:	84 b9       	out	0x04, r24	; 4
 792:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;	//LCD data out
 794:	87 b9       	out	0x07, r24	; 7
 796:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;	//bits 6 and 4 input Rx in || everything else is output. Tx and LCD control
 798:	8a b9       	out	0x0a, r24	; 10
 79a:	1b b8       	out	0x0b, r1	; 11
	
	initExtern();
 79c:	d9 df       	rcall	.-78     	; 0x750 <initExtern>
	
	unsigned char i = 0x00;
	unsigned char taskCount = 1;
	task menu;
	
	tasks[0] = menu;
 79e:	8b e0       	ldi	r24, 0x0B	; 11
 7a0:	fe 01       	movw	r30, r28
 7a2:	31 96       	adiw	r30, 0x01	; 1
 7a4:	a4 e8       	ldi	r26, 0x84	; 132
 7a6:	b1 e0       	ldi	r27, 0x01	; 1
 7a8:	01 90       	ld	r0, Z+
 7aa:	0d 92       	st	X+, r0
 7ac:	8a 95       	dec	r24
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x32>
	tasks[0].period = 1;
 7b0:	e4 e8       	ldi	r30, 0x84	; 132
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	a0 e0       	ldi	r26, 0x00	; 0
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	80 83       	st	Z, r24
 7be:	91 83       	std	Z+1, r25	; 0x01
 7c0:	a2 83       	std	Z+2, r26	; 0x02
 7c2:	b3 83       	std	Z+3, r27	; 0x03
	tasks[0].state = 0;
 7c4:	10 86       	std	Z+8, r1	; 0x08
	tasks[0].elapsedTime = 0;
 7c6:	14 82       	std	Z+4, r1	; 0x04
 7c8:	15 82       	std	Z+5, r1	; 0x05
 7ca:	16 82       	std	Z+6, r1	; 0x06
 7cc:	17 82       	std	Z+7, r1	; 0x07
	tasks[0].TickFunction = &menuTask;
 7ce:	8c e8       	ldi	r24, 0x8C	; 140
 7d0:	92 e0       	ldi	r25, 0x02	; 2
 7d2:	92 87       	std	Z+10, r25	; 0x0a
 7d4:	81 87       	std	Z+9, r24	; 0x09

#include <util/delay.h>
#define F_CPU 16000000UL

void ADC_init() {
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE);	//0x06 MIGHT FIX PROBLEM
 7d6:	80 ee       	ldi	r24, 0xE0	; 224
 7d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	ADC_init();		//init ADC
	LCD_init();		//init LCD
 7dc:	9c dd       	rcall	.-1224   	; 0x316 <LCD_init>
	TimerSet(5);	//set timer interrupt cycle period
 7de:	65 e0       	ldi	r22, 0x05	; 5
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();		//enable timer
 7e6:	d9 dc       	rcall	.-1614   	; 0x19a <TimerSet>
 7e8:	7a dc       	rcall	.-1804   	; 0xde <TimerOn>
	
	while (1)
	{
		for(i = 0; i < taskCount; i++){
			if(tasks[i].elapsedTime >= tasks[i].period){
 7ea:	04 e8       	ldi	r16, 0x84	; 132
 7ec:	11 e0       	ldi	r17, 0x01	; 1
 7ee:	d8 01       	movw	r26, r16
 7f0:	14 96       	adiw	r26, 0x04	; 4
 7f2:	4d 91       	ld	r20, X+
 7f4:	5d 91       	ld	r21, X+
 7f6:	6d 91       	ld	r22, X+
 7f8:	7c 91       	ld	r23, X
 7fa:	17 97       	sbiw	r26, 0x07	; 7
 7fc:	8d 91       	ld	r24, X+
 7fe:	9d 91       	ld	r25, X+
 800:	0d 90       	ld	r0, X+
 802:	bc 91       	ld	r27, X
 804:	a0 2d       	mov	r26, r0
 806:	48 17       	cp	r20, r24
 808:	59 07       	cpc	r21, r25
 80a:	6a 07       	cpc	r22, r26
 80c:	7b 07       	cpc	r23, r27
 80e:	70 f0       	brcs	.+28     	; 0x82c <main+0xb6>
				tasks[i].state = tasks[i].TickFunction(tasks[i].state);
 810:	d8 01       	movw	r26, r16
 812:	19 96       	adiw	r26, 0x09	; 9
 814:	ed 91       	ld	r30, X+
 816:	fc 91       	ld	r31, X
 818:	1a 97       	sbiw	r26, 0x0a	; 10
 81a:	18 96       	adiw	r26, 0x08	; 8
 81c:	8c 91       	ld	r24, X
 81e:	09 95       	icall
 820:	f8 01       	movw	r30, r16
 822:	80 87       	std	Z+8, r24	; 0x08
				tasks[i].elapsedTime = 0;
 824:	14 82       	std	Z+4, r1	; 0x04
 826:	15 82       	std	Z+5, r1	; 0x05
 828:	16 82       	std	Z+6, r1	; 0x06
 82a:	17 82       	std	Z+7, r1	; 0x07
			}
			tasks[i].elapsedTime += 5;
 82c:	f8 01       	movw	r30, r16
 82e:	84 81       	ldd	r24, Z+4	; 0x04
 830:	95 81       	ldd	r25, Z+5	; 0x05
 832:	a6 81       	ldd	r26, Z+6	; 0x06
 834:	b7 81       	ldd	r27, Z+7	; 0x07
 836:	05 96       	adiw	r24, 0x05	; 5
 838:	a1 1d       	adc	r26, r1
 83a:	b1 1d       	adc	r27, r1
 83c:	84 83       	std	Z+4, r24	; 0x04
 83e:	95 83       	std	Z+5, r25	; 0x05
 840:	a6 83       	std	Z+6, r26	; 0x06
 842:	b7 83       	std	Z+7, r27	; 0x07
		}
		TimerFlag = 0;
 844:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <TimerFlag>
		while(!TimerFlag);
 848:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <TimerFlag>
 84c:	88 23       	and	r24, r24
 84e:	e1 f3       	breq	.-8      	; 0x848 <main+0xd2>
 850:	ce cf       	rjmp	.-100    	; 0x7ee <main+0x78>

00000852 <__subsf3>:
 852:	50 58       	subi	r21, 0x80	; 128

00000854 <__addsf3>:
 854:	bb 27       	eor	r27, r27
 856:	aa 27       	eor	r26, r26
 858:	0e d0       	rcall	.+28     	; 0x876 <__addsf3x>
 85a:	48 c1       	rjmp	.+656    	; 0xaec <__fp_round>
 85c:	39 d1       	rcall	.+626    	; 0xad0 <__fp_pscA>
 85e:	30 f0       	brcs	.+12     	; 0x86c <__addsf3+0x18>
 860:	3e d1       	rcall	.+636    	; 0xade <__fp_pscB>
 862:	20 f0       	brcs	.+8      	; 0x86c <__addsf3+0x18>
 864:	31 f4       	brne	.+12     	; 0x872 <__addsf3+0x1e>
 866:	9f 3f       	cpi	r25, 0xFF	; 255
 868:	11 f4       	brne	.+4      	; 0x86e <__addsf3+0x1a>
 86a:	1e f4       	brtc	.+6      	; 0x872 <__addsf3+0x1e>
 86c:	2e c1       	rjmp	.+604    	; 0xaca <__fp_nan>
 86e:	0e f4       	brtc	.+2      	; 0x872 <__addsf3+0x1e>
 870:	e0 95       	com	r30
 872:	e7 fb       	bst	r30, 7
 874:	24 c1       	rjmp	.+584    	; 0xabe <__fp_inf>

00000876 <__addsf3x>:
 876:	e9 2f       	mov	r30, r25
 878:	4a d1       	rcall	.+660    	; 0xb0e <__fp_split3>
 87a:	80 f3       	brcs	.-32     	; 0x85c <__addsf3+0x8>
 87c:	ba 17       	cp	r27, r26
 87e:	62 07       	cpc	r22, r18
 880:	73 07       	cpc	r23, r19
 882:	84 07       	cpc	r24, r20
 884:	95 07       	cpc	r25, r21
 886:	18 f0       	brcs	.+6      	; 0x88e <__addsf3x+0x18>
 888:	71 f4       	brne	.+28     	; 0x8a6 <__addsf3x+0x30>
 88a:	9e f5       	brtc	.+102    	; 0x8f2 <__addsf3x+0x7c>
 88c:	62 c1       	rjmp	.+708    	; 0xb52 <__fp_zero>
 88e:	0e f4       	brtc	.+2      	; 0x892 <__addsf3x+0x1c>
 890:	e0 95       	com	r30
 892:	0b 2e       	mov	r0, r27
 894:	ba 2f       	mov	r27, r26
 896:	a0 2d       	mov	r26, r0
 898:	0b 01       	movw	r0, r22
 89a:	b9 01       	movw	r22, r18
 89c:	90 01       	movw	r18, r0
 89e:	0c 01       	movw	r0, r24
 8a0:	ca 01       	movw	r24, r20
 8a2:	a0 01       	movw	r20, r0
 8a4:	11 24       	eor	r1, r1
 8a6:	ff 27       	eor	r31, r31
 8a8:	59 1b       	sub	r21, r25
 8aa:	99 f0       	breq	.+38     	; 0x8d2 <__addsf3x+0x5c>
 8ac:	59 3f       	cpi	r21, 0xF9	; 249
 8ae:	50 f4       	brcc	.+20     	; 0x8c4 <__addsf3x+0x4e>
 8b0:	50 3e       	cpi	r21, 0xE0	; 224
 8b2:	68 f1       	brcs	.+90     	; 0x90e <__addsf3x+0x98>
 8b4:	1a 16       	cp	r1, r26
 8b6:	f0 40       	sbci	r31, 0x00	; 0
 8b8:	a2 2f       	mov	r26, r18
 8ba:	23 2f       	mov	r18, r19
 8bc:	34 2f       	mov	r19, r20
 8be:	44 27       	eor	r20, r20
 8c0:	58 5f       	subi	r21, 0xF8	; 248
 8c2:	f3 cf       	rjmp	.-26     	; 0x8aa <__addsf3x+0x34>
 8c4:	46 95       	lsr	r20
 8c6:	37 95       	ror	r19
 8c8:	27 95       	ror	r18
 8ca:	a7 95       	ror	r26
 8cc:	f0 40       	sbci	r31, 0x00	; 0
 8ce:	53 95       	inc	r21
 8d0:	c9 f7       	brne	.-14     	; 0x8c4 <__addsf3x+0x4e>
 8d2:	7e f4       	brtc	.+30     	; 0x8f2 <__addsf3x+0x7c>
 8d4:	1f 16       	cp	r1, r31
 8d6:	ba 0b       	sbc	r27, r26
 8d8:	62 0b       	sbc	r22, r18
 8da:	73 0b       	sbc	r23, r19
 8dc:	84 0b       	sbc	r24, r20
 8de:	ba f0       	brmi	.+46     	; 0x90e <__addsf3x+0x98>
 8e0:	91 50       	subi	r25, 0x01	; 1
 8e2:	a1 f0       	breq	.+40     	; 0x90c <__addsf3x+0x96>
 8e4:	ff 0f       	add	r31, r31
 8e6:	bb 1f       	adc	r27, r27
 8e8:	66 1f       	adc	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	c2 f7       	brpl	.-16     	; 0x8e0 <__addsf3x+0x6a>
 8f0:	0e c0       	rjmp	.+28     	; 0x90e <__addsf3x+0x98>
 8f2:	ba 0f       	add	r27, r26
 8f4:	62 1f       	adc	r22, r18
 8f6:	73 1f       	adc	r23, r19
 8f8:	84 1f       	adc	r24, r20
 8fa:	48 f4       	brcc	.+18     	; 0x90e <__addsf3x+0x98>
 8fc:	87 95       	ror	r24
 8fe:	77 95       	ror	r23
 900:	67 95       	ror	r22
 902:	b7 95       	ror	r27
 904:	f7 95       	ror	r31
 906:	9e 3f       	cpi	r25, 0xFE	; 254
 908:	08 f0       	brcs	.+2      	; 0x90c <__addsf3x+0x96>
 90a:	b3 cf       	rjmp	.-154    	; 0x872 <__addsf3+0x1e>
 90c:	93 95       	inc	r25
 90e:	88 0f       	add	r24, r24
 910:	08 f0       	brcs	.+2      	; 0x914 <__addsf3x+0x9e>
 912:	99 27       	eor	r25, r25
 914:	ee 0f       	add	r30, r30
 916:	97 95       	ror	r25
 918:	87 95       	ror	r24
 91a:	08 95       	ret

0000091c <__divsf3>:
 91c:	0c d0       	rcall	.+24     	; 0x936 <__divsf3x>
 91e:	e6 c0       	rjmp	.+460    	; 0xaec <__fp_round>
 920:	de d0       	rcall	.+444    	; 0xade <__fp_pscB>
 922:	40 f0       	brcs	.+16     	; 0x934 <__divsf3+0x18>
 924:	d5 d0       	rcall	.+426    	; 0xad0 <__fp_pscA>
 926:	30 f0       	brcs	.+12     	; 0x934 <__divsf3+0x18>
 928:	21 f4       	brne	.+8      	; 0x932 <__divsf3+0x16>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	19 f0       	breq	.+6      	; 0x934 <__divsf3+0x18>
 92e:	c7 c0       	rjmp	.+398    	; 0xabe <__fp_inf>
 930:	51 11       	cpse	r21, r1
 932:	10 c1       	rjmp	.+544    	; 0xb54 <__fp_szero>
 934:	ca c0       	rjmp	.+404    	; 0xaca <__fp_nan>

00000936 <__divsf3x>:
 936:	eb d0       	rcall	.+470    	; 0xb0e <__fp_split3>
 938:	98 f3       	brcs	.-26     	; 0x920 <__divsf3+0x4>

0000093a <__divsf3_pse>:
 93a:	99 23       	and	r25, r25
 93c:	c9 f3       	breq	.-14     	; 0x930 <__divsf3+0x14>
 93e:	55 23       	and	r21, r21
 940:	b1 f3       	breq	.-20     	; 0x92e <__divsf3+0x12>
 942:	95 1b       	sub	r25, r21
 944:	55 0b       	sbc	r21, r21
 946:	bb 27       	eor	r27, r27
 948:	aa 27       	eor	r26, r26
 94a:	62 17       	cp	r22, r18
 94c:	73 07       	cpc	r23, r19
 94e:	84 07       	cpc	r24, r20
 950:	38 f0       	brcs	.+14     	; 0x960 <__divsf3_pse+0x26>
 952:	9f 5f       	subi	r25, 0xFF	; 255
 954:	5f 4f       	sbci	r21, 0xFF	; 255
 956:	22 0f       	add	r18, r18
 958:	33 1f       	adc	r19, r19
 95a:	44 1f       	adc	r20, r20
 95c:	aa 1f       	adc	r26, r26
 95e:	a9 f3       	breq	.-22     	; 0x94a <__divsf3_pse+0x10>
 960:	33 d0       	rcall	.+102    	; 0x9c8 <__divsf3_pse+0x8e>
 962:	0e 2e       	mov	r0, r30
 964:	3a f0       	brmi	.+14     	; 0x974 <__divsf3_pse+0x3a>
 966:	e0 e8       	ldi	r30, 0x80	; 128
 968:	30 d0       	rcall	.+96     	; 0x9ca <__divsf3_pse+0x90>
 96a:	91 50       	subi	r25, 0x01	; 1
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	e6 95       	lsr	r30
 970:	00 1c       	adc	r0, r0
 972:	ca f7       	brpl	.-14     	; 0x966 <__divsf3_pse+0x2c>
 974:	29 d0       	rcall	.+82     	; 0x9c8 <__divsf3_pse+0x8e>
 976:	fe 2f       	mov	r31, r30
 978:	27 d0       	rcall	.+78     	; 0x9c8 <__divsf3_pse+0x8e>
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	bb 1f       	adc	r27, r27
 982:	26 17       	cp	r18, r22
 984:	37 07       	cpc	r19, r23
 986:	48 07       	cpc	r20, r24
 988:	ab 07       	cpc	r26, r27
 98a:	b0 e8       	ldi	r27, 0x80	; 128
 98c:	09 f0       	breq	.+2      	; 0x990 <__divsf3_pse+0x56>
 98e:	bb 0b       	sbc	r27, r27
 990:	80 2d       	mov	r24, r0
 992:	bf 01       	movw	r22, r30
 994:	ff 27       	eor	r31, r31
 996:	93 58       	subi	r25, 0x83	; 131
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	2a f0       	brmi	.+10     	; 0x9a6 <__divsf3_pse+0x6c>
 99c:	9e 3f       	cpi	r25, 0xFE	; 254
 99e:	51 05       	cpc	r21, r1
 9a0:	68 f0       	brcs	.+26     	; 0x9bc <__divsf3_pse+0x82>
 9a2:	8d c0       	rjmp	.+282    	; 0xabe <__fp_inf>
 9a4:	d7 c0       	rjmp	.+430    	; 0xb54 <__fp_szero>
 9a6:	5f 3f       	cpi	r21, 0xFF	; 255
 9a8:	ec f3       	brlt	.-6      	; 0x9a4 <__divsf3_pse+0x6a>
 9aa:	98 3e       	cpi	r25, 0xE8	; 232
 9ac:	dc f3       	brlt	.-10     	; 0x9a4 <__divsf3_pse+0x6a>
 9ae:	86 95       	lsr	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	b7 95       	ror	r27
 9b6:	f7 95       	ror	r31
 9b8:	9f 5f       	subi	r25, 0xFF	; 255
 9ba:	c9 f7       	brne	.-14     	; 0x9ae <__divsf3_pse+0x74>
 9bc:	88 0f       	add	r24, r24
 9be:	91 1d       	adc	r25, r1
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
 9c4:	97 f9       	bld	r25, 7
 9c6:	08 95       	ret
 9c8:	e1 e0       	ldi	r30, 0x01	; 1
 9ca:	66 0f       	add	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	bb 1f       	adc	r27, r27
 9d2:	62 17       	cp	r22, r18
 9d4:	73 07       	cpc	r23, r19
 9d6:	84 07       	cpc	r24, r20
 9d8:	ba 07       	cpc	r27, r26
 9da:	20 f0       	brcs	.+8      	; 0x9e4 <__divsf3_pse+0xaa>
 9dc:	62 1b       	sub	r22, r18
 9de:	73 0b       	sbc	r23, r19
 9e0:	84 0b       	sbc	r24, r20
 9e2:	ba 0b       	sbc	r27, r26
 9e4:	ee 1f       	adc	r30, r30
 9e6:	88 f7       	brcc	.-30     	; 0x9ca <__divsf3_pse+0x90>
 9e8:	e0 95       	com	r30
 9ea:	08 95       	ret

000009ec <__fixunssfsi>:
 9ec:	98 d0       	rcall	.+304    	; 0xb1e <__fp_splitA>
 9ee:	88 f0       	brcs	.+34     	; 0xa12 <__fixunssfsi+0x26>
 9f0:	9f 57       	subi	r25, 0x7F	; 127
 9f2:	90 f0       	brcs	.+36     	; 0xa18 <__fixunssfsi+0x2c>
 9f4:	b9 2f       	mov	r27, r25
 9f6:	99 27       	eor	r25, r25
 9f8:	b7 51       	subi	r27, 0x17	; 23
 9fa:	a0 f0       	brcs	.+40     	; 0xa24 <__fixunssfsi+0x38>
 9fc:	d1 f0       	breq	.+52     	; 0xa32 <__fixunssfsi+0x46>
 9fe:	66 0f       	add	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	1a f0       	brmi	.+6      	; 0xa0e <__fixunssfsi+0x22>
 a08:	ba 95       	dec	r27
 a0a:	c9 f7       	brne	.-14     	; 0x9fe <__fixunssfsi+0x12>
 a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__fixunssfsi+0x46>
 a0e:	b1 30       	cpi	r27, 0x01	; 1
 a10:	81 f0       	breq	.+32     	; 0xa32 <__fixunssfsi+0x46>
 a12:	9f d0       	rcall	.+318    	; 0xb52 <__fp_zero>
 a14:	b1 e0       	ldi	r27, 0x01	; 1
 a16:	08 95       	ret
 a18:	9c c0       	rjmp	.+312    	; 0xb52 <__fp_zero>
 a1a:	67 2f       	mov	r22, r23
 a1c:	78 2f       	mov	r23, r24
 a1e:	88 27       	eor	r24, r24
 a20:	b8 5f       	subi	r27, 0xF8	; 248
 a22:	39 f0       	breq	.+14     	; 0xa32 <__fixunssfsi+0x46>
 a24:	b9 3f       	cpi	r27, 0xF9	; 249
 a26:	cc f3       	brlt	.-14     	; 0xa1a <__fixunssfsi+0x2e>
 a28:	86 95       	lsr	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b3 95       	inc	r27
 a30:	d9 f7       	brne	.-10     	; 0xa28 <__fixunssfsi+0x3c>
 a32:	3e f4       	brtc	.+14     	; 0xa42 <__fixunssfsi+0x56>
 a34:	90 95       	com	r25
 a36:	80 95       	com	r24
 a38:	70 95       	com	r23
 a3a:	61 95       	neg	r22
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	8f 4f       	sbci	r24, 0xFF	; 255
 a40:	9f 4f       	sbci	r25, 0xFF	; 255
 a42:	08 95       	ret

00000a44 <__floatunsisf>:
 a44:	e8 94       	clt
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <__floatsisf+0x12>

00000a48 <__floatsisf>:
 a48:	97 fb       	bst	r25, 7
 a4a:	3e f4       	brtc	.+14     	; 0xa5a <__floatsisf+0x12>
 a4c:	90 95       	com	r25
 a4e:	80 95       	com	r24
 a50:	70 95       	com	r23
 a52:	61 95       	neg	r22
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	8f 4f       	sbci	r24, 0xFF	; 255
 a58:	9f 4f       	sbci	r25, 0xFF	; 255
 a5a:	99 23       	and	r25, r25
 a5c:	a9 f0       	breq	.+42     	; 0xa88 <__floatsisf+0x40>
 a5e:	f9 2f       	mov	r31, r25
 a60:	96 e9       	ldi	r25, 0x96	; 150
 a62:	bb 27       	eor	r27, r27
 a64:	93 95       	inc	r25
 a66:	f6 95       	lsr	r31
 a68:	87 95       	ror	r24
 a6a:	77 95       	ror	r23
 a6c:	67 95       	ror	r22
 a6e:	b7 95       	ror	r27
 a70:	f1 11       	cpse	r31, r1
 a72:	f8 cf       	rjmp	.-16     	; 0xa64 <__floatsisf+0x1c>
 a74:	fa f4       	brpl	.+62     	; 0xab4 <__floatsisf+0x6c>
 a76:	bb 0f       	add	r27, r27
 a78:	11 f4       	brne	.+4      	; 0xa7e <__floatsisf+0x36>
 a7a:	60 ff       	sbrs	r22, 0
 a7c:	1b c0       	rjmp	.+54     	; 0xab4 <__floatsisf+0x6c>
 a7e:	6f 5f       	subi	r22, 0xFF	; 255
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	16 c0       	rjmp	.+44     	; 0xab4 <__floatsisf+0x6c>
 a88:	88 23       	and	r24, r24
 a8a:	11 f0       	breq	.+4      	; 0xa90 <__floatsisf+0x48>
 a8c:	96 e9       	ldi	r25, 0x96	; 150
 a8e:	11 c0       	rjmp	.+34     	; 0xab2 <__floatsisf+0x6a>
 a90:	77 23       	and	r23, r23
 a92:	21 f0       	breq	.+8      	; 0xa9c <__floatsisf+0x54>
 a94:	9e e8       	ldi	r25, 0x8E	; 142
 a96:	87 2f       	mov	r24, r23
 a98:	76 2f       	mov	r23, r22
 a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__floatsisf+0x5e>
 a9c:	66 23       	and	r22, r22
 a9e:	71 f0       	breq	.+28     	; 0xabc <__floatsisf+0x74>
 aa0:	96 e8       	ldi	r25, 0x86	; 134
 aa2:	86 2f       	mov	r24, r22
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	2a f0       	brmi	.+10     	; 0xab4 <__floatsisf+0x6c>
 aaa:	9a 95       	dec	r25
 aac:	66 0f       	add	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	da f7       	brpl	.-10     	; 0xaaa <__floatsisf+0x62>
 ab4:	88 0f       	add	r24, r24
 ab6:	96 95       	lsr	r25
 ab8:	87 95       	ror	r24
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <__fp_inf>:
 abe:	97 f9       	bld	r25, 7
 ac0:	9f 67       	ori	r25, 0x7F	; 127
 ac2:	80 e8       	ldi	r24, 0x80	; 128
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	08 95       	ret

00000aca <__fp_nan>:
 aca:	9f ef       	ldi	r25, 0xFF	; 255
 acc:	80 ec       	ldi	r24, 0xC0	; 192
 ace:	08 95       	ret

00000ad0 <__fp_pscA>:
 ad0:	00 24       	eor	r0, r0
 ad2:	0a 94       	dec	r0
 ad4:	16 16       	cp	r1, r22
 ad6:	17 06       	cpc	r1, r23
 ad8:	18 06       	cpc	r1, r24
 ada:	09 06       	cpc	r0, r25
 adc:	08 95       	ret

00000ade <__fp_pscB>:
 ade:	00 24       	eor	r0, r0
 ae0:	0a 94       	dec	r0
 ae2:	12 16       	cp	r1, r18
 ae4:	13 06       	cpc	r1, r19
 ae6:	14 06       	cpc	r1, r20
 ae8:	05 06       	cpc	r0, r21
 aea:	08 95       	ret

00000aec <__fp_round>:
 aec:	09 2e       	mov	r0, r25
 aee:	03 94       	inc	r0
 af0:	00 0c       	add	r0, r0
 af2:	11 f4       	brne	.+4      	; 0xaf8 <__fp_round+0xc>
 af4:	88 23       	and	r24, r24
 af6:	52 f0       	brmi	.+20     	; 0xb0c <__fp_round+0x20>
 af8:	bb 0f       	add	r27, r27
 afa:	40 f4       	brcc	.+16     	; 0xb0c <__fp_round+0x20>
 afc:	bf 2b       	or	r27, r31
 afe:	11 f4       	brne	.+4      	; 0xb04 <__fp_round+0x18>
 b00:	60 ff       	sbrs	r22, 0
 b02:	04 c0       	rjmp	.+8      	; 0xb0c <__fp_round+0x20>
 b04:	6f 5f       	subi	r22, 0xFF	; 255
 b06:	7f 4f       	sbci	r23, 0xFF	; 255
 b08:	8f 4f       	sbci	r24, 0xFF	; 255
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	08 95       	ret

00000b0e <__fp_split3>:
 b0e:	57 fd       	sbrc	r21, 7
 b10:	90 58       	subi	r25, 0x80	; 128
 b12:	44 0f       	add	r20, r20
 b14:	55 1f       	adc	r21, r21
 b16:	59 f0       	breq	.+22     	; 0xb2e <__fp_splitA+0x10>
 b18:	5f 3f       	cpi	r21, 0xFF	; 255
 b1a:	71 f0       	breq	.+28     	; 0xb38 <__fp_splitA+0x1a>
 b1c:	47 95       	ror	r20

00000b1e <__fp_splitA>:
 b1e:	88 0f       	add	r24, r24
 b20:	97 fb       	bst	r25, 7
 b22:	99 1f       	adc	r25, r25
 b24:	61 f0       	breq	.+24     	; 0xb3e <__fp_splitA+0x20>
 b26:	9f 3f       	cpi	r25, 0xFF	; 255
 b28:	79 f0       	breq	.+30     	; 0xb48 <__fp_splitA+0x2a>
 b2a:	87 95       	ror	r24
 b2c:	08 95       	ret
 b2e:	12 16       	cp	r1, r18
 b30:	13 06       	cpc	r1, r19
 b32:	14 06       	cpc	r1, r20
 b34:	55 1f       	adc	r21, r21
 b36:	f2 cf       	rjmp	.-28     	; 0xb1c <__fp_split3+0xe>
 b38:	46 95       	lsr	r20
 b3a:	f1 df       	rcall	.-30     	; 0xb1e <__fp_splitA>
 b3c:	08 c0       	rjmp	.+16     	; 0xb4e <__fp_splitA+0x30>
 b3e:	16 16       	cp	r1, r22
 b40:	17 06       	cpc	r1, r23
 b42:	18 06       	cpc	r1, r24
 b44:	99 1f       	adc	r25, r25
 b46:	f1 cf       	rjmp	.-30     	; 0xb2a <__fp_splitA+0xc>
 b48:	86 95       	lsr	r24
 b4a:	71 05       	cpc	r23, r1
 b4c:	61 05       	cpc	r22, r1
 b4e:	08 94       	sec
 b50:	08 95       	ret

00000b52 <__fp_zero>:
 b52:	e8 94       	clt

00000b54 <__fp_szero>:
 b54:	bb 27       	eor	r27, r27
 b56:	66 27       	eor	r22, r22
 b58:	77 27       	eor	r23, r23
 b5a:	cb 01       	movw	r24, r22
 b5c:	97 f9       	bld	r25, 7
 b5e:	08 95       	ret

00000b60 <__tablejump2__>:
 b60:	ee 0f       	add	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	00 24       	eor	r0, r0
 b66:	00 1c       	adc	r0, r0
 b68:	0b be       	out	0x3b, r0	; 59
 b6a:	07 90       	elpm	r0, Z+
 b6c:	f6 91       	elpm	r31, Z
 b6e:	e0 2d       	mov	r30, r0
 b70:	09 94       	ijmp

00000b72 <_exit>:
 b72:	f8 94       	cli

00000b74 <__stop_program>:
 b74:	ff cf       	rjmp	.-2      	; 0xb74 <__stop_program>
